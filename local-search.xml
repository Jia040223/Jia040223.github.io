<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[Probabilistic Machine Learning]: Fundamentals-Optimization</title>
    <link href="/2024/10/29/Fundamentals-Optimization/"/>
    <url>/2024/10/29/Fundamentals-Optimization/</url>
    
    <content type="html"><![CDATA[<p>优化问题通常可以表示为：</p><p><span class="math display">\[\theta^* \in \arg\min_{\theta \in\Theta} L(\theta)\]</span></p><p>其中，<span class="math inline">\(\theta^*\)</span>是优化得到的参数，<span class="math inline">\(\Theta\)</span>是参数空间，可以是任意维度的实数集合，而<span class="math inline">\(L(\theta)\)</span>是目标函数或损失函数，它衡量了参数与某种目标之间的距离。</p><p>凸优化问题的局部最优解即是全局最优解，而非凸问题可能有多个局部最优解。</p><h2 id="一自动微分automatic-differentiation">一、自动微分（AutomaticDifferentiation）</h2><p><strong>自动微分（AD）</strong>是计算复杂函数的导数的有效方法，尤其是在深度学习和优化中具有重要应用。AD与数值微分和符号微分不同，它通过跟踪计算图来有效计算导数。</p><h3 id="函数微分的基础知识">1. 函数微分的基础知识</h3><p>在介绍自动微分之前，首先需要了解导数的数学基础。</p><ul><li><strong>符号表示</strong></li></ul><p>给定函数<span class="math inline">\(f : \mathbb{R}^2 \rightarrow\mathbb{R}\)</span>，我们可以写其关于第一个参数的偏导数为<span class="math inline">\(\frac{\partial f}{\partialx_1}\bigg|_{x=a}\)</span>或者<span class="math inline">\(\frac{\partial}{\partial a_1} f(a_1,a_2)\)</span></p><p>这种命名变量表示法在函数嵌套较多时会变得复杂，因此可以考虑采用函数操作符的表示法。</p><ul><li><strong>线性和多线性函数：</strong></li></ul><p>定义线性函数<span class="math inline">\(F : \mathbb{R}^n\overset{\ell}{\rightarrow}\mathbb{R}^m\)</span>。每个线性映射对应一个矩阵，其列由<span class="math inline">\(F[e_1], \ldots,F[e_n]\)</span>组成（具体线性代数课已经证明并详细学习了）。</p><p>多线性映射定义为：</p><p><span class="math display">\[T : \mathbb{R}^n \times \cdots \times\mathbb{R}^n \rightarrow \mathbb{R}^m \ \]</span></p><p>它对应于<span class="math inline">\(\mathbb{R}^{m \times n \times\cdots \times n}\)</span>中的一个张量。用<span class="math inline">\(T[x_1, \ldots, x_k] \in\mathbb{R}^m\)</span>表示这样的<span class="math inline">\(k\)</span>-线性映射对向量<span class="math inline">\(x_1, \ldots, x_k \in\mathbb{R}^n\)</span>的作用。</p><ul><li><strong>导数算子</strong></li></ul><p>对可微分函数<span class="math inline">\(f : U \rightarrow\mathbb{R}^m\)</span>，其导数可以表示为：</p><p><span class="math display">\[\partial f : U \rightarrow (\mathbb{R}^n\overset{\ell}{\rightarrow} \mathbb{R}^m)\]</span></p><p>或者等价地：</p><p><span class="math display">\[\partial f : U \rightarrow \mathbb{R}^{m\times n}\]</span></p><p><strong>雅可比矩阵</strong>表示为所有偏导数组成的矩阵，给定<span class="math inline">\(x \in U\)</span>，可以表示为：</p><p><span class="math display">\[J(x) = \partial f(x)\]</span></p><p><strong>雅可比-向量积 (JVP)</strong>定义为：</p><p><span class="math display">\[(x, v) \mapsto \partialf(x)[v]\]</span></p><p>它表示在点<span class="math inline">\(x\)</span>处，输入扰动<span class="math inline">\(v\)</span>对输出的影响。</p><p><strong>向量-雅可比积 (VJP)</strong>定义为：</p><p><span class="math display">\[(x, u) \mapsto \partialf(x)^T[u]\]</span></p><p>它表示在点<span class="math inline">\(x\)</span>处，输出扰动<span class="math inline">\(u\)</span>对应输入的变化。</p><p><img src="/images/Fundamentals-Optimization/1.png"></p><ul><li><strong>高阶导数</strong></li></ul><p>如果函数<span class="math inline">\(f\)</span>在其域<span class="math inline">\(U\)</span>内任意可微，则其二阶导数写作：</p><p><span class="math display">\[\partial^2 f : U \rightarrow(\mathbb{R}^n \overset{\ell}{\rightarrow} \mathbb{R}^n\overset{\ell}{\rightarrow} \mathbb{R}^m)\]</span></p><p>对于任意高阶导数，可以表示为：</p><p><span class="math display">\[\partial^k f : U \rightarrow(\mathbb{R}^n \overset{\ell}{\rightarrow} \cdots\overset{\ell}{\rightarrow} \mathbb{R}^m)\]</span></p><p><span class="math inline">\(\partial^2 f\)</span>在<span class="math inline">\(m=1\)</span>时对应于海森矩阵。</p><p>泰勒级数近似：</p><p><span class="math display">\[f(x + v) \approx f(x) + \partial f(x)[v]+ \frac{1}{2!} \partial^2 f(x)[v, v] + \cdots + \frac{1}{k!} \partial^kf(x)[v, \ldots, v]\]</span></p><ul><li><strong>多个输入</strong></li></ul><p>考虑一个两个参数的函数：</p><p><span class="math display">\[g : U \times V \rightarrow\mathbb{R}^m\]</span></p><p>其中<span class="math inline">\(U \subset\mathbb{R}^{n_1}​\)</span>和<span class="math inline">\(V \subset\mathbb{R}^{n_2}\)</span>​。</p><p>导数函数可以分别表示为：</p><p><span class="math display">\[\partial_1 g : \mathbb{R}^{n_1} \times\mathbb{R}^{n_2} \rightarrow (\mathbb{R}^{n_1}\overset{\ell}{\rightarrow} \mathbb{R}^m)\]</span></p><p><span class="math display">\[\partial_2 g : \mathbb{R}^{n_1} \times\mathbb{R}^{n_2} \rightarrow (\mathbb{R}^{n_2}\overset{\ell}{\rightarrow} \mathbb{R}^m)\]</span></p><p>总导数表示为：</p><p><span class="math display">\[\partial g : \mathbb{R}^{n_1} \times\mathbb{R}^{n_2} \rightarrow (\mathbb{R}^{n_1} \times \mathbb{R}^{n_2}\overset{\ell}{\rightarrow} \mathbb{R}^m)\]</span></p><p>对于点<span class="math inline">\((x, y) \in U \timesV\)</span>和扰动<span class="math inline">\(\dot{x} \in\mathbb{R}^{n_1}，\dot{y} \in \mathbb{R}^{n_2}\)</span>​，有：</p><p><span class="math display">\[\partial g(x, y)[\dot{x}, \dot{y}] =\partial_1 g(x, y)[\dot{x}] + \partial_2 g(x, y)[\dot{y}]\]</span></p><p>或者，从矩阵的角度来看：</p><p><span class="math display">\[\partial g(x, y) = \begin{pmatrix}\partial_1 g(x, y) &amp; \partial_2 g(x, y) \end{pmatrix}\]</span></p><p><img src="/images/Fundamentals-Optimization/2.png"></p><ul><li><strong>组合和分支</strong></li></ul><p>当我们有复合函数<span class="math inline">\(f = g \circh\)</span>时，链式法则表明：</p><p><span class="math display">\[\partial f(x) = \partial g(h(x)) \circ\partial h(x)\]</span></p><p>当存在多个输入时，比如：</p><p><span class="math display">\[f(x) = g(a(x), b(x))\]</span></p><p>我们可以使用链式法则来计算：</p><p><span class="math display">\[\begin{align*} \partial f(x) &amp;=\partial g(h(x)) \circ \partial h(x) \\ &amp;= \partial_1 g(a(x), b(x))\circ \partial a(x) + \partial_2 g(a(x), b(x)) \circ \partialb(x)  \end{align*}\]</span></p><p><img src="/images/Fundamentals-Optimization/3.png"></p><h3 id="链法则到计算图">2. 链法则到计算图</h3><p>自动微分的目标是计算任意输入函数的导数。对于给定的函数<span class="math inline">\(f: U \subset \mathbb{R}^n \to\mathbb{R}^m\)</span>和线性化点<span class="math inline">\(x \inU\)</span>，AD 可以计算：</p><ul><li>输入扰动<span class="math inline">\(v \in \mathbb{R}^n\)</span>的JVP：<span class="math inline">\(\partial f(x)[v]\)</span></li><li>输出扰动<span class="math inline">\(u \in \mathbb{R}^m\)</span>的VJP：<span class="math inline">\(\partial f(x)^T[u]\)</span></li></ul><p>决定使用哪些函数作为输入，以及如何表示这些函数，是AD设置中最重要的方面之一。</p><h4 id="链式组合和链式法则">2.1 链式组合和链式法则</h4><p>这里考虑的函数是基本操作的链式组合。链式组合的导数按照链式法则分解，从而提供了一种便利的函数表示形式。例如，考虑由三个操作依次组成的函数：<br><span class="math inline">\(f = c \circ b \circ a\)</span></p><p>根据链式法则，其导数为：<br><span class="math display">\[\partial f(x) = \partial c(b(a(x))) \circ\partial b(a(x)) \circ \partial a(x)\]</span></p><p>针对输入扰动<span class="math inline">\(v \in \mathbb{R}^n\)</span>的JVP 可以表示为：<br><span class="math display">\[\partial f(x)[v] = \partial c(b(a(x)))[\partial b(a(x)) [\partial a(x)[v]]]\]</span></p><p>这个表达式的括号突出了从右到左的评估顺序，这对应于前向模式自动微分。为了计算这个JVP，我们需要首先计算原始链的前缀：<br><span class="math display">\[x, \quad a(x), \quad b(a(x))\]</span></p><p>以及相应的偏导数：<br><span class="math display">\[\partial a(x), \quad \partial b(a(x)),\quad \partial c(b(a(x)))\]</span></p><p>所以，具体的算法如下：</p><p><img src="/images/Fundamentals-Optimization/4.png"></p><p>对于输出扰动<span class="math inline">\(u\in\mathbb{R}^m\)</span>，VJP 的表达式为：<br><span class="math display">\[\partial f(x)^T[u] = \partial a(x)^T\partial b(a(x))^T \partial c(b(a(x)))^T[u]\]</span></p><p>这里对应于反向模式自动微分。</p><p>为了进行 VJP，我们可以首先计算原始链的前缀</p><p><span class="math inline">\(x、a(x)、 b(a(x))\)</span></p><p>然后反向读取它们，具体为：<br><span class="math display">\[\partial c(b(a(x)))^T, \quad \partialb(a(x))^T, \quad \partial a(x)^T\]</span></p><p><img src="/images/Fundamentals-Optimization/5.png"></p><p>反向模式自动微分在输出为标量时（如深度学习中的损失函数）比前向模式更快。然而，反向模式在向后遍历之前存储所有链的前缀，因此它消耗的内存比前向模式多。</p><p>在某些特殊情况下（如每个链操作都是可逆的），可以通过一些方法减少内存需求。还可以通过丢弃某些前缀并在需要时重新计算来在内存与计算之间进行权衡。</p><h4 id="从链到计算图">2.2 从链到计算图</h4><p>当原语可以接受多个输入时，我们可以自然地将链扩展为电路（circuits）——即基于原语操作的有向无环图（DAG），也称为计算图。电路会有若干个输入节点，表示函数的参数；也有若干个原语节点，每个节点都标记为某种原语操作。输入节点没有入边（即没有其他节点指向它们），并且每个节点恰好有一条出边，同时图中只有一个汇点（输出节点）。电路的整体功能是从输入节点到汇点的操作组合，每个操作的输出作为其他操作的输入。</p><p>对于链的自动微分之所以有效，是因为导数沿链可以分解，这得益于著名的链式法则。当我们从链转向有向无环图时，我们是否需要某种“图法则”来沿电路结构分解计算呢？电路引入了两个新特性：入度（fan-in）和出度（fan-out）。</p><ul><li><strong>入度（fan-in）</strong>：当一个原语操作接受多个参数时，会出现入度。在第1小节中，我们知道多个参数可以视为一个参数，因此链式法则适用。</li><li><strong>出度（fan-out）</strong>：出度在反向模式微分中需要稍微更多的关注。</li></ul><p><img src="/images/Fundamentals-Optimization/6.png"></p><p><strong>示例说明</strong></p><p>考虑上图的电路。操作<span class="math inline">\(a\)</span>在拓扑上位于<span class="math inline">\(b\)</span>和<span class="math inline">\(c\)</span>之前，并且有一条出边指向它们。我们可以将<span class="math inline">\(a\)</span>从<span class="math inline">\(\{b,c\}\)</span>中切割出来，生成两个新电路，如上图(b)所示。第一个电路对应于<span class="math inline">\(a\)</span>，第二个电路的计算为：</p><p><span class="math display">\[f_{\{b,c\}}(x_1, x_2) = c(x_1,b(x_2))\]</span></p><p>我们可以通过一个名为<span class="math inline">\(dup\)</span>的函数来恢复完整的函数<span class="math inline">\(f\)</span>：</p><p><span class="math display">\[dup(x) = (x, x) \equiv \begin{pmatrix} I\\ I \end{pmatrix} x\]</span></p><p>因此，函数<span class="math inline">\(f\)</span>可以写为链式组合：</p><p><span class="math display">\[f = f_{\{b,c\}} \circ dup \circa\]</span></p><p>电路<span class="math inline">\(f_{\{b,c\}}\)</span>不包含出度，其导数与<span class="math inline">\(b\)</span>、<span class="math inline">\(c\)</span>及其导数的关系，都是通过链式法则实现的。同时，根据链式法则：</p><p><span class="math display">\[\begin{align*} \partial f(x) &amp;=\partial f_{\{b,c\}}(dup(a(x))) \circ \partial dup(a(x)) \circ \partiala(x) \\&amp;= \partial f_{\{b,c\}}(a(x), a(x)) \circ \begin{pmatrix} I\\ I \end{pmatrix} \circ \partial a(x) \end{align*}\]</span></p><p>以上表达式表明，可以通过从右到左的评估来计算<span class="math inline">\(f\)</span>的 JVP。这类似于链情况中建议的 JVP计算，但中间有一个复制的操作<span class="math inline">\(\begin{pmatrix}I \\ I \end{pmatrix}\)</span>，即<span class="math inline">\(dup\)</span>的雅可比矩阵。</p><p><img src="/images/Fundamentals-Optimization/7.png"></p><p>对<span class="math inline">\(f\)</span>在<span class="math inline">\(x\)</span>处的导数进行转置：</p><p><span class="math display">\[\partial f(x)^T = \partial a(x)^T \circ(I \ \  I) \circ \partial f_{\{b,c\}}(a(x), a(x))^T\]</span></p><p>考虑从右到左的评估，这同样类似于链情况中建议的 VJP计算，但中间有一个求和操作<span class="math inline">\((I\ \I)\)</span>，即<span class="math inline">\(dup\)</span>的转置雅可比矩阵。</p><p><img src="/images/Fundamentals-Optimization/8.png"></p><h2 id="二-随机优化">二、 随机优化</h2><p>这节我们主要考虑形式为<span class="math inline">\(L(\theta) =\mathbb{E}_{q_\theta(z)} \left[ \tilde{L}(\theta, z)\right]\)</span>的随机目标优化，其中<span class="math inline">\(\theta\)</span>是我们要优化的参数，<span class="math inline">\(z\)</span>是随机变量，例如外部噪声，采样数据或者隐变量等。</p><h3 id="随机梯度下降-sgd">1. 随机梯度下降 (SGD)</h3><p>假设我们能够计算目标函数梯度的无偏估计<span class="math inline">\(g_t\)</span>​ ，即：</p><p><span class="math display">\[\mathbb{E}[g_t] = \nabla_\thetaL(\theta) |_{\theta_t}\]</span></p><p>则我们可以在梯度下降过程中使用它：</p><p><span class="math display">\[\theta_{t+1} = \theta_t - \eta_tg_t\]</span></p><p>其中<span class="math inline">\(\eta_t\)</span>是学习率或步长。这被称为<strong>随机梯度下降（SGD）</strong>。SGD收敛速度可能较慢，因为它依赖于梯度的随机估计。目前已经提出多种方法以减少每一步生成的参数估计的方差，从而加速收敛。</p><p>在使用 SGD时，我们需要选择学习率来更好地收敛。我们可以使用学习率调度，而不是选择单一的常数学习率，逐步调整步长。理论上，SGD收敛的充分条件是学习率调度满足 <strong>Robbins-Monro 条件</strong>：</p><p><span class="math display">\[\eta_t \to 0, \quad \sum_{t=1}^\infty\eta_t^2 &lt; \infty, \quad \sum_{t=1}^\infty \eta_t =\infty\]</span></p><p>一些常见的学习率调度示例如下：</p><ul><li><strong>分段常数</strong>：<span class="math inline">\(\eta_t =\eta_i \quad \text{if } t_i \leq t \leq t_{i+1}\)</span></li><li><strong>指数衰减</strong>：<span class="math inline">\(\eta_t =\eta_0 e^{-\lambda t}\)</span></li><li><strong>多项式衰减</strong>：<span class="math inline">\(\eta_t =\eta_0 (\beta t + 1)^{-\alpha}\)</span></li></ul><p><img src="/images/Fundamentals-Optimization/9.png"></p><p>在许多情况下，梯度的大小在各个维度之间可能差异很大，导致损失面在某些方向上陡峭而在其他方向上较为平坦，类似于一个山谷的底部。在这种情况下，可以用条件矩阵<span class="math inline">\(C_t\)</span>来缩放梯度向量，从而实现更快的收敛：</p><p><span class="math display">\[\theta_{t+1} = \theta_t - \eta_t C_tg_t\]</span></p><p>这被称为<strong>预条件 SGD</strong>。</p><h3 id="sgd-用于优化有限和目标">2. SGD 用于优化有限和目标</h3><p>在最简单的情况下，计算期望的分布<span class="math inline">\(q_\theta(z)\)</span>不依赖于正在优化的参数<span class="math inline">\(\theta\)</span>（即噪声或者数据与参数无关）。在这种情况下，我们可以将梯度推入期望算子内部，然后通过<strong>Monte Carlo 采样</strong>来近似梯度：</p><p><span class="math display">\[\begin{align*} \nabla_\theta L(\theta)&amp;= \nabla_\theta \mathbb{E}_{q(z)} \left[ \tilde{L}(\theta, z)\right] \\ &amp;= \mathbb{E}_{q(z)} \left[ \nabla_\theta\tilde{L}(\theta, z) \right] \\ &amp;\approx \frac{1}{S} \sum_{s=1}^{S}\nabla_\theta \tilde{L}(\theta, z_s) \end{align*}\]</span></p><p>其中<span class="math inline">\(S\)</span>是采样数量。例如，考虑经验风险最小化（ERM）的问题，要求最小化：</p><p><span class="math display">\[L(\theta) = \frac{1}{N} \sum_{n=1}^{N}\tilde{L}(\theta, z_n) = \frac{1}{N} \sum_{n=1}^{N} \ell(y_n, f(x_n;\theta))\]</span></p><p>其中<span class="math inline">\(z_n = (x_n, y_n)\)</span>是第<span class="math inline">\(n\)</span>个标记示例，<span class="math inline">\(f\)</span>是预测函数。这种目标称为有限和目标。我们可以将其写为关于经验分布<span class="math inline">\(p_D(x, y)\)</span>的期望损失：</p><p><span class="math display">\[L(\theta) = \mathbb{E}_{p_D(z)} \left[\tilde{L}(\theta, z) \right]\]</span></p><p>由于期望依赖于数据，而不是参数，我们可以通过在每次迭代中使用来自完整数据集<span class="math inline">\(D\)</span>的<span class="math inline">\(B =|B|\)</span>个数据点的小批量来近似梯度：</p><p><span class="math display">\[g_t = \nabla L(\theta_t) = \frac{1}{B}\sum_{n \in B} \nabla \ell(y_n, f(x_n; \theta))\]</span></p><p>这些带噪声的梯度可以传递给SGD。当数据集很大时，这种方法比全批梯度下降快得多，因为它不需要在更新模型之前评估所有示例的损失。</p><h3 id="sgd-用于优化分布的参数">3. SGD 用于优化分布的参数</h3><p>现在假设随机性依赖于我们正在优化的参数。例如，在强化学习中，<span class="math inline">\(z\)</span>可能是从随机策略<span class="math inline">\(q_\theta\)</span>​中采样的动作，或者在随机变分推理中，<span class="math inline">\(z\)</span>可能是从推理网络<span class="math inline">\(q_\theta\)</span>​ 中采样的潜变量。</p><p>在这种情况下，梯度为：</p><p><span class="math display">\[\begin{align*} \nabla_\theta\mathbb{E}_{q_\theta(z)}\left[\tilde{L}(\theta, z)\right] &amp;=\nabla_\theta \int \tilde{L}(\theta, z) q_\theta(z) \, dz \\ &amp;= \int\nabla_\theta \tilde{L}(\theta, z) q_\theta(z) \, dz \\ &amp;= \int\left[\nabla_\theta \tilde{L}(\theta, z)\right] q_\theta(z) \, dz + \int\tilde{L}(\theta, z) \left[\nabla_\theta q_\theta(z)\right] \, dz\end{align*}\]</span></p><p>第一个项可以通过 <strong>Monte Carlo 采样</strong>近似：</p><p><span class="math display">\[\int \left[ \nabla_\theta\tilde{L}(\theta, z) \right] q_\theta(z) dz \approx \frac{1}{S}\sum_{s=1}^{S} \nabla_\theta \tilde{L}(\theta, z_s)\]</span></p><p>其中<span class="math inline">\(z_s \sim q_\theta\)</span>​。</p><p>现在考虑第二项，注意，如果<span class="math inline">\(\tilde{L}\)</span>与<span class="math inline">\(\theta\)</span>无关，则此项消失，但如果相关，则该项涉及分布本身的梯度：</p><p><span class="math display">\[I \equiv \int \tilde{L}(\theta, z)[\nabla_\theta q_\theta(z)] dz\]</span></p><p>我们不能再使用简单的 Monte Carlo采样来近似这个积分。然而，还有其他各种方法可以近似这个积分。将在后面简要描述两种主要方法。</p><h3 id="分数函数估计器reinforce">4 分数函数估计器（REINFORCE）</h3><p>分数函数是对数概率分布的梯度，其表达式为：<br><span class="math display">\[\nabla_\theta  q_\theta(z) = q_\theta(z)\nabla_\theta \log q_\theta(z)\]</span></p><p>利用上述分数函数定义，可以将积分式的目标函数梯度表达式重新写为：<br><span class="math display">\[\begin{align*} I &amp;= \int\tilde{L}(\theta, z) [q_\theta(z) \nabla_\theta \log q_\theta(z)] \, dz\\ &amp;= \mathbb{E}_{q_\theta(z)}\left[\tilde{L}(\theta, z)\nabla_\theta \log q_\theta(z)\right]  \end{align*}\]</span></p><p>这里，<span class="math inline">\(I\)</span>表示我们要计算的梯度期望。</p><p>通过蒙特卡洛方法，可以对上述积分进行近似：<br><span class="math display">\[I \approx \frac{1}{S} \sum_{s=1}^{S}\tilde{L}(\theta, z_s) \nabla_\theta \log q_\theta(z_s)\]</span></p><p>其中<span class="math inline">\(z_s \sim q_\theta\)</span>​。</p><p>为了降低分数函数估计的方差，可以使用<strong>控制变量</strong>的方法，将<span class="math inline">\(\tilde{L}(\theta, z)\)</span>替换为：<br><span class="math display">\[\hat{\tilde{L}}(\theta, z) =\tilde{L}(\theta, z) - c \left(b(\theta, z) - \mathbb{E}[b(\theta,z)]\right)\]</span></p><p>这里，<span class="math inline">\(b(\theta, z)\)</span>是与<span class="math inline">\(\tilde{L}(\theta, z)\)</span>相关的基线函数，<span class="math inline">\(c &gt; 0\)</span>是一个系数。使用此新的估计<span class="math inline">\(\hat{\tilde{L}}\)</span>计算的梯度估计仍然是无偏的，但具有较低的方差。</p><p>当<span class="math inline">\(q_\theta(z)\)</span>是离散分布时，目标函数为：<br><span class="math display">\[L(\theta) = \sum_{z} \tilde{L}(\theta, z)q_\theta(z)\]</span></p><p>梯度计算为：<br><span class="math display">\[\nabla_\theta L(\theta) = \sum_{z}\tilde{L}(\theta, z) \nabla_\theta q_\theta(z)\]</span></p><p>如果<span class="math inline">\(z\)</span>可以取指数级多的值，直接计算可能不可行。可以将和分为两部分：一部分<span class="math inline">\(S_1\)</span>​ 是高概率值的小集合，另一部分<span class="math inline">\(S_2\)</span>​是所有其他值的大集合。梯度的计算可以表达为：<br><span class="math display">\[\nabla_\theta L(\theta) = \sum_{z \in S_1}\tilde{L}(\theta, z) \nabla_\theta q_\theta(z) +\mathbb{E}_{q_\theta(z|z \in S_2)}\left[\tilde{L}(\theta, z)\nabla_\theta \log q_\theta(z)\right]\]</span></p><p>对于第二项的计算，可以使用拒绝采样的方法，用来自<span class="math inline">\(q_\theta(z)\)</span>的样本进行近似。这种方法就是<strong>拉奥-布莱克威尔化(Rao-Blackwellization)</strong>，能够有效减少方差。</p><h3 id="重参数化技巧">5. 重参数化技巧</h3><p><strong>重参数化技巧</strong>用于降低得分函数估计器的方差，前提是<span class="math inline">\(\tilde{L}(\theta, z)\)</span>对<span class="math inline">\(z\)</span>可微，并且可以通过先从一个与<span class="math inline">\(\theta\)</span>无关的噪声分布<span class="math inline">\(q_0\)</span>中采样<span class="math inline">\(\epsilon\)</span>，然后通过确定性和可微的函数<span class="math inline">\(z = g(\theta, \epsilon)\)</span>转换得到<span class="math inline">\(z\)</span>。<br>例如，可以从标准正态分布中采样：<br><span class="math display">\[z = g(\theta, \epsilon) = \mu + \sigma\epsilon\]</span></p><p>其中<span class="math inline">\(\theta = (\mu, \sigma)\)</span>。</p><p>我们可以将目标函数重写为：<br><span class="math display">\[L(\theta) =\mathbb{E}_{q_\theta(z)}\left[\tilde{L}(\theta, z)\right] =\mathbb{E}_{q_0(\epsilon)}\left[\tilde{L}(\theta, g(\theta,\epsilon))\right]\]</span></p><p>由于<span class="math inline">\(q_0(\epsilon)\)</span>与<span class="math inline">\(\theta\)</span>无关，可以将梯度算子推入期望中，从而获得：<br><span class="math display">\[\nabla_\theta L(\theta) =\mathbb{E}_{q_0(\epsilon)}\left[\nabla_\theta \tilde{L}(\theta,g(\theta, \epsilon))\right]\]</span></p><p>通过蒙特卡洛方法进行近似：<br><span class="math display">\[\nabla_\theta L(\theta) \approx \frac{1}{S}\sum_{s=1}^{S} \nabla_\theta \tilde{L}(\theta, g(\theta,\epsilon_s))\]</span></p><p><img src="/images/Fundamentals-Optimization/10.png"></p><p>当<span class="math inline">\(\tilde{L}\)</span>依赖于<span class="math inline">\(\theta\)</span>和噪声样本<span class="math inline">\(z\)</span>时，需要使用总导数计算梯度。对于形式为<span class="math inline">\(\tilde{L}(\theta_1, \ldots, \theta_d, z_1(\theta),\ldots, z_d(\theta))\)</span>的函数，其对<span class="math inline">\(\theta_i\)</span>的总导数为：<br><span class="math display">\[\frac{\partial \tilde{L}}{\partial\theta_i}\bigg|_{TD} = \frac{\partial \tilde{L}}{\partial \theta_i} +\sum_j \frac{\partial \tilde{L}}{\partial z_j} \frac{\partialz_j}{\partial \theta_i}\]</span></p><p>进而得到：<br><span class="math display">\[\nabla_\theta \tilde{L}(\theta,z)\bigg|_{TD} = \nabla_z \tilde{L}(\theta, z) J + \nabla_\theta\tilde{L}(\theta, z)\]</span></p><p>其中，<span class="math inline">\(J\)</span>为噪声变换的雅可比矩阵：<span class="math inline">\(J = \frac{\partial z}{\partial\theta}\)</span>，这也是一种计算方法。</p><p>特别的，在变分推断中，ELBO（证据下界）目标形式为：<br><span class="math display">\[\tilde{L}(\theta, z) = \log p(z, x) - \logq(z|\theta)\]</span></p><p>梯度为：<br><span class="math display">\[\nabla_\theta \tilde{L}(\theta, z) =\nabla_z \left[\log p(z, x) - \log q(z|\theta)\right] J - \nabla_\theta\log q(z|\theta)\]</span></p><p>这里第一项是通过生成样本<span class="math inline">\(z\)</span>对目标的间接影响，第二项是<span class="math inline">\(\theta\)</span>对目标的直接影响。第二项在期望上为零，但在有限样本中可能非零。为了减少方差，可以使用“断开”的<span class="math inline">\(\theta&#39;\)</span>替代<span class="math inline">\(\theta\)</span>来计算：<br><span class="math display">\[g = \nabla_\theta \left[\log p(z, x) - \logq(z|\theta&#39;)\right]\]</span></p><p>其它项如下：<br><span class="math display">\[\epsilon \sim q_0(\epsilon) \\ z =g(\epsilon, \theta) \\θ′=stop-gradient(θ)\]</span></p><p>这被叫做<strong>sticking the landing or STLestimator</strong>。需要指出的，这不一定比不忽略第二项的效果更好，实际中可以使用这两者的加权平均。</p><h3 id="gumbel-softmax技巧">6. Gumbel Softmax技巧</h3><p>在处理离散变量时，传统的重参数化技巧不可用。但是，我们可以将离散变量放松为连续变量，从而实现类似的效果。</p><p>考虑一个包含<span class="math inline">\(K\)</span>位的 one-hot向量<span class="math inline">\(d\)</span>，其中<span class="math inline">\(d_k \in \{0, 1\}\)</span>且<span class="math inline">\(\sum_{k=1}^{K} d_k =1\)</span>。这可以用于表示一个<span class="math inline">\(K\)</span>-元的分类变量。设<span class="math inline">\(P(d) = \text{Cat}(d|\pi)\)</span>，其中<span class="math inline">\(\pi_k = P(d_k = 1)\)</span>，满足<span class="math inline">\(0 \leq \pi_k \leq1\)</span>。我们也可以将分布参数化为<span class="math inline">\((\alpha_1, \ldots, \alpha_K)\)</span>，其中<span class="math inline">\(\pi_k = \frac{\alpha_k}{\sum_{k&#39; = 1}^{K}\alpha_{k&#39;}}\)</span>​​。我们记作<span class="math inline">\(d \sim\text{Cat}(d|\alpha)\)</span>。</p><p>我们可以通过以下公式从该分布计算 one-hot 向量<span class="math inline">\(d\)</span>：<br><span class="math display">\[d =\text{onehot}\left(\arg\max_k\left[\epsilon_k + \log\alpha_k\right]\right)\]</span></p><p>其中<span class="math inline">\(\epsilon_k \sim \text{Gumbel}(0,1)\)</span>，从 Gumbel 分布中采样。可以通过先采样<span class="math inline">\(u_k \sim \text{Uniform}(0,1)\)</span>，然后计算<span class="math inline">\(\epsilon_k =-\log(-\log(u_k))\)</span>来得到。<strong>Gumbel-Max Trick</strong>提供了分类分布的重参数化表示。遗憾的是，<span class="math inline">\(argmax\)</span>的导数在边界处未定义，这使得梯度计算变得复杂。</p><p>为了克服这个问题，我们可以将<span class="math inline">\(argmax\)</span>替换为<span class="math inline">\(softmax\)</span>，并将离散的 one-hot 向量<span class="math inline">\(d\)</span>替换为连续放松<span class="math inline">\(x \in \Delta^{K-1}\)</span>，其中<br><span class="math display">\[\Delta^{K-1} = \{ x \in \mathbb{R}^K : x_k\in [0, 1], \sum_{k=1}^{K} x_k = 1 \}\]</span></p><p>这样我们可以写出：<br><span class="math display">\[x_k = \frac{\exp\left(\frac{\log \alpha_k +\epsilon_k}{\tau}\right)}{\sum_{k&#39; = 1}^{K} \exp\left(\frac{\log\alpha_{k&#39;} + \epsilon_{k&#39;}}{\tau}\right)}\]</span></p><p>其中<span class="math inline">\(\tau &gt;0\)</span>是温度参数。随着<span class="math inline">\(\tau \to0\)</span>，这个分布平滑地接近离散分布。通过将<span class="math inline">\(f(d)\)</span>替换为<span class="math inline">\(f(x)\)</span>，我们可以对<span class="math inline">\(x\)</span>进行重参数化梯度计算。这允许我们在进行优化时有效地处理离散变量。</p><p><img src="/images/Fundamentals-Optimization/11.png"></p><h3 id="直通估计器-straight-through-estimator">7. 直通估计器(Straight-Through Estimator)</h3><p>直通估计器主要用于近似量化信号的梯度。考虑一个阈值函数：<br><span class="math display">\[f(x) = \begin{cases} 1 &amp; \text{if } x&gt; 0 \\ 0 &amp; \text{if } x \leq 0 \end{cases}\]</span></p><p>这个函数没有定义良好的梯度，因为它是一个分段常数函数。</p><p>直通估计器的基本思想是，在反向传播过程中将<span class="math inline">\(g(x) = f&#39;(x)\)</span>的计算替换为<span class="math inline">\(g(x) =x\)</span>。这样做的好处是可以在没有梯度的情况下为网络的训练提供一个近似值。在实际应用中，我们有时会用硬双曲正切函数替代<span class="math inline">\(g(x) = x\)</span>，其定义为：<br><span class="math display">\[\text{HardTanh}(x) = \begin{cases} x &amp;\text{if } -1 \leq x \leq 1 \\ 1 &amp; \text{if } x &gt; 1 \\ -1 &amp;\text{if } x &lt; -1 \end{cases}\]</span></p><p>这种替代确保了反向传播的梯度不会变得过大，有助于稳定训练过程。</p><h2 id="三自然梯度下降">三、自然梯度下降</h2><p><strong>自然梯度下降（Natural GradientDescent，NGD）</strong>是一种优化方法，主要用于优化条件概率分布<span class="math inline">\(p_\theta(y|x)\)</span>的参数。与常规的梯度下降方法不同，NGD通过测量引发的分布之间的距离来计算参数更新，而不是直接使用参数值的距离。这种方法特别适用于处理参数间相互作用较强的情况，比如在高维空间中的概率分布。</p><p>以两个高斯分布为例，<span class="math inline">\(p_\theta = p(y|\mu,\sigma)\)</span>和<span class="math inline">\(p_{\theta&#39;} =p(y|\mu&#39;,\sigma&#39;)\)</span>。如果直接计算参数向量之间的欧几里得距离：<br><span class="math display">\[||\theta - \theta&#39; ||^2 = (\mu -\mu&#39;)^2 + (\sigma - \sigma&#39;)^2\]</span></p><p>并不能反映出分布的真实变化。实际上，预测分布的形式为：<br><span class="math display">\[\exp\left(-\frac{1}{2\sigma^2}(y -\mu)^2\right)\]</span></p><p>这意味着，均值<span class="math inline">\(\mu\)</span>对于不同的方差<span class="math inline">\(\sigma\)</span>的影响大小会有区别。下图 (a-b)说明了当方差较小和较大时，均值变化对分布的影响是不同的。明显方差小的时候均值的影响会更大</p><p><img src="/images/Fundamentals-Optimization/12.png"></p><h3 id="自然梯度的定义">1. 自然梯度的定义</h3><p>NGD 的关键在于用 KL散度来度量两个概率分布之间的距离。根据之前的推导，我们有：<br><span class="math display">\[D_{KL}(p_\theta(y|x) \parallelp_{\theta+\delta}(y|x)) \approx \frac{1}{2} \delta^T F_x\delta\]</span></p><p>其中<span class="math inline">\(F_x\)</span>​ 是 <strong>Fisher信息矩阵 (FIM)</strong>，定义为：<br><span class="math display">\[F_x(\theta) =-\mathbb{E}_{p_\theta(y|x)}\left[\nabla^2 \log p_\theta(y|x)\right] =\mathbb{E}_{p_\theta(y|x)}\left[(\nabla \log p_\theta(y|x))(\nabla \logp_\theta(y|x))^T\right]\]</span></p><p>我们可以使用平均 FIM 来计算当前和更新分布之间的平均 KL 散度：<br><span class="math display">\[F(\theta) =\mathbb{E}_{p_D(x)}\left[F_x(\theta)\right]\]</span></p><p>自然梯度下降通过使用 FIM 的逆作为预条件矩阵来进行参数更新：<br><span class="math display">\[\theta_{t+1} = \theta_t - \eta_tF(\theta_t)^{-1} g_t\]</span></p><p>其中<span class="math inline">\(g_t\)</span>​ 是常规梯度。</p><p>因此，定义自然梯度为：<br><span class="math display">\[F^{-1} g_t = F^{-1} \nabla L(\theta_t)\equiv \tilde{\nabla} L(\theta_t)\]</span></p><h3 id="自然梯度下降的解释">2. 自然梯度下降的解释</h3><p>标准的梯度下降可以被理解为在目标函数的线性近似下进行优化，同时对参数变化的<span class="math inline">\(\ell_2\)</span>​ 范数施加惩罚。如果设定<span class="math inline">\(\theta_{t+1} = \theta_t +\delta\)</span>，我们优化的目标为：<br><span class="math display">\[M_t(\delta) = L(\theta_t) + g_t^T \delta +\eta \frac{||\delta||^2}{2}\]</span></p><p>其中<span class="math inline">\(g_t\)</span>​ 是在点<span class="math inline">\(\theta_t\)</span>处的梯度，<span class="math inline">\(\eta\)</span>是步长。</p><p><img src="/images/Fundamentals-Optimization/13.png"></p><p>现在我们用基于 Fisher 信息矩阵 (FIM) 的距离替换平方距离，即：<br><span class="math display">\[||\delta||^2_F = \delta^T F\delta\]</span></p><p>这在<strong>whitened coordinatesystem</strong>中是等价的，即使用<span class="math inline">\(\phi =F^{1/2} \theta\)</span>进行变换。我们可以得到：<br><span class="math display">\[||\phi_{t+1} - \phi_t||^2 = ||F^{1/2}(\theta_t + \delta) - F^{1/2} \theta_t||^2 = ||F^{1/2} \delta||^2 =||\delta||^2_F\]</span></p><p>则新的优化目标变为：<br><span class="math display">\[M_t(\delta) = L(\theta_t) + g_t^T \delta +\eta \delta^T F \delta\]</span></p><p>通过求解<span class="math inline">\(\nabla_\delta M_t(\delta) =0\)</span>，我们可以得到更新公式：<br><span class="math display">\[\delta_t = -\eta F^{-1} g_t\]</span></p><p>这与自然梯度的方向一致。因此，我们可以将 NGD 视为一种<strong>trustregion method</strong>，其中使用了目标函数的一阶近似，并在约束中使用 FIM距离。</p><p>在上述推导中，我们假设 F 是常数矩阵。在大多数问题中，FIM会在空间中的每个点上变化，这意味着我们是在一个黎曼流形的曲面上进行优化。对于某些模型，尽管我们还是使用目标函数的一阶近似，我们仍然可以高效地计算FIM，捕捉曲率信息。</p><p>如果<span class="math inline">\(p(y|x,\theta)\)</span>是一个指数族分布，其自然参数由<span class="math inline">\(\eta = f(x, \theta)\)</span>计算，那么可以证明 NGD实际上与<strong>广义高斯-牛顿（GGN）方法</strong>是相同的 。这意味着 NGD在某些情况下可以看作是高斯-牛顿优化方法的应用。</p><h3 id="自然梯度下降-ngd-的优点">3. 自然梯度下降 (NGD) 的优点</h3><p>使用 FIM 作为预处理矩阵的一个主要优点是 FIM总是正定的，而海森矩阵（Hessian）在鞍点处可能具有负特征值。这在高维空间中很常见，可能导致优化过程的不稳定。</p><p>同时FIM可以通过小批量数据简单地在线近似，因为它是关于梯度向量外积的期望：<br><span class="math display">\[F_x(\theta) = \mathbb{E}_{p_\theta(y|x)}\left[ (\nabla \log p_\theta(y|x))(\nabla \log p_\theta(y|x))^T\right]\]</span></p><p>与之相比，研究显示，基于海森矩阵的方法对小批量数据引入的噪声非常敏感。</p><p>NGD更新参数的方式侧重于对预测最重要的部分，这使得在不确定区域中可以采取更大的步骤，从而帮助避免陷入平坦区域或鞍点。</p><p>以一个二维高斯为例子：</p><p><img src="/images/Fundamentals-Optimization/14.png"></p><p>在梯度下降过程中，NGD能够更快地收敛到全局最优解，相较于普通的梯度下降方法，NGD在参数空间中的运动更加直接和高效。同时 NGD对概率分布的参数化方式不敏感，因此即使在复杂的概率模型中（例如深度神经网络），也能保持同样的收敛效果。</p><p>一个具体的对比如下：</p><p><img src="/images/Fundamentals-Optimization/15.png"></p><h3 id="近似自然梯度">4. 近似自然梯度</h3><p>NGD 的主要缺点是计算 FIM（及其逆）的计算成本较高。为了加速计算，一些方法对 FIM的形式做出假设，以便高效地反转。例如：</p><p>有学者提出了 <strong>KFAC 方法（Kronecker Factored ApproximateCurvature）</strong>，该方法将深度神经网络的 FIM近似为一个块对角矩阵，每个块是两个小矩阵的 Kronecker积。这种方法在监督学习和强化学习中表现良好，并且已被证明在过参数化情况下能够收敛到DNN 的全局最优解。</p><p>另一种简化方法是使用经验分布来近似 FIM。具体定义如下：<br><span class="math display">\[\begin{align*} F &amp;=\mathbb{E}_{p_\theta(x,y)} \left[ \nabla \log p(y|x, \theta) \nabla \logp(y|x, \theta)^T \right] \\ &amp;\approx \mathbb{E}_{p_D(x,y)} \left[\nabla \log p(y|x, \theta) \nabla \log p(y|x, \theta)^T \right] \\&amp;= \frac{1}{|D|} \sum_{(x,y) \in D} \nabla \log p(y|x, \theta)\nabla \log p(y|x, \theta)^T \end{align*}\]</span></p><p>这种近似方法易于计算，但在平坦区域，经验 Fisher可能变得奇异，从而导致算法陷入停滞。</p><p>另一种策略是精确计算F，但使用<strong>截断共轭梯度（CG）方法</strong>近似计算<span class="math inline">\(F^{-1}g\)</span>，其中每一步 CG使用高效的海森-向量乘法方法。但这种方法可能较慢，因为进行单次参数更新需要许多CG 迭代。</p><h3 id="自然梯度对于指数族的应用">5. 自然梯度对于指数族的应用</h3><p>假设损失函数<span class="math inline">\(L\)</span>具有以下形式的期望损失：</p><p><span class="math display">\[L(\mu) =\mathbb{E}_{q_\mu(z)}\left[\tilde{L}(z)\right]\]</span></p><p>其中<span class="math inline">\(q_\mu(z)\)</span>是具有矩参数<span class="math inline">\(\mu\)</span>的指数族分布。</p><p>事实证明，相对于矩参数的梯度与自然参数<span class="math inline">\(\lambda\)</span>的自然梯度是相同的。这是通过链式法则得出的：</p><p><span class="math display">\[\frac{d}{d\lambda} L(\lambda) =\frac{d\mu}{d\lambda} \frac{d}{d\mu} L(\mu) = F(\lambda) \nabla_\muL(\mu)\]</span></p><p>其中<span class="math inline">\(L(\mu) =L(\lambda(\mu))\)</span>，并且：</p><p><span class="math display">\[F(\lambda) = \nabla_\lambda \mu(\lambda)= \nabla^2_\lambda A(\lambda)\]</span></p><p>因此，</p><p><span class="math display">\[\tilde{\nabla}_{\lambda} L(\lambda) =F(\lambda)^{-1} \nabla_\lambda L(\lambda) = \nabla_\muL(\mu)\]</span></p><p>接下来需要计算相对于矩参数的标注梯度。具体如何进行计算将取决于<span class="math inline">\(q\)</span>的形式以及<span class="math inline">\(L(\lambda)\)</span>的形式。</p><h4 id="高斯情况下的解析计算">5.1 高斯情况下的解析计算</h4><p>假设分布<span class="math inline">\(q(z) = \mathcal{N}(z|m,V)\)</span>，我们推导如何计算与矩参数（momentparameters）相关的自然梯度。</p><p>根据Probability中对高斯分布的介绍，我们有</p><ul><li>自然参数：<span class="math inline">\(\lambda^{(1)} = V^{-1}m, \quad\lambda^{(2)} = -\frac{1}{2} V^{-1}\)</span></li><li>矩参数：<span class="math inline">\(\mu^{(1)} = m, \quad \mu^{(2)} =V + mm^T\)</span></li></ul><p>通过链式法则计算梯度：</p><p>对于矩参数的梯度，我们有：</p><p><span class="math display">\[\begin{align*} &amp;\frac{\partialL}{\partial \mu^{(1)}} = \frac{\partial L}{\partial m} \frac{\partialm}{\partial \mu^{(1)}} + \frac{\partial L}{\partial v} \frac{\partialv}{\partial \mu^{(1)}}  = \frac{\partial L}{\partial m} - 2\frac{\partial L}{\partial v} m \\  &amp;\frac{\partial L}{\partial\mu^{(2)}} = \frac{\partial L}{\partial m} \frac{\partial m}{\partial\mu^{(2)}} + \frac{\partial L}{\partial v} \frac{\partial v}{\partial\mu^{(2)}} = \frac{\partial L}{\partial v} \end{align*}\]</span></p><p>通过 Bonnet 定理和 Price 定理，我们可以得到： <span class="math display">\[\frac{\partial}{\partial m_i} \mathbb{E}\left[\tilde{L}(z) \right] = \mathbb{E}\left[ \frac{\partial}{\partial\theta_i} \tilde{L}(z) \right] \\\frac{\partial}{\partial V_{ij}}\mathbb{E}\left[ \tilde{L}(z) \right] = c_{ij} \mathbb{E}\left[\frac{\partial^2}{\partial \theta_i \partial \theta_j} \tilde{L}(z)\right]\]</span></p><p>多变量情况下的结果：<br><span class="math display">\[\begin{align*} \nabla_{\mu^{(1)}} E_q(z)\left[ \tilde{L}(z) \right] &amp;= \nabla_m E_q(z) \left[ \tilde{L}(z)\right] - 2 \nabla_V E_q(z) \left[ \tilde{L}(z) \right] m \\  &amp;=E_q(z) \left[ \nabla_z \tilde{L}(z) \right] - E_q(z) \left[ \nabla^2_z\tilde{L}(z) \right] m \\  \nabla_{\mu^{(2)}} E_q(z) \left[ \tilde{L}(z)\right] &amp;= \nabla_V E_q(z) \left[ \tilde{L}(z) \right] \\  &amp;=\frac{1}{2} E_q(z) \left[ \nabla^2_z \tilde{L}(z) \right]\end{align*}\]</span></p><h4 id="一般情况下的随机近似">5.2 一般情况下的随机近似</h4><p>在一般情况下，解析计算自然梯度可能很困难。可以使用<strong>蒙特卡洛近似</strong>。</p><p>期望损失的定义：<br><span class="math display">\[L(\mu) =\mathbb{E}_{q_\mu(z)}[\tilde{L}(z)]\]</span></p><p>自然梯度的表达：<br><span class="math display">\[\nabla_\mu L(\mu) = F(\lambda)^{-1}\nabla_\lambda L(\lambda)\]</span></p><p>期望的近似：<br><span class="math display">\[\begin{align*} F(\lambda) &amp;=\nabla_\lambda \mu(\lambda) = \nabla_\lambda E_{q_\lambda}(z) \left[T(z) \right] \\  \nabla_\lambda L(\lambda) &amp;= \nabla_\lambdaE_{q_\lambda}(z) \left[ \tilde{L}(z) \right] \end{align*}\]</span></p><p>如果<span class="math inline">\(q\)</span>是可重参数化的，可以使用重参数化技巧将梯度推入期望算子内，从而对样本<span class="math inline">\(z\)</span>进行采样并计算梯度。</p><h4 id="熵的自然梯度">5.3 熵的自然梯度</h4><p>自然梯度<span class="math inline">\(\tilde{\nabla}_{\lambda}H(\lambda)\)</span>表示指数族分布的熵<span class="math inline">\(H(\lambda)\)</span>相对于自然参数<span class="math inline">\(\lambda\)</span>的梯度，其公式为：</p><p><span class="math display">\[\tilde{\nabla}_{\lambda} H(\lambda) =-\nabla_\mu \mathbb{E}_{q_\mu(z)}[\log q(z)]\]</span></p><p>我们可以将<span class="math inline">\(q(z)\)</span>的对数表示为：</p><p><span class="math display">\[\log q(z) = \log h(z) + T(z)^T \lambda -A(\lambda)\]</span></p><p>期望的梯度</p><p>由于<span class="math inline">\(E[T(z)] =\mu\)</span>，我们可以对<span class="math inline">\(\logq(z)\)</span>求<span class="math inline">\(\mu\)</span>的梯度：</p><p><span class="math display">\[\nabla_\mu E_{q_\mu(z)}[\log q(z)] =\nabla_\mu E_{q(z)}[\log h(z)] + \nabla_\mu \mu^T \lambda(\mu) -\nabla_\mu A(\lambda)\]</span></p><p>因为<span class="math inline">\(\lambda\)</span>是<span class="math inline">\(\mu\)</span>的函数，我们有：</p><p><span class="math display">\[\nabla_\mu \mu^T \lambda = \lambda +(\nabla_\mu \lambda)^T \mu = \lambda + (F^{-1}_\lambda \nabla_\lambda\lambda)^T \mu = \lambda + F^{-1}_\lambda \mu\]</span></p><p>这里<span class="math inline">\(F(\lambda)\)</span>是Fisher信息矩阵。由<span class="math inline">\(\mu = \nabla_\lambda A(\lambda)\)</span>可得：</p><p><span class="math display">\[\nabla_\mu A(\lambda) = F^{-1}_\lambda\nabla_\lambda A(\lambda) = F^{-1}_\lambda \mu\]</span></p><p>将以上结果代入，我们得到：</p><p><span class="math display">\[-\nabla_\mu \mathbb{E}_{q_\mu(z)}[\logq(z)] = -\nabla_\mu \mathbb{E}_q[\log h(z)] - \lambda\]</span></p><p>如果我们假设<span class="math inline">\(h(z)\)</span>是常数（这种情况在许多实际应用中成立），则得到：</p><p><span class="math display">\[\tilde{\nabla}_{\lambda} H(\lambda) =-\lambda\]</span></p><h2 id="四边界优化mm算法">四、边界优化（MM）算法</h2><p><strong>边界优化（Bound optimization）</strong>或者称为<strong>MM（Majorize-Minimize）算法</strong>该方法主要通过构造一个次级函数<span class="math inline">\(Q(\theta,\theta^t)\)</span>，使其成为目标函数<span class="math inline">\(\ell(\theta)\)</span>的下界，来最大化目标函数<span class="math inline">\(\ell(\theta)\)</span>。这种方法在许多应用中都非常有效，例如期望最大化（EM）算法和一些聚类算法。</p><h3 id="一般算法">1. 一般算法</h3><p>我们的目标是最大化某个函数<span class="math inline">\(\ell(\theta)\)</span>，MM算法的基本思路是构造一个代理函数<span class="math inline">\(Q(\theta, \theta^t)\)</span>，使其满足以下条件</p><p><em><span class="math inline">\(Q(\theta, \theta^t) \leq\ell(\theta)\)</span> </em><span class="math inline">\(Q(\theta^t,\theta^t) = \ell(\theta^t)\)</span></p><p>如果满足这些条件，我们称<span class="math inline">\(Q\)</span>小于等于<span class="math inline">\(\ell\)</span>。然后在每一步进行如下更新：</p><p><span class="math display">\[\theta^{t+1} = \arg\max_\theta Q(\theta,\theta^t)\]</span></p><p>这一过程保证了原始目标函数的单调增加：</p><p><span class="math display">\[\ell(\theta^{t+1}) \geq Q(\theta^{t+1},\theta^t) \geq Q(\theta^t, \theta^t) = \ell(\theta^t)\]</span></p><p>这保证了每一步都会提升目标函数的值。</p><p><img src="/images/Fundamentals-Optimization/16.png"></p><h3 id="示例逻辑回归">2 示例：逻辑回归</h3><p>在逻辑回归中，如果我们希望最大化的函数<span class="math inline">\(\ell(\theta)\)</span>是一个凹函数，可以通过对其海森矩阵（Hessian）进行界定来构造有效的下界。即寻找一个负定矩阵<span class="math inline">\(B\)</span>使得<span class="math inline">\(H(\theta) \succ B\)</span></p><p>通过泰勒展开，可以证明：</p><p><span class="math display">\[\ell(\theta) \geq \ell(\theta^t) +(\theta - \theta^t)^T g(\theta^t) + \frac{1}{2} (\theta - \theta^t)^T B(\theta - \theta^t)\]</span></p><p>其中<span class="math inline">\(g(\theta^t) = \nabla\ell(\theta^t)\)</span>。</p><p>因此，可以构造以下有效的下界（这里的等于是泰勒展开前两项意义下的相等）：</p><p><span class="math display">\[Q(\theta, \theta^t) = \theta^T(g(\theta^t) - B\theta^t) + \frac{1}{2} \theta^T B \theta\]</span></p><p>对应的更新规则变为：</p><p><span class="math display">\[\theta^{t+1} = \theta^t - B^{-1}g(\theta^t)\]</span></p><p>这类似于牛顿法的更新，但使用的是固定的矩阵<span class="math inline">\(B\)</span>，而不是每次迭代时变化的海森矩阵<span class="math inline">\(H(\theta^t)\)</span>。</p><h4 id="应用示例多类逻辑回归">2.1 应用示例：多类逻辑回归</h4><p>以多类逻辑回归为例，假设<span class="math inline">\(p(y_n = c | x_n,w)\)</span>表示样本<span class="math inline">\(n\)</span>属于类<span class="math inline">\(c\)</span>的概率，公式为：</p><p><span class="math display">\[p(y_n = c|x_n, w) = \frac{e^{w_c^Tx_n}}{\sum_{i=1}^C e^{w_i^T x_n}}\]</span></p><p>由于归一化条件，我们可以只学习<span class="math inline">\(C-1\)</span>个<span class="math inline">\(w_i\)</span>。参数<span class="math inline">\(\theta\)</span>对应权重矩阵<span class="math inline">\(w\)</span>。</p><p>逻辑回归的对数似然可以表示为：</p><p><span class="math display">\[\ell(w) = \sum_{n=1}^N \left(\sum_{c=1}^{C-1} y_{nc} w_c^T x_n - \log \sum_{c=1}^C e^{w_c^T x_n}\right)\]</span></p><p>其梯度和海森矩阵分别为：</p><p><span class="math display">\[g(w) = \sum_{n=1}^N (y_n - p_n(w))\otimes x_n  \\ H(w) = -\sum_{n=1}^N \left( \text{diag}(p_n(w)) - p_n(w)p_n(w)^T \right) \otimes (x_n x_n^T)\]</span></p><p>通过构造海森矩阵的下界，可以得到：</p><p><span class="math display">\[H(w) \succ -\frac{1}{2} \left( I -\frac{1}{C} \mathbf{1} \mathbf{1}^T \right) \otimes \left( \sum_{n=1}^Nx_n x_n^T \right) \equiv B\]</span></p><p>这里的<span class="math inline">\(I\)</span>是一个<span class="math inline">\((C−1)\)</span>维的单位矩阵，而<span class="math inline">\(1\)</span>是一个全为 1 的<span class="math inline">\((C -1)\)</span>维向量。在二分类的情况下，这可以变为：</p><p><span class="math display">\[H(w) \succ -\frac{1}{2} \left(1 -\frac{1}{2}\right) \left(\sum_{n=1}^N x_n^T x_n\right) = -\frac{1}{4}X^T X\]</span></p><p>这是因为<span class="math inline">\(p_n \leq0.5\)</span>，所以有<span class="math inline">\(- (p_n - p_n^2) \geq-0.25\)</span>。</p><p>因此更新规则为：</p><p><span class="math display">\[w^{t+1} = w^t - B^{-1}g(w^t)\]</span></p><p>在二分类的情况下，<span class="math inline">\(g_t = \nabla \ell(w_t)= X^T (y - \mu_t)\)</span>，则更新规则为：</p><p><span class="math display">\[w^{t+1} = w^t - 4(X^TX)^{-1}g^t\]</span></p><p>与牛顿法（IRLS）的标准更新比较：</p><p><span class="math display">\[w^{t+1} = w^t - H^{-1} g(w^t) =  = w^t −(X^TS^tX)^{−1}g^t\]</span></p><p>可以看出，使用下界的MM算法在每一步的计算上会更快，因为<span class="math inline">\((X^T X)^{-1}\)</span>可以预先计算。</p><h3 id="em算法">3. EM算法</h3><p>EM算法通过在两个步骤之间交替进行来估计模型参数：</p><ol type="1"><li><strong>E步骤（期望步骤）</strong>：估计隐藏变量或缺失值。</li><li><strong>M步骤（最大化步骤）</strong>：使用完全观察到的数据计算MLE。</li></ol><p>这个过程需要迭代，因为期望值依赖于参数，而参数又依赖于期望值。</p><h4 id="下界">3.1 下界</h4><p>EM算法的目标是最大化观察数据的对数似然函数：</p><p><span class="math display">\[\ell(\theta) = \sum_{n=1}^{N} \log p(y_n| \theta) = \sum_{n=1}^{N} \log \left( \sum_{z_n} p(y_n, z_n | \theta)\right)\]</span></p><p>其中<span class="math inline">\(y_n\)</span>​ 是可观察变量，<span class="math inline">\(z_n\)</span>​是隐藏变量。直接优化这个对数似然函数是困难的，因为对数函数不能被推入求和符号内部。</p><p>EM算法通过引入任意分布<span class="math inline">\(q_n(z_n)\)</span>来解决这个问题。观察数据的对数似然函数可以写为：</p><p><span class="math display">\[\ell(\theta) = \sum_{n=1}^{N} \log\left( \sum_{z_n} q_n(z_n) \frac{p(y_n, z_n | \theta)}{q_n(z_n)}\right)\]</span></p><p>利用詹森不等式（Jensen’sinequality），可以将对数函数推入期望之内，得到对数似然函数的下界：</p><p><span class="math display">\[\ell(\theta) \geq \sum_n \sum_{z_n}q_n(z_n) \log \frac{p(y_n, z_n | \theta)}{q_n(z_n)}\]</span></p><p>这可以进一步写为：</p><p><span class="math display">\[\ell(\theta) \geq \sum_n\mathbb{E}_{q_n}[\log p(y_n, z_n | \theta)] + H(q_n)\]</span></p><p>其中<span class="math inline">\(H(q)\)</span>是概率分布<span class="math inline">\(q\)</span>的熵。定义下界为ELBO：</p><p><span class="math display">\[\mathcal{L}(\theta, \{q_n\} | D) =\sum_n \mathcal{L}(\theta, q_n | y_n)\]</span></p><p>优化这个下界是变分推断的基础。</p><p><img src="/images/Fundamentals-Optimization/17.png"></p><h4 id="e步骤">3.2 E步骤</h4><p>下界的每一项可以写为：</p><p><span class="math display">\[\mathcal{L}(\theta, q_n | y_n) =\sum_{z_n} q_n(z_n) \log \frac{p(y_n, z_n |\theta)}{q_n(z_n)}\]</span></p><p>这可以分解为：</p><p><span class="math display">\[\begin{align*} \mathcal{L}(\theta, q_n |y_n) &amp;= \sum_{z_n} q_n(z_n) \log \frac{p(y_n, z_n |\theta)}{q_n(z_n)} \\ &amp;= \sum_{z_n} q_n(z_n) \log \frac{p(z_n | y_n,\theta) p(y_n | \theta)}{q_n(z_n)} \\ &amp;= \sum_{z_n} q_n(z_n) \log\frac{p(z_n | y_n, \theta)}{q_n(z_n)} + \sum_{z_n} q_n(z_n) \log p(y_n |\theta) \\ &amp;= -D_{KL}(q_n(z_n) \parallel p(z_n | y_n, \theta)) +\log p(y_n | \theta) \end{align*}\]</span></p><p>因此，我们可以通过将每个<span class="math inline">\(q_n\)</span>设置为：</p><p><span class="math display">\[q_n^* = p(z_n | y_n,\theta)\]</span></p><p>来最大化下界<span class="math inline">\(\mathcal{L}(\theta, \{q_n\} |D)\)</span>。这就是E步骤。此时，ELBO就等于最大似然：</p><p><span class="math display">\[\mathcal{L}(\theta, \{q_n^*\} | D) =\sum_n \log p(y_n | \theta) = \ell(\theta | D)\]</span></p><h4 id="m步骤">3.3 M步骤</h4><p>在M步骤中，我们需要最大化：</p><p><span class="math display">\[\mathcal{L}(\theta,\{q_n^t\})\]</span></p><p>由于熵项<span class="math inline">\(H(q_n)\)</span>在<span class="math inline">\(\theta\)</span>方面是常数，因此在M步骤中可以忽略这些项。我们剩下的部分是：</p><p><span class="math display">\[\ell_t(\theta) = \sum_n\mathbb{E}_{q_n^t(z_n)} [\log p(y_n, z_n | \theta)]\]</span></p><p>如果联合概率属于指数族，我们可以将其重写为：</p><p><span class="math display">\[\ell_t(\theta) = \sum_n\mathbb{E}[T(y_n, z_n)]^T \theta - A(\theta)\]</span></p><p>在M步骤中，我们最大化期望的完整数据对数似然函数，得到：</p><p><span class="math display">\[\theta^{t+1} = \arg \max_{\theta} \sum_n\mathbb{E}_{q_n^t} [\log p(y_n, z_n | \theta)]\]</span></p><p>对于指数族的情况，最大化可以通过匹配期望充分统计量的矩来闭合地求解。</p><h4 id="例子">3.4 例子</h4><p>书中以缺失数据的MLE为例子：</p><p><img src="/images/Fundamentals-Optimization/18.png"></p><p><img src="/images/Fundamentals-Optimization/19.png"></p><h4 id="扩展em算法">3.5 扩展EM算法</h4><ul><li><strong>Variational EM （变分 EM）</strong></li></ul><p><strong>变分 EM</strong> 是 EM 算法的一种变体。在 E步中，我们使用一种称为变分推断的方法来近似后验分布。具体来说，在 E步中，我们选择一个分布<span class="math inline">\(q^*_n\)</span>​来最小化<span class="math inline">\(q_n\)</span>​ 与真实后验分布<span class="math inline">\(p(z_n | x_n, \theta)\)</span>之间的 KL 散度：</p><p><span class="math display">\[q^*_n = \arg \min_{q_n \in Q} D_{KL}(q_n\| p(z_n | x_n, \theta))\]</span></p><p>这实际上是一个变分推断过程。在这种情况下，<span class="math inline">\(Q\)</span>是我们定义的一个分布族。如果分布族<span class="math inline">\(Q\)</span>足够灵活，能够包含真实的后验分布，那么<span class="math inline">\(q_n\)</span>可以接近<span class="math inline">\(p(z_n | x_n, \theta)\)</span>，使得 KL 散度趋于0。</p><p>为了计算简便，通常选择较为简单的分布族。例如，即使真实后验分布是相关的，我们可能也会假设<span class="math inline">\(q_n(z_n) = N(z_n | \mu_n,\text{diag}(\sigma_n))\)</span>（即独立的多元正态分布）。</p><p>在这种情况下，使用有限的分布族<span class="math inline">\(Q\)</span>代替真实的后验分布，称为 变分 EM。变分EM 不一定能保证增加实际的对数似然值，但可以单调增加变分下界。</p><ul><li><strong>Hard EM</strong></li></ul><p>在变分 EM的框架下，假设我们使用的是一个退化的后验近似，即仅考虑后验分布的一个点估计：</p><p><span class="math display">\[q(z | x_n) =\delta_{z_{\hat{n}}}(z)\]</span></p><p>这样<span class="math inline">\(z_{\hat{n}} = \arg \max_z p(z |x_n)\)</span>，即后验分布的最大值点。这样的方式称为 <strong>HardEM</strong>，即在 E 步中忽略了<span class="math inline">\(z_n\)</span>​的不确定性。</p><p>这种方法的缺点是，它很容易导致过拟合，特别是在隐变量的数量与数据量成正比的情况下。</p><ul><li><strong>Monte Carlo EM</strong></li></ul><p>当 E 步难以求解时，可以使用 Monte Carlo方法来近似期望的充分统计量。具体地，我们从后验分布中采样：</p><p><span class="math display">\[z^s_n \sim p(z_n | x_n,\theta^{(t)})\]</span></p><p>然后计算每个样本的充分统计量，最后将结果取平均。这种方法称为<strong>Monte Carlo EM（MCEM）</strong>。</p><p>每个 E 步中都要等待 MCMC收敛会非常耗时。另一种选择是使用随机近似法（stochasticapproximation），即在 E步中只进行简短的采样，之后进行部分参数更新。这种方法称为<strong>随机近似 EM（Stochastic Approximation EM）</strong>，通常比 MCEM更快。</p><ul><li><strong>Generalized EM （广义 EM）</strong></li></ul><p>在某些情况下，我们可以精确地执行 E 步，但无法精确地执行 M步。然而，即使不精确执行 M步，也可以通过增加期望的完整数据对数似然来单调增加对数似然。这种情况下，我们可以只进行“部分”M 步，例如执行几个梯度下降步。这种方法称为 <strong>广义EM（GEM）</strong>。</p><p>具体地，我们可以使用一个<strong>牛顿-拉弗森（Newton-Raphson）</strong>步骤来更新参数：</p><p><span class="math display">\[\theta^{(t+1)} = \theta^{(t)} - \eta_tH_t^{-1} g_t\]</span></p><p>其中，<span class="math inline">\(0 &lt; \eta_t \leq1\)</span>是步长，<span class="math inline">\(g_t\)</span>和<span class="math inline">\(H_t\)</span>​ 分别表示梯度和 Hessian 矩阵：</p><p><span class="math display">\[g_t = \frac{\partial}{\partial \theta}Q(\theta, \theta^{(t)}) \big|_{\theta = \theta^{(t)}}​ \\H_t =\frac{\partial^2}{\partial \theta \partial \theta^T} Q(\theta,\theta^{(t)}) \big|_{\theta = \theta^{(t)}}\]</span></p><p>当<span class="math inline">\(\eta_t = 1\)</span>时，这被称为梯度 EM算法。为了加速算法，也可以采用较大的步长，如在准牛顿 EM 中使用 BFGS近似替代 Hessian。</p><h2 id="五贝叶斯优化">五、贝叶斯优化</h2><p><strong>贝叶斯优化（Bayesian Optimization）</strong>简称BayesOpt，它是一种基于模型的黑盒优化方法，旨在优化难以评估的目标函数<span class="math inline">\(f : X \toR\)</span>的情形。（例如模拟成本比较高、训练复杂模型等）。由于计算代价高，我们希望尽可能少地调用目标函数，即减少查询<span class="math inline">\(x\)</span>的次数。因此，贝叶斯优化通过构建一个<strong>代理函数</strong>来近似目标函数<span class="math inline">\(f\)</span>并在每次查询进行选择，避免重复昂贵的函数评估。</p><p>贝叶斯优化的核心思想是：在构建代理函数的基础上权衡探索（exploration）和利用（exploitation）。</p><ul><li><strong>探索</strong>指的是在不确定的区域进行查询，以改善对代理模型的整体了解；</li><li><strong>利用</strong>指的是在目标函数<span class="math inline">\(f(x)\)</span>预期较高的区域查询，以更快地找到最优点。这种权衡称为探索-利用困境。</li></ul><p>假设目标函数的查询数据集为<span class="math inline">\(D_n = \{(x_i,y_i) : i = 1, ..., n\}\)</span>，其中<span class="math inline">\(y_i =f(x_i) + \epsilon_i\)</span>，其中<span class="math inline">\(\epsilon_i\)</span>​是一个可能的噪声项。基于此数据集构建的代理模型可以估计<span class="math inline">\(f\)</span>的概率分布<span class="math inline">\(p(f |D_n)\)</span>。每一步优化中，我们通过<strong>采集函数（acquisitionfunction）</strong>来选择下一个查询点<span class="math inline">\(x_{n+1}\)</span>​，采集函数根据模型不确定性和目标值的期望收益计算出最优的查询点。</p><h3 id="顺序模型优化sequential-model-based-optimization-smbo">1.顺序模型优化（Sequential Model-Based Optimization, SMBO）</h3><p>贝叶斯优化是一种<strong>顺序模型优化（SMBO）</strong>的方法。在每一次迭代中，贝叶斯优化通过一个已标记的数据集<span class="math inline">\(D_n = \{(x_i, y_i) : i = 1, ...,n\}\)</span>来更新对代理模型的估计。该数据集记录了每个查询点<span class="math inline">\(x_i\)</span>​ 及其对应的函数值<span class="math inline">\(y_i = f(x_i) +\epsilon_i\)</span>。基于此数据集，我们可以估计目标函数的概率分布<span class="math inline">\(p(f | D_n)\)</span>，然后使用采集函数<span class="math inline">\(\alpha(x; D_n)\)</span>来决定下一个查询点<span class="math inline">\(x_{n+1}\)</span>​。查询<span class="math inline">\(x_{n+1}\)</span>​ 获得<span class="math inline">\(y_{n+1} = f(x_{n+1}) +\epsilon_{n+1}\)</span>后，我们更新对目标函数的估计，然后重复上述步骤。</p><p><img src="/images/Fundamentals-Optimization/20.png"></p><p>贝叶斯优化的主要步骤包括：</p><ul><li>代理模型的构建和更新：代理模型用于近似目标函数<span class="math inline">\(f\)</span>的后验分布<span class="math inline">\(p(f | D_n)\)</span>。</li><li>采集函数的定义和优化：采集函数<span class="math inline">\(\alpha(x;D_n)\)</span>用于评估查询点的潜在收益，从而决定下一个查询点的位置。</li></ul><p>下图展示了贝叶斯优化的运行过程：</p><ul><li>在初始时，通过两个已查询点<span class="math inline">\(x_1\)</span>和<span class="math inline">\(x_2\)</span>​确定了代理模型在这些位置上的函数值，模型在这两点附近的不确定性趋近于0。</li><li>采集函数（绿色曲线）在已查询点的位置值为0，并在代理模型不确定性较高的区域达到最大值。</li><li>之后的迭代中，随着新的点被查询和观测，模型逐渐减少了对真实函数的估计不确定性，逐步逼近目标函数的全局最优解。</li></ul><p><img src="/images/Fundamentals-Optimization/21.png"></p><h3 id="代理函数">2. 代理函数</h3><p>对于代理函数，主要有<strong>高斯过程</strong>（Gaussian Processes,GPs）、<strong>贝叶斯神经网络</strong>（Bayesian Neural Networks,BNNs）等。</p><ul><li><strong>高斯过程（GPs）</strong></li></ul><p>高斯过程是一种常用的代理函数。在 GP 中，<span class="math inline">\(p(f(x)|D_n)\)</span>被建模为正态分布<span class="math inline">\(N(f|\mu_n(x),\sigma_n^2(x))\)</span>，其中均值<span class="math inline">\(\mu_n(x)\)</span>和方差<span class="math inline">\(\sigma_n(x)\)</span>可以通过训练数据集<span class="math inline">\(D_n\)</span>​ 推导得出。</p><p>核函数<span class="math inline">\(K_\theta(x,x&#39;)\)</span>用于度量输入点<span class="math inline">\(x\)</span>和<span class="math inline">\(x′\)</span>之间的相似度。相似度高的点对应该有相似的函数值，因此可以正相关。高斯过程据此在训练点之间内插值（有时甚至可以外推）。核函数的选择至关重要。通常可以通过最大化边际似然来估计核参数<span class="math inline">\(\theta\)</span>，或者使用贝叶斯推断来近似边际化<span class="math inline">\(\theta\)</span>。</p><p>高斯过程在数据较少时效果很好，支持闭式的贝叶斯更新，但计算代价为<span class="math inline">\(O(N^3)\)</span>（其中<span class="math inline">\(N\)</span>为样本数），对于大量函数评估来说会很慢。有一些方法可以将计算复杂度降低至<span class="math inline">\(O(NM^2)\)</span>，其中<span class="math inline">\(M\)</span>是可选参数，但会牺牲精度。</p><ul><li><strong>贝叶斯神经网络（BNNs）</strong></li></ul><p>贝叶斯神经网络是高斯过程的一种自然替代。使用线性回归时，可以高效地进行精确的贝叶斯推断。但若使用非线性模型（如深度神经网络，DNN），则需使用近似推断。</p><p>BNNs 提供了一个在贝叶斯优化中替代 GPs的方式，因为它们能够建模非线性关系，且在大数据量下通常更高效。关于贝叶斯网络的具体内容会后面进行学习。</p><p>还可以使用其他形式的回归模型。例如，随机森林集成模型在贝叶斯优化中表现良好，因为它们可以处理条件参数空间，但需要bootstrapping来获得不确定性估计，计算较慢。</p><h3 id="采集函数">3. 采集函数</h3><p>采集函数用来评估每个可能的查询点的预期效用。一般表示为：</p><p><span class="math display">\[\alpha(x|D_n) =\mathbb{E}_{p(y|x,D_n)}[U(x, y; D_n)]\]</span></p><p>其中：</p><p><em><span class="math inline">\(y = f(x)\)</span>是在点<span class="math inline">\(x\)</span>处未知函数的值， </em><span class="math inline">\(U\)</span>是效用函数，它决定不同采集函数的形式。</p><p>下面介绍一些常见的采集函数。</p><h4 id="改进概率probability-of-improvement-pi">3.1 改进概率（Probabilityof Improvement, PI）</h4><p><strong>改进概率</strong>用于评估某一点是否可能带来比当前最优观测值更好的结果。定义如下：</p><p>首先，设定目前的最优值（incumbent）为：<br><span class="math display">\[M_n = \max_{i=1}^n y_i\]</span></p><p>如果观测是有噪声的，可以选择最高均值代替最大观测值。定义效用函数：</p><p><span class="math display">\[U(x, y; D_n) = I(y &gt;M_n)\]</span></p><p>其中<span class="math inline">\(I(\cdot)\)</span>是指示函数，即当<span class="math inline">\(y\)</span>超过当前最优值<span class="math inline">\(M_n\)</span>​ 时，产生效用 1，否则为 0。</p><p>因此，PI 采集函数可以表示为：<br><span class="math display">\[\alpha_{\text{PI}}(x; D_n) = p(f(x) &gt;M_n | D_n)\]</span></p><p>若代理模型是高斯过程，可以得到 PI的闭式解（就是简单的高斯分布求概率）：</p><p><span class="math display">\[\alpha_{\text{PI}}(x; D_n) =\Phi\left(\gamma_n(x, M_n)\right)\]</span></p><p><span class="math display">\[\gamma_n(x, \tau) = \frac{\mu_n(x) -\tau}{\sigma_n(x)}\]</span></p><p>其中：</p><p><em><span class="math inline">\(\Phi\)</span>是标准正态分布的累积分布函数（CDF），</em><span class="math inline">\(\mu_n(x)\)</span>和<span class="math inline">\(\sigma_n(x)\)</span>分别是高斯过程在<span class="math inline">\(x\)</span>处的均值和标准差。</p><h4 id="期望改进expected-improvement-ei">3.2 期望改进（ExpectedImprovement, EI）</h4><p><strong>期望改进</strong>考虑的是改进的量，而不仅仅是是否产生改进。定义效用函数为：</p><p><span class="math display">\[U(x, y; D_n) = (y - M_n)I(y &gt;M_n)\]</span></p><p>这样只有<span class="math inline">\(y &gt; M_n\)</span>​时才会有正值的效用。</p><p>因此，EI 采集函数表示为：<br><span class="math display">\[\alpha_{\text{EI}}(x; D_n) =\mathbb{E}_{D_n}[(f(x) - M_n)I(f(x) &gt; M_n)]\]</span></p><p>在高斯过程模型下，EI 有以下闭式解：</p><p><span class="math display">\[\alpha_{\text{EI}}(x; D_n) = (\mu_n(x) -M_n)\Phi(\gamma) + \sigma_n(x)\phi(\gamma)\]</span></p><p>其中：</p><p><em><span class="math inline">\(\phi\)</span>是标准正态分布的概率密度函数</em><span class="math inline">\(\gamma = \gamma_n(x, M_n) =\frac{\mu_n(x) - M_n}{\sigma_n(x)}\)</span></p><p>我们可以注意到EI 的两个部分：</p><ul><li>第一项<span class="math inline">\((\mu_n(x) -M_n)\Phi(\gamma)\)</span>促进利用（选择均值高的点）</li><li>第二项<span class="math inline">\(\sigma_n(x)\phi(\gamma)\)</span>则促进探索（选择方差大的点）。</li></ul><p>如果无法计算预测方差，可以使用蒙特卡洛方法近似：</p><p><span class="math display">\[\alpha_{\text{EI}}(x; D_n) \approx\frac{1}{S} \sum_{s=1}^S \max(\mu_n^s(x) - M_n, 0)\]</span></p><h4 id="上置信界upper-confidence-bound-ucb">3.3 上置信界（UpperConfidence Bound, UCB）</h4><p><strong>上置信界</strong>通过计算函数的上置信区间来决定评估点。其采集函数定义为：</p><p><span class="math display">\[\alpha_{\text{UCB}}(x; D_n) = \mu_n(x) +\beta_n \sigma_n(x)\]</span></p><p>其中<span class="math inline">\(\beta_n\)</span>​控制置信区间的宽度。在高斯过程代理模型下，这种方法称为 GP-UCB。</p><h4 id="汤普森采样thompson-sampling">3.4 汤普森采样（ThompsonSampling）</h4><p><strong>汤普森采样</strong>尝试直接从后验分布中采样，以找到潜在的最优点。采集函数定义为：</p><p><span class="math display">\[\alpha(x; D_n) =\mathbb{E}_{p(\theta|D_n)} \left[ I\left( x = \arg\max_{x&#39;}f_\theta(x&#39;) \right) \right]\]</span></p><p>通过从<span class="math inline">\(p(\theta|D_n)\)</span>中采样一个<span class="math inline">\(\tilde{\theta}\)</span>，我们选择最大化<span class="math inline">\(f_{\tilde{\theta}}(x)\)</span>的点。对于高斯过程，采样会比较复杂，因此应用起来需要特殊的技术。</p><h4 id="熵搜索entropy-search">3.5 熵搜索（Entropy Search）</h4><p><strong>熵搜索</strong>直接最小化对最优点位置的<strong>不确定性</strong>。熵搜索的效用函数定义为：</p><p><span class="math display">\[U(x, y; D_n) = H(x^*|D_n) - H(x^*|D_n\cup \{(x, y)\})\]</span></p><p>其中<span class="math inline">\(H(x^*|D_n)\)</span>是后验分布<span class="math inline">\(p^*(x|D_n)\)</span>的熵。熵搜索的采集函数为：</p><p><span class="math display">\[\alpha_{\text{ES}}(x; D_n) =\mathbb{E}_{p(y|x, D_n)}[U(x, y; D_n)] = H(x^*|D_n) - \mathbb{E}_{p(y|x,D_n)}[H(x^*|D_n \cup \{(x, y)\})]\]</span></p><p>通过<strong>预测熵搜索（Predictive Entropy Search,PES）</strong>，可以使用互信息的对称性来简化该采集函数：</p><p><span class="math display">\[\alpha_{\text{PES}}(x; D_n) = H(y|D_n,x) - \mathbb{E}_{x^*|D_n}[H(y|D_n, x, x^*)]\]</span></p><p>在这里，可以通过汤普森采样来近似积分。</p><h4 id="知识梯度-knowledge-gradient">3.6 知识梯度 (KnowledgeGradient)</h4><p>知识梯度获取函数的核心思想是：通过考虑在查询一个新点后，更新我们的后验分布，然后基于新的分布进一步寻找最大值。这种方法不只是关注当前步骤的最大化，而是展望两步，从而达到长远的优化效果。</p><p>假设我们在点<span class="math inline">\(x\)</span>查询后，得到了新的观测值<span class="math inline">\(y\)</span>，可以根据新的信念找到下一个可能的最佳值：<br><span class="math display">\[V_{n+1}(x, y) = \max_{x&#39;}\mathbb{E}_{p(f|x, y, D_n)} [f(x&#39;)]\]</span></p><p>其中<span class="math inline">\(V_{n+1}(x, y)\)</span>表示在位置<span class="math inline">\(x\)</span>查询并得到结果<span class="math inline">\(y\)</span>后，下一步所能达到的最大值。</p><p>由于我们在进行查询时并不知道真实的<span class="math inline">\(y\)</span>值，因此需要对所有可能的<span class="math inline">\(y\)</span>取期望，以得出在查询<span class="math inline">\(x\)</span>位置后的期望的增益：<br><span class="math display">\[V_{n+1}(x) = \mathbb{E}_{p(y|x, D_n)}[V_{n+1}(x, y)]\]</span></p><p>知识梯度获取函数的定义如下：<br><span class="math display">\[\alpha_{KG}(x; D_n) = \mathbb{E}_{D_n}\left[(V_{n+1}(x) - M_n) \cdot I(V_{n+1}(x) &gt;M_n)\right]\]</span></p><p>这里<span class="math inline">\(M_n = \max_{i=1}^n y_i\)</span>，​是当前已观察到的最佳值（即，迄今为止观察到的最大值）。该函数的定义类似于期望提升（ExpectedImprovement,EI），区别在于知识梯度考虑的是观察新点后可以利用的新知识，而不仅仅是找到一个新的最大值。</p><p>下面是上面方法之间在一个实践中的对比：</p><p><img src="/images/Fundamentals-Optimization/22.png"></p><h2 id="六无梯度优化">六、无梯度优化</h2><p><strong>无梯度优化（DFO，Derivative-freeOptimization）</strong>指的是在不知道函数的导数信息时如何进行优化。根据目标函数的评估成本，无梯度优化可以分为<strong>贝叶斯优化</strong>（适用于高评估成本的情况）和<strong>随机局部搜索</strong>或<strong>进化搜索</strong>（适用于低评估成本的情况）。贝叶斯优化已经讲过了，所以下面的内容主要集中在随机局部搜索或进化搜索。</p><h3 id="局部搜索local-search">1. 局部搜索（Local Search）</h3><p>局部搜索是一类启发式优化算法，旨在寻找离散、非结构化搜索空间中的全局最大值。传统的梯度更新形式为：</p><p><span class="math display">\[\theta_{t+1} = \theta_t + \eta_td_t\]</span></p><p>但在无梯度优化中无法使用此更新形式，因此使用一个离散版本的更新方式。具体来说，更新的公式为：</p><p><span class="math display">\[L(x)x_{t+1} = \arg \max_{x \in\text{nbr}(x_t)} L(x)\]</span></p><p>其中<span class="math inline">\(\text{nbr}(x_t) \subsetX\)</span>表示<span class="math inline">\(x_t\)</span>的邻域，这一方法被称为<strong>爬山算法</strong>（hillclimbing）、<strong>最陡上升</strong>（steepestascent）或<strong>贪心搜索</strong>。</p><p>若一个点的邻域包含整个搜索空间，则上面公式可在一步内返回全局最优解，但通常这种邻域过大，难以完全搜索。因此，通常会定义<strong>局部邻域</strong>。例如，在<strong>8皇后问题</strong>中，目标是将8个皇后放置在8×8 棋盘上，使它们互不攻击。8皇后的状态空间<span class="math inline">\(X= 64^8\)</span>，但由于约束，只有大约 17M个可行状态。定义每个状态的邻域为所有通过将一个皇后移动到同列其他位置而生成的状态，因此每个状态有56个邻居。然而，随机生成的初始状态通过最陡上升法只能成功解决14%的问题，并且在失败时会停留在局部最优解处。</p><h4 id="随机局部搜索stochastic-local-search">1.1随机局部搜索（Stochastic Local Search）</h4><p>爬山算法是一种贪心算法，因为它在邻域内选择最优点。这种方法容易卡在局部最优解。为了减少这种情况，一个解决方法是将目标在每一步的最大化从确定性转变为<strong>随机化</strong>。具体而言，可以定义邻居的概率分布，概率与邻居改进的程度成正比，从而随机采样一个邻居点。这被称为<strong>随机爬山法</strong>（stochastichill climbing）。</p><p>如果逐渐减小该概率分布的熵，使算法逐渐趋于贪心，则得到<strong>模拟退火算法</strong>（simulatedannealing）。另一种方法是使用贪心爬山算法，但在遇到局部最优解时，从一个新的随机起点重新开始。这种方法称为<strong>随机重启爬山法</strong>（randomrestart hillclimbing）。例如在8皇后问题中，如果每次爬山搜索的成功概率为<span class="math inline">\(p \approx 0.14\)</span>，期望需要<span class="math inline">\(R = 1/p \approx7\)</span>次重启才能找到有效解。</p><h4 id="禁忌搜索tabu-search">1.2 禁忌搜索（Tabu Search）</h4><p>爬山法在达到局部最优或平台时会停止。虽然可以通过随机重启来避免这种情况，但会丢弃已有的信息。<strong>禁忌搜索</strong>（TabuSearch）是一种更智能的替代方法。禁忌搜索允许移动到得分下降的状态，只要该状态之前没有访问过。为此，我们维护一个<strong>禁忌表</strong>（tabulist），记录最近访问的<span class="math inline">\(\tau\)</span>个状态，从而强制算法探索新的状态，增加逃离局部最优解的机会。</p><p>禁忌搜索达到局部最高点<span class="math inline">\(x_t\)</span>​时，会移动到邻居<span class="math inline">\(x_{t+1} \in\text{nbr}(x_t)\)</span>，该点得分较低。接着它会移动到之前状态的邻居<span class="math inline">\(x_{t+2} \in\text{nbr}(x_{t+1})\)</span>，禁忌表阻止它返回到峰顶，从而使它继续探索，直到找到新的峰顶，或达到最多非改进步数<span class="math inline">\(c_{\text{max}}\)</span>​。</p><p><img src="/images/Fundamentals-Optimization/23.png"></p><p>在8皇后问题中，禁忌搜索能将解决成功率从14%提高到94%，平均每个成功实例需要21步，失败实例需要64步。</p><h3 id="模拟退火-simulated-annealing">2. 模拟退火 (SimulatedAnnealing)</h3><p>模拟退火是一种随机局部搜索算法，通常用于寻找黑箱函数<span class="math inline">\(E(x)\)</span>的全局最小值，这里的<span class="math inline">\(E\)</span>被称为能量函数。模拟退火的灵感来源于物理学中的退火过程，通过逐步降低“温度”来达到目标。</p><p>将能量函数<span class="math inline">\(E(x)\)</span>转换为状态概率分布：<br><span class="math display">\[p(x) = \exp(-E(x))\]</span></p><p>这里的<span class="math inline">\(p(x)\)</span>是未归一化的概率分布，目的是构建一个与能量成反比的概率分布。</p><p>模拟退火每次会使用一种变体的 Metropolis-Hastings算法（采样算法）来从概率分布中采样。每次迭代中，算法会选择一个新的候选状态<span class="math inline">\(x′\)</span>，然后按照概率接受或拒绝该状态。接受概率由能量差值和当前“温度”决定：<br><span class="math display">\[\text{接受概率} = \min \left( 1, \exp\left( \frac{E(x) - E(x&#39;)}{T} \right) \right)\]</span></p><p>其中<span class="math inline">\(T\)</span>是“温度”参数，随着迭代次数增加逐渐减小。在高温阶段，算法倾向于接受更差的解，以避免陷入局部极小值；在低温阶段，逐渐收敛于全局最优解。</p><h3 id="进化算法-evolutionary-algorithms">3. 进化算法 (EvolutionaryAlgorithms)</h3><p>进化算法是一类仿生算法，模拟自然选择和遗传进化的过程，以优化复杂目标函数。这类算法通常使用一个种群<span class="math inline">\(S_t\)</span>来表示候选解的集合。</p><p>进化算法的主要组成部分</p><ul><li><strong>适应度 (Fitness)</strong>：每个候选解的“适应度”是其目标函数的值，即评估该解的好坏。</li><li><strong>选择函数 (Selection Function)</strong>：从当前种群中选择适应度较高的成员作为“父代”生成“子代”。常见的选择策略包括：<ul><li><strong>截断选择 (Truncation Selection)</strong>：从适应度最高的前<span class="math inline">\(K\)</span>个成员中随机选择父代。</li><li><strong>锦标赛选择 (Tournament Selection)</strong>：每次从种群中随机选择<span class="math inline">\(K\)</span>个成员，选择适应度最高的个体作为父代。</li><li><strong>适应度比例选择 (Fitness Proportionate Selection)</strong>：按照个体适应度的相对比例选择父代（也叫轮盘选择）。</li></ul></li><li><strong>重组 (Recombination) 和变异 (Mutation)</strong>：生成新候选解的关键操作：<ul><li><strong>交叉 (Crossover)</strong>：对两个父代进行基因交换，产生子代。例如在遗传算法中，每个个体可以表示为二进制或整数向量，随机选择切割点并交换父代的子串。</li><li><strong>变异 (Mutation)</strong>：对单个个体进行小范围随机改变，用于增加种群多样性。</li></ul></li></ul><p><img src="/images/Fundamentals-Optimization/24.png"></p><p>常见的进化算法如下：</p><ul><li><strong>遗传算法 (Genetic Algorithm, GA)</strong>：使用二进制或整数表示个体，通过交叉和变异产生新的个体，如上图。</li><li><strong>遗传编程 (Genetic Programming, GP)</strong>：使用树状结构表示个体，适合生成结构化对象或程序，如下图。</li><li><strong>代理辅助进化算法 (Surrogate-assisted EA)</strong>：使用近似模型替代真实的目标函数，以减少评估开销。</li><li><strong>记忆算法 (Memetic Algorithm)</strong>：结合进化算法和局部搜索，提升求解效率。</li></ul><p><img src="/images/Fundamentals-Optimization/25.png"></p><h3 id="分布估计算法">4. 分布估计算法</h3><p><strong>分布估计算法（Estimation of Distribution Algorithms,EDA）</strong>是一种进化算法（EA）的变体。EDA的主要思想是用概率模型来表示高适应度解的分布，而不是通过基因操作（如交叉、变异）来生成新解。</p><p>传统的进化算法依赖遗传操作来保持和生成候选解的种群，而 EDA则采用显式的概率模型来估计解的分布。在每次迭代中，EDA从当前的概率模型中采样生成候选解，选出最优的部分解，然后基于这些解更新概率模型，从而使其逐步向最优解靠近。</p><p>具体的 EDA 操作步骤：</p><ul><li><strong>候选解采样</strong>：从当前模型<span class="math inline">\(p(x|\theta_t)\)</span>中采样<span class="math inline">\(K&#39; &gt; K\)</span>个候选解，构成种群<span class="math inline">\(S_t = \{x_k \sim p(x|\theta_t)\}\)</span>。</li><li><strong>选择操作</strong>：用适应度函数对这些候选解排序，选择出最优的<span class="math inline">\(K\)</span>个解，记为<span class="math inline">\(S^*_t\)</span>（截断选择）。</li><li><strong>更新概率模型</strong>：利用最大似然估计（MLE）将新模型<span class="math inline">\(p(x|\theta_{t+1})\)</span>拟合到<span class="math inline">\(S^*_t\)</span>​ 上，得到下一代的解分布。</li></ul><p>EDA 本质上是通过最小化<span class="math inline">\(S^*_t\)</span>​的经验分布与新模型分布<span class="math inline">\(p(x|\theta_{t+1})\)</span>的交叉熵来进行更新，因此与交叉熵法（CEM）有一定联系。对比来看，交叉熵法通常假设模型为多元高斯分布<span class="math inline">\(N(x|\mu, \Sigma)\)</span>，而 EDA 更加通用。</p><p>在实际应用中，为了表示解空间中的变量依赖性，可以选择更加复杂的概率模型。</p><ul><li>对于连续变量，可以使用多元高斯模型<span class="math inline">\(p(x) =N(x|\mu, \Sigma)\)</span>，此方法被称为多元正态估计算法（EMNA）。</li><li>对于离散变量：可以用概率图模型（如树结构、贝叶斯网络）来捕捉变量之间的依赖关系。Chow-Liu算法可以用于树结构的学习，而更复杂的图模型结构也可以通过 BOA等算法学习。</li></ul><p><img src="/images/Fundamentals-Optimization/26.png"></p><p>随着深度学习的应用，可以使用深度生成模型来表示解分布。例如，可以使用去噪自编码器、NADE、DNN回归模型、RBM（受限玻尔兹曼机）和 VAE（变分自编码器）等。</p><h4 id="示例umda">4.1 示例：UMDA</h4><p>考虑一个简单的例子，目标空间是长度为<span class="math inline">\(D\)</span>的二进制字符串，适应度函数为</p><p><span class="math display">\[f(x) = \sum_{d=1}^D x_d\]</span></p><p>其中<span class="math inline">\(x_d \in \{0, 1\}\)</span>（称为one-max 函数）。一个简单的概率模型是完全分解的模型：</p><p><span class="math display">\[p(x|\theta) = \prod_{d=1}^D\text{Ber}(x_d|\theta_d)\]</span></p><p>这称为<strong>单变量边际分布算法（UMDA）</strong>。对于这种伯努利分布，可以通过统计<span class="math inline">\(S^*_t\)</span>​ 中各位置的 1 的比例来估计参数：</p><p><span class="math display">\[\hat{\theta}_{d, t+1} = \frac{1}{N_t}\sum_{k=1}^K I(x_{k, d} = 1)\]</span></p><p>其中<span class="math inline">\(K =|S^*_t|\)</span>，表示选择的候选解数量。为了平滑参数更新，可以使用如下增量更新公式：</p><p><span class="math display">\[\hat{\theta}_{d, t+1} = (1 - \eta_t)\hat{\theta}_{d, t} + \eta_t \theta_{d, t}\]</span></p><p>其中，<span class="math inline">\(\eta_t\)</span>是学习率，<span class="math inline">\(\theta_{d, t}\)</span>是第<span class="math inline">\(t\)</span>代选择子集中第<span class="math inline">\(d\)</span>位为 1的比例。这个更新方法称为基于种群的增量学习（PBIL）。</p><h4 id="交叉熵法cem">4.2 交叉熵法（CEM）</h4><p>交叉熵法是一种特殊的分布估计算法（EDA），其中种群由多元高斯分布表示。算法的主要步骤如下：</p><ul><li><strong>设置均值和协方差</strong>：<span class="math inline">\(\mu_{t+1}\)</span>和<span class="math inline">\(\Sigma_{t+1}\)</span>被设置为<span class="math inline">\(S^*_{t+1}\)</span>的经验均值和协方差，<span class="math inline">\(S^*_{t+1}\)</span>是前 K 个样本。</li><li><strong>优化问题</strong>： 在 CEM中，我们希望最大化以下目标：<br><span class="math display">\[\theta_{t+1} = \arg\max_{\theta} \sum_{i\in S_t} p_t(i) \log p(x_{t,i} | \theta)\]</span></li></ul><p>其中<span class="math inline">\(p_t(i)\)</span>是与选择的样本<span class="math inline">\(S^*_t\)</span>相关的概率分布。</p><h3 id="进化策略evolutionary-strategies-es">5. 进化策略（EvolutionaryStrategies, ES）</h3><p>进化策略是一种基于分布的优化方法，其中种群的分布用高斯分布表示。与CEM 不同，ES 通过对期望目标的梯度上升来更新参数，而不是使用MLE。主要步骤如下：</p><ul><li><strong>平滑目标函数</strong>：<br><span class="math display">\[L(\theta) =\mathbb{E}_{p(x|\theta)}[f(x)]\]</span></li><li><strong>计算梯度</strong>： 使用 REINFORCE 估计器计算梯度：<br><span class="math display">\[\nabla_\theta L(\theta) =\mathbb{E}_{p(x|\theta)}[f(x) \nabla_\theta \logp(x|\theta)]\]</span></li></ul><p>这个期望可以通过蒙特卡罗采样进行近似。</p><p>当概率模型属于指数族时，可以计算自然梯度，通常收敛速度更快。<strong>自然进化策略（NaturalEvolution Strategies,NES）</strong>使用自然梯度替代“普通”梯度，以加速优化。</p><p>CMA-ES 是一种NES，主要特征在于它以加权的方式更新均值和协方差。具体步骤如下：</p><ol type="1"><li><strong>计算加权均值</strong>： 新均值设为当前样本的加权 MLE。</li><li><strong>更新协方差</strong>：使用“进化路径”来累积搜索方向，更新协方差，更新公式较为复杂。</li></ol><p>CMA-ES 通过这些更新近似目标函数<span class="math inline">\(L(\theta)\)</span>的自然梯度，而无需显式建模费舍尔信息矩阵。</p><p><img src="/images/Fundamentals-Optimization/27.png"></p>]]></content>
    
    
    <categories>
      
      <category>Probabilistic Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>概率论与数理统计</tag>
      
      <tag>优化方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Probabilistic Machine Learning]: Fundamentals-Information theory</title>
    <link href="/2024/10/24/Fundamentals-Information%20theory/"/>
    <url>/2024/10/24/Fundamentals-Information%20theory/</url>
    
    <content type="html"><![CDATA[<h2 id="一、KL散度">一、KL散度</h2><p>机器学习本质上是对信息的处理，其中一个关键就在于如何衡量从一个信息的分布到另一个信息分布的差别与变化。**KL 散度（Kullback-Leibler Divergence）**作为衡量分布差异的最经典函数，其定义为：</p><ul><li>离散情况：</li></ul><p>$$D_{KL}(p | q) \equiv \sum_{k=1}^{K} p_k \log \frac{p_k}{q_k}$$</p><p>连续情况：</p><p>$$D_{KL}(p | q) \equiv \int dx , p(x) \log \frac{p(x)}{q(x)}$$</p><h3 id="1-KL-散度满足的性质">1. KL 散度满足的性质</h3><h4 id="1-1-连续性">1.1 连续性</h4><p>KL 散度在其参数上是连续的，除非$p_k$​ 或$q_k$​ 为零。如果$p$趋近于零，满足：</p><p>$$\lim_{p \to 0} \frac{p \log p}{q} = 0$$</p><p>这保证了当$p = 0$时，函数仍然连续。然而，当$q = 0$且$p &gt; 0$时，更新的幅度将趋向于无限。</p><h4 id="1-2-非负性">1.2 非负性</h4><p>KL 散度总是非负的：</p><p>$$D_{KL}(p | q) \geq 0$$</p><p>当且仅当$p = q$时，KL 散度等于零。证明使用 <strong>Jensen 不等式</strong>：</p><p>$$f\left(\sum_{i=1}^{n} \lambda_i x_i\right) \leq \sum_{i=1}^{n} \lambda_i f(x_i)$$</p><p>通过推导，可以得到：</p><p>$$\begin{align*} -D_{KL}(p | q) &amp;= -\sum_{x \in A} p(x) \log \frac{p(x)}{q(x)} \&amp;\leq \log \left(\sum_{x \in A} \frac{q(x)}{p(x)}p(x)\right)\ &amp;\leq \log 1 = 0  \end{align*}$$</p><p>非负性方便我们明确优化的目标。</p><p>![](/images/Fundamentals-Information theory/1.png)</p><h4 id="1-3-重参数化不变性">1.3 重参数化不变性</h4><p>KL 散度在随机变量的任意可逆变换下保持不变。如果将随机变量从$x$变换为$y = f(x)$，则有：</p><p>$$p(x) , dx = p(y)  dy$$<br>$$q(x) , dx = q(y)$$</p><p>那么 KL 散度可以写成：</p><p>$$D_{KL}(p(x) | q(x)) = \int dx , p(x) \log \frac{p(x)}{q(x)}$$</p><p>通过变换得到：</p><p>$$= \int dy , p(y) \log \left( \frac{p(y)}{q(y)} \cdot \frac{dy}{dx} \cdot \frac{dx}{dy} \right)$$</p><p>由于$p(y) dy = p(x) dx$和$q(y) dy = q(x) dx$，可以得到：</p><p>$$D_{KL}(p(x) | q(x)) = D_{KL}(p(y) | q(y))$$</p><p>因此，KL 散度在重参数化下是保持不变的。这表明 KL 散度是关于分布本身的，而不是表示空间的方式。</p><p>![](/images/Fundamentals-Information theory/2.png)</p><h4 id="1-4-对均匀分布的单调性">1.4 对均匀分布的单调性</h4><p>从$N$个元素的均匀分布更新到$N’$个元素的均匀分布，KL 散度为：</p><p>$$D_{KL}(p | q) = \sum_{k} \frac{1}{N’} \log \frac{1/N’}{1/N} = \log \frac{N}{N’}$$</p><p>这表明更新的幅度与元素数量的比例相关。</p><h4 id="1-5-KL-散度的链式法则">1.5 KL 散度的链式法则</h4><p>KL 散度满足链式法则：</p><p>$$D_{KL}(p(x, y) | q(x, y)) = \int dx , dy , p(x, y) \log \frac{p(x, y)}{q(x, y)}$$</p><p>可以分解为：</p><p>$$D_{KL}(p(x) | q(x)) + E_{p(x)}\left[D_{KL}(p(y|x) | q(y|x))\right]$$</p><p>条件 KL 散度 定义为：</p><p>$$D_{KL}(p(y|x) | q(y|x)) \equiv \int dx , p(x) \int dy , p(y|x) \log \frac{p(y|x)}{q(y|x)}$$</p><p>此外我们注意到：</p><p>$$D_{KL} (p(x,y) | q(x,y)) \geq D_{KL} (p(y) | q(y))$$</p><p>对这一结果的一种直观解释是，如果只部分观察随机变量，那么区分两个候选分布比观察全部随机变量更难。</p><p>![](/images/Fundamentals-Information theory/3.png)</p><h3 id="2-Thinking-about-KL">2. Thinking about KL</h3><p>在这一节中，我们主要讨论 KL 散度的一些特性。</p><h4 id="2-1-KL-散度的单位">2.1 KL 散度的单位</h4><p>KL 散度的单位与我们选择的对数的底数有关。对数的不同底数之间的差异只是一个乘法常数的差异，因此 KL 散度的计算方式类似于选择测量信息的单位：</p><ul><li>当使用底为 2 的对数时，KL 散度的单位为比特（bits），即“二进制数字”。</li><li>当使用自然对数（通常用于数学方便）时，单位为纳特（nats），即“自然单位”。</li></ul><p>为了在这两种单位之间进行转换，我们有$\log_2 y = \frac{\log y}{\log 2}$，因此：</p><p>$$1 \text{ bit} = \log_2 \text{ nats} \sim 0.693 \text{ nats}$$</p><p>$$1 \text{ nat} = \frac{1}{\log_2} \text{ bits} \sim 1.44 \text{ bits}$$</p><h4 id="2-2-KL-散度的非对称性">2.2 KL 散度的非对称性</h4><p>KL 散度在其两个参数中不是对称的。尽管看起来非常不合理，但实际上非对称性源于我们要求自然链式法则。在分解分布时，我们需要对被条件化的变量取期望。在 KL 散度中，我们是对第一个参数$p(x)$取期望，这打破了两个分布之间的对称性。</p><p>从更直观的角度来看，从分布$q$更新到$p$所需的信息量通常与从$p$更新到$q$所需的信息量不同。例如，考虑两个 Bernoulli 分布：</p><ul><li>第一个分布成功的概率为 0.443；</li><li>第二个分布成功的概率为 0.975。</li></ul><p>计算这两个分布之间的 KL 散度：</p><p>$$\begin{align*} D_{KL}(p | q) &amp;= 0.975 \log \frac{0.975}{0.443} + 0.025 \log \frac{0.025}{0.557} \&amp;= 0.692 \text{ nats} \sim 1.0 \text{ bits}  \end{align*}$$</p><p>这表明，从分布$[0.443, 0.557]$更新到$[0.975, 0.025]$需要 1 比特的信息。</p><p>反过来：</p><p>$$\begin{align*} D_{KL}(q | p) &amp;= 0.443 \log \frac{0.443}{0.975} + 0.557 \log \frac{0.557}{0.025} \&amp;= 1.38 \text{ nats} \sim 2.0 \text{ bits}  \end{align*}$$</p><p>这表明，从分布$[0.975, 0.025]$更新到$[0.443, 0.557]$需要 2 比特的信息。由此可见，从一个接近均匀的分布到几乎确定的分布需要大约 1 比特的信息，而从近乎确定的结果转变到类似于抛硬币的结果则需要更多的信息。</p><h4 id="2-3-KL-散度作为evidence的期望权重">2.3 KL 散度作为evidence的期望权重</h4><p>假设你有两个不同的假设$P$和$Q$，并希望在它们之间选择。你收集了一些数据$D$。贝叶斯定理告诉我们：</p><p>$$Pr(P|D) = \frac{Pr(D|P) \cdot Pr(P)}{Pr(D)}$$</p><p>通常，这需要评估边际似然$Pr(D)$，这在计算上是困难的。如果我们考虑两个假设的概率比率：</p><p>$$\frac{Pr(P|D)}{Pr(Q|D)} = \frac{Pr(D|P)}{Pr(D|Q)} \cdot \frac{Pr(P)}{Pr(Q)}$$</p><p>边际似然$Pr(D)$被消去。取对数后结果如下：</p><p>$$\log \frac{Pr(P|D)}{Pr(Q|D)} = \log \frac{p(D)}{q(D)} + \log \frac{Pr(P)}{Pr(Q)}$$</p><p>后验对数概率比率只是先验对数概率比率加上 I. J. Good 所称的<strong>evidence权重</strong>$D$：</p><p>$$w[P/Q; D] \equiv \log \frac{p(D)}{q(D)}$$</p><p>在这种解释下，KL 散度就是在假设$P$为真时，每次观察提供的$P$相对于$Q$的evidence的期望。</p><h3 id="3-最小化KL散度">3. 最小化KL散度</h3><p>在具体问题时，我们往往需要对KL散度进行最小化。</p><h4 id="3-1-正向与反向-KL">3.1 正向与反向 KL</h4><p>KL 散度的非对称性意味着，通过最小化$D_{KL}(p | q)$（也称为正向 KL ）来寻找一个接近于$p$的分布$q$，与通过最小化$D_{KL}(q | p)$（也称为反向 KL ）来寻找$q$会有一定区别。</p><p><strong>示例：</strong> 考虑一个双峰分布$p$，我们用一个单峰高斯分布$q$来近似。为了防止$D_{KL}(p | q)$变为无穷大，我们必须当$p &gt; 0$时有$q &gt; 0$（即$q$必须在$p$的每个非零点上都有支持），因此$q$会覆盖两个峰，这称为<strong>模式覆盖（mode-covering）或零避免行为（orange curve）</strong>。相反，为了防止$D_{KL}(q | p)$变为无穷大，我们必须有$q = 0$当$p = 0$时，这会导致<strong>模式追寻（mode-seeking）或零强制行为（green curve）</strong>。</p><p>![](/images/Fundamentals-Information theory/4.png)</p><h4 id="3-2-矩（Moment）投影（模式覆盖）">3.2 矩（Moment）投影（模式覆盖）</h4><p>当我们通过最小化正向 KL 来计算$q$时：</p><p>$$q = \arg \min_q D_{KL}(p | q)$$</p><p>我们不妨假设$q$是一种指数族分布：</p><p>$$q(x) = h(x) \exp\left[\eta^T T(x) - \log Z(\eta)\right]$$</p><p>最优性的一阶条件如下：</p><p>$$\frac{\partial \eta_i D_{KL}(p | q)}{\partial \eta_i} = -\frac{\partial \eta_i}{\partial \eta_i} \int p(x) \log q(x) dx$$</p><p>继续推导可得：</p><p>$$\begin{align*} \partial_{\eta_i} D_{KL}(p | q) &amp;= -\partial_{\eta_i} \int p(x) \log q(x) , dx  \ &amp;= -\partial_{\eta_i} \int p(x) \left( \eta^T T(x) - \log Z(\eta) \right) , dx  \ &amp;= -\partial_{\eta_i} \int \left(  p(x) T_i(x) , dx - E_{q(x)}[T_i(x)] \right)dx  \ &amp;= -E_{p(x)}[T_i(x)] + E_{q(x)}[T_i(x)] = 0  \end{align*}$$</p><p>可以看到，当梯度为0时候，最优的$q$匹配$p$的矩，因此该过程称为<strong>矩匹配（moment matching）</strong>。这种优化被称<strong>矩投影（M-projection）。</strong></p><p><strong>示例：</strong> 假设真实目标分布$p$是一个相关的二维高斯分布：</p><p>$$p(x) = N(x|\mu, \Sigma) = N(x|\mu, \Lambda^{-1})$$</p><p>我们将其近似为一个由两个一维高斯分布组成的分布$q$：</p><p>$$q(x|m, V) = N(x_1|m_1, v_1) N(x_2|m_2, v_2)$$</p><p>进行矩匹配后，最优的$q$形状为：</p><p>$$q(x) = N(x_1|\mu_1, \Sigma_{11}) N(x_2|\mu_2, \Sigma_{22})$$</p><p>如下图所示，结果分布$q$覆盖了$p$，即模式覆盖。</p><p>![](/images/Fundamentals-Information theory/5.png)</p><h4 id="3-3-信息（Information）投影（模式追寻）">3.3 信息（Information）投影（模式追寻）</h4><p>现在假设我们通过最小化反向 KL 来计算$q$：</p><p>$$q = \arg \min_q D_{KL}(q | p)$$</p><p>这称为<strong>信息投影（I-projection）</strong>。这个优化问题通常更容易计算，因为目标需要对$q$进行期望计算，而我们可以选择一个可处理的分布族。</p><p><strong>示例：</strong> 考虑真实分布是一个全协方差高斯分布：</p><p>$$p(x) = N(x|\mu, \Lambda^{-1})$$</p><p>并让$q$为对角高斯分布：</p><p>$$q(x) = N(x|m, \text{diag}(v))$$</p><p>可以证明，最优的变分参数为：</p><p>$$m = \mu$$<br>$$v_i = \Lambda^{-1}_{ii}$$</p><p>证明过程如下：</p><p>![](/images/Fundamentals-Information theory/6.png)</p><p>![](/images/Fundamentals-Information theory/7.png)</p><p>如下图所示，我们看到后验方差过于狭窄，即近似后验过于自信。然而，值得注意的是，最小化反向 KL 并不总是导致过于紧凑的近似。</p><p>![](/images/Fundamentals-Information theory/8.png)</p><h3 id="4-KL-散度的重要性质">4. KL 散度的重要性质</h3><h4 id="4-1-压缩引理（Compression-lemma）">4.1 压缩引理（Compression lemma）</h4><p>一个KL散度的重要的通用结论是<strong>压缩引理</strong>，其指出，对于任何分布$P$和$Q$，以及在这些分布的定义域上定义的标量函数$ϕ$，都有以下不等式：</p><p>$$E_P[ϕ] \leq \log E_Q\left[e^{ϕ}\right] + D_{KL}(P | Q)$$</p><p><strong>证明过程：</strong></p><p>考虑分布$g(x)$：<br>$$g(x) = \frac{q(x)}{Z} e^{ϕ(x)}$$</p><p>其中$Z$是分区函数：<br>$$Z = \int dx , q(x) e^{ϕ(x)}$$</p><p>计算$D_{KL}(P | G)$：<br>$$D_{KL}(P | G) = D_{KL}(P | Q) - E_P[ϕ(x)] + \log(Z) \geq 0$$</p><p>压缩引理的另一种形式是 <strong>Donsker-Varadhan 变分</strong>表示：</p><p>$$D_{KL}(P | Q) = \sup_{ϕ} \left( E_P[ϕ(x)] - \log E_Q\left[e^{ϕ(x)}\right] \right)$$</p><p>这样我们便为KL散度提供了一个下界。</p><h4 id="4-2-KL-散度的数据处理不等式（Data-processing-inequality-for-KL）">4.2 KL 散度的数据处理不等式（Data processing inequality for KL）</h4><p><strong>数据处理不等式</strong>表明，任何对来自两个不同分布的样本进行处理的操作都会使这两个样本趋向彼此。具体来说，考虑两个不同的分布$p(x)$和$q(x)$，通过概率通道$t(y|x)$处理后，得到的分布满足：</p><p>$$D_{KL}(p(x) | q(x)) \geq D_{KL}(p(y) | q(y))$$</p><p>证明过程：</p><p>$$\begin{align*} D_{KL} (p(x) | q(x)) &amp;= \int dx , p(x) \log \frac{p(x)}{q(x)} \ &amp;= \int dx , \int dy , p(x) t(y|x) \log \frac{p(x) t(y|x)}{q(x) t(y|x)} \ &amp;= \int dx , \int dy , p(x, y) \log \frac{p(x, y)}{q(x, y)} \ &amp;= -\int dy , p(y) \int dx , p(x|y) \log \frac{q(x, y)}{p(x, y)} \ &amp;\geq - \int dy , p(y) \log \left( \int dx , p(x|y) \frac{q(x, y)}{p(x, y)} \right) \ &amp;= - \int dy , p(y) \log \left( \frac{q(y)}{p(y)} \int dx , q(x|y) \right) \ &amp;= \int dy , p(y) \log \frac{p(y)}{q(y)} \&amp;= D_{KL} (p(y) | q(y)) \end{align*}$$</p><p><strong>数据处理不等式</strong>表明，对随机样本的任何处理都会使这两个分布更难以区分，即这样导致了信息的损失。</p><h3 id="5-KL散度与最大似然估计">5. KL散度与最大似然估计</h3><p>目标：我们希望找到一个分布$q$，使其与真实分布$p$的KL散度最小化：<br>$$q^* = \arg \min_q D_{KL}(p | q) =\arg \min_q (\int p(x) \log p(x) dx - \int p(x) \log q(x) dx)$$</p><p>经验分布：$p$是经验分布$p_D$​指的是它只在观察到的训练数据上有概率，其余地方为零：<br>$$p_D(x) = \frac{1}{N} \sum_{n=1}^N \delta(x - x_n)$$</p><p>其中$\delta$是<strong>狄拉克函数</strong>。</p><p>利用狄拉克函数的特性，可以推导出：<br>$$D_{KL}(p_D | q) = -\int p_D(x) \log q(x) dx + C = -\frac{1}{N} \sum_{n} \log q(x_n) + C$$</p><p>这里$C$是与$q$无关的常数。</p><p>可以将上述推导重写为：<br>$$D_{KL}(p_D | q) = H_{ce}(p_D, q) - H(p_D)$$</p><p>其中$H_{ce}$​ 是<strong>交叉熵</strong>，定义为：<br>$$H_{ce}(p, q) = -\sum_k p_k \log q_k$$</p><p>​交叉熵$H_{ce}(p_D, q)$是在训练集上评估$q$的平均负对数似然。</p><p>所以最小化KL散度与经验分布的过程等价于最大化似然，这意味着我们在训练过程中希望找到一个能很好地拟合训练数据的分布。</p><p>基于似然的训练方法过于依赖训练集。经验分布仅在有限的数据点上有概率质量，而在其它地方为零，这可能导致对真实分布的不合理假设。即使数据集很大，实际数据来源的空间通常更大，因此需要通过在“相似”输入之间共享概率质量来平滑经验分布。</p><h3 id="6-KL散度与贝叶斯推断">6. KL散度与贝叶斯推断</h3><p>贝叶斯推断可以被看作是一个特定的最小化问题，目标是使得新的联合分布$p(\theta, D)$尽可能接近先验分布$q(\theta, D)$，同时满足已知数据$D_0$​ 的约束条件：</p><p>$$p(\theta, D) = \arg\min D_{KL}(p(\theta, D) | q(\theta, D)) \quad \text{subject to} \quad p(D) = \delta(D - D_0)$$</p><p>这里$\delta(D - D_0)$是一个将所有质量集中在数据集$D_0$​ 上的狄拉克分布。</p><p>将KL散度写成链式法则的形式，可以得出：</p><p>$$D_{KL}(p(\theta, D) | q(\theta, D)) = D_{KL}(p(D) | q(D)) + D_{KL}(p(\theta|D) | q(\theta|D))$$</p><p>根据贝叶斯公式，我们有：</p><p>$$q(\theta, D) = q(D)q(\theta|D) = q(\theta)q(D|\theta) \Rightarrow q(\theta|D) = \frac{q(D|\theta) q(\theta)}{q(D)}$$</p><p>这里注意到$q(\theta|D)$与$q(D|\theta), q(\theta), q(D)$之间的关系，但它们都是同一分布的不同表示。</p><p>通过KL散度的链式法则，更新后的条件分布保持不变：</p><p>$$p(\theta|D) = q(\theta|D)$$</p><p>然而，关于参数的边际信念则会发生变化：</p><p>$$p(\theta) = \int dD , p(D)q(\theta|D)= ∫dDδ(D−D_0​)q(θ∣D)=q(θ∣D=D_0​)$$</p><p>这正是我们在观察到数据时，从先验信念更新得到的后验分布</p><p>这一更新过程的一个自然扩展是，如果我们有额外的测量误差，而这些误差是可理解的，那么我们不应将更新的信念完全依赖于观察数据的狄拉克函数，而应使用一个我们理解的分布$p(D)$。例如，我们可能不确切知道数据的精确值，但相信经过测量后，它呈现某种均值和标准差的高斯分布。</p><p>通过这种方式，参数的条件分布保持不变，但参数的边际概率则更新为：</p><p>$$p(\theta) = \int dD , p(D)q(\theta|D)$$</p><p>这个贝叶斯规则的广义形式有时被称为<strong>Jeffrey的条件化规则</strong>。</p><h3 id="7-KL散度与指数族">7. KL散度与指数族</h3><p>对于一个具有自然参数$\eta$、基础测度$h(x)$和充分统计量$T(x)$的指数族分布$p(x)$表示为：<br>$$p(x) = h(x) \exp\left[\eta^T T(x) - A(\eta)\right]$$</p><p>其中，$A(\eta) = \log Z$是对数分区函数，定义为：<br>$$A(\eta) = \log \int h(x) \exp(\eta^T T(x)) dx$$</p><p>对于同一指数族中的两个分布$p(x|\eta_1)$和$p(x|\eta_2)$，KL散度的闭式解为：<br>$$D_{KL}(p(x|\eta_1) | p(x|\eta_2)) = E_{\eta_1}\left[(\eta_1 - \eta_2)^T T(x) - A(\eta_1) + A(\eta_2)\right]$$</p><p>或者用期望表示为：<br>$$= (\eta_1 - \eta_2)^T \mu_1 - A(\eta_1) + A(\eta_2)$$</p><p>其中$\mu_j = E_{\eta_j}[T(x)]$。</p><p><strong>两个高斯分布的KL散度</strong></p><p>对于两个多元高斯分布$N(x|\mu_1, \Sigma_1)$和$N(x|\mu_2, \Sigma_2)$，KL散度为：</p><p>$$D_{KL}(N(x|\mu_1, \Sigma_1) | N(x|\mu_2, \Sigma_2)) = \frac{1}{2}\left[\text{tr}(\Sigma_2^{-1} \Sigma_1) + (\mu_2 - \mu_1)^T \Sigma_2^{-1} (\mu_2 - \mu_1) - D + \log\left(\frac{\det(\Sigma_2)}{\det(\Sigma_1)}\right)\right]$$</p><p>在标量情况下：</p><p>$$D_{KL}(N(x|\mu_1, \sigma_1) | N(x|\mu_2, \sigma_2)) = \log\left(\frac{\sigma_2}{\sigma_1}\right) + \frac{\sigma_1^2 + (\mu_1 - \mu_2)^2}{2\sigma_2^2} - \frac{1}{2}$$</p><h3 id="8-使用Fisher信息矩阵近似KL散度">8. 使用Fisher信息矩阵近似KL散度</h3><p>设$p_\theta(x)$和$p_{\theta’}(x)$是两个分布，其中$\theta’ = \theta + \delta$。KL散度可以表示为：<br>$$D_{KL}(p_\theta | p_{\theta’}) = E_{p_\theta(x)}\left[\log p_\theta(x) - \log p_{\theta’}(x)\right]$$</p><p>使用二阶泰勒展开进行近似：<br>$$D_{KL}(p_\theta | p_{\theta’}) \approx -\delta^T E\left[\nabla \log p_\theta(x)\right] - \frac{1}{2} \delta^T E\left[\nabla^2 \log p_\theta(x)\right] \delta$$</p><p>由于期望评分函数为零（第一项为0），我们得到：<br>$$D_{KL}(p_\theta | p_{\theta’}) \approx \frac{1}{2} \delta^T F(\theta) \delta$$</p><p>其中，Fisher信息矩阵定义为：<br>$$F = -E\left[\nabla^2 \log p_\theta(x)\right] = E\left[(\nabla \log p_\theta(x))(\nabla \log p_\theta(x))^T\right]$$</p><h3 id="9-与Bregman散度的关系">9. 与Bregman散度的关系</h3><p>设$f : \Omega \to \mathbb{R}$是一个在闭凸集$\Omega$上连续可微且严格凸的函数，Bregman散度定义为：<br>$$B_f(w | v) = f(w) - f(v) - (w - v)^T \nabla f(v)$$</p><p>这个定义可以理解为一个非线性度量，度量了点$w$与点$v$之间的距离。</p><p>引入函数的线性近似：<br>$$\hat{f}_v(w) = f(v) + (w - v)^T \nabla f(v)$$</p><p>Bregman散度实际上是实际值与线性近似值之间的差：<br>$$B_f(w | v) = f(w) - \hat{f}_v(w)$$</p><p>由于$f$是凸函数，因此有$B_f(w | v) \geq 0$。</p><p>如果$f(w) = |w|^2$，则$B_f(w | v) = |w - v|^2$表示平方欧几里得距离。</p><p>如果$f(w) = w^T Q w$，则Bregman散度表示为平方Mahalanobis距离。</p><p>如果$w$是指数族分布的自然参数，且$f(w) = \log Z(w) = A(w)$，则Bregman散度等同于KL散度。</p><p>$$\begin{align*} B_f(\eta_q | \eta_p) &amp;= A(\eta_q) - A(\eta_p) - (\eta_q - \eta_p)^T \nabla_{\eta_p} A(\eta_p) \ &amp;= A(\eta_q) - A(\eta_p) - (\eta_q - \eta_p)^T E_p[T(x)] \ &amp;= D_{KL}(p | q) \end{align*}$$</p><p>![](/images/Fundamentals-Information theory/9.png)</p><h2 id="二、熵">二、熵</h2><h3 id="1-离散随机变量的熵">1. 离散随机变量的熵</h3><p>离散随机变量$X$的熵$H(X)$定义为：</p><p>$$H(X) \equiv -\sum_{k=1}^{K} p(X = k) \log p(X = k) = -E_X[\log p(X)]$$</p><p>熵也可以用不同的对数底数表示，常用的是底数为 2（单位为 bits）或底数为$e$（单位为 nats）。熵可以表示为与均匀分布之间的 KL 散度的关系：</p><p>$$H(X) = \log K - D_{KL}(p(X) | u(X))$$</p><p>其中与均匀分布$u(X)$的 KL 散度为：</p><p>$$D_{KL}(p(X) | u(X)) = \sum_{k=1}^{K} p(X = k) \log p(X = k) - \frac{1}{K}$$</p><p>因此，如果$p$是均匀分布，KL 散度为零，熵达到最大值$\log K$。</p><p>特别的，对于二元随机变量$X \in {0, 1}$，我们可以表示为：</p><p>$$H(X) = -[p(X = 1) \log p(X = 1) + p(X = 0) \log p(X = 0)]$$</p><p>即：</p><p>$$H(X) = -[\theta \log \theta + (1 - \theta) \log(1 - \theta)]$$</p><p>这被称为二元熵函数$H(\theta)$。</p><p>![](/images/Fundamentals-Information theory/10.png)</p><h3 id="2-连续随机变量的微分熵">2. 连续随机变量的微分熵</h3><p>对于连续随机变量$X$及其概率密度函数$p(x)$，微分熵定义为：</p><p>$$h(X) \equiv -\int_X dx , p(x) \log p(x)$$</p><p>例如，$d$维高斯分布的熵为：</p><p>$$h(N(\mu, \Sigma)) = \frac{1}{2} \log |2\pi e \Sigma| = \frac{d}{2} + \frac{d}{2} \log(2\pi) + \frac{1}{2} \log |\Sigma|$$</p><p>在一维情况下：</p><p>$$h(N(\mu, \sigma^2)) = \frac{1}{2} \log(2\pi e \sigma^2)$$</p><p><strong>需要注意的是</strong>，与离散情况不同，微分熵可以为负值，因为概率密度函数可以大于1。</p><p>微分熵可以通过量化的有限精度来理解。可以证明，对于连续随机变量$X$的$n$位量化，熵近似为：</p><p>$$h(X) + n$$</p><p>以均匀分布为例子：</p><p>![](/images/Fundamentals-Information theory/11.png)</p><p>此外，微分熵缺乏<strong>重参数不变性</strong>。例如，如果我们变换随机变量$y = f(x)$，熵将会变换：</p><p>$$p(y) dy = p(x) dx \Rightarrow p(y) = p(x) \left|\frac{dy}{dx}\right|^{-1}$$</p><p>因此，微分熵变换为：</p><p>$$h(X) = -\int dx , p(x) \log p(x) = h(Y) - \int dy , p(y) \log \left|\frac{dy}{dx}\right|$$</p><p>这意味着，即使是简单的单位转换也会改变微分熵的值。</p><p>![](/images/Fundamentals-Information theory/12.png)</p><h3 id="3-典型集">3 典型集</h3><p>概率分布的典型集是信息内容接近于从该分布随机样本的期望信息内容的元素集合。更具体地，对于支持$x \in X$的分布$p(x)$，定义$\epsilon$-典型集$A^{N}_{ϵ} \subseteq X^N$为：</p><p>$$H(p(x)) - ϵ \leq -\frac{1}{N} \log p(x_1, \ldots, x_N) \leq H(p(x)) + ϵ$$</p><p>如果我们假设$p(x_1, \ldots, x_N) = \prod_{n=1}^{N} p(x_n)$，则中间项可以解释为 N-sample 的经验熵估计。**渐近均分性质（AEP）**表明，随着$N \to \infty$，这个值（在概率上）会收敛到真实的熵。因此，典型集的概率接近于 1，从而成为从$p(x)$生成的结果的compact summary。</p><h3 id="4-交叉熵和困惑度">4. 交叉熵和困惑度</h3><p>模型分布$q$与真实分布$p$之间距离的标准方法是 KL 散度：</p><p>$$D_{KL}(p | q) = \sum_{x} p(x) \log \frac{p(x)}{q(x)} = H_{ce}(p, q) - H(p)$$</p><p>其中，<strong>交叉熵</strong>$H_{ce}(p, q)$定义为：</p><p>$$H_{ce}(p, q) = -\sum_{x} p(x) \log q(x)$$</p><p>而$H(p) = H_{ce}(p, p)$是熵，它是与模型无关的常数。</p><p>在语言建模中，通常报告的替代性能度量称为<strong>困惑度</strong>，定义为：</p><p>$$\text{perplexity}(p, q) \equiv 2^{H_{ce}(p, q)}$$</p><p>可以通过以下方式计算交叉熵的经验近似： 假设我们用基于从$p$中采样的数据的经验分布来近似真实分布：</p><p>$$p_D(x|D) = \frac{1}{N} \sum_{n=1}^{N} I(x = x_n)$$</p><p>在这种情况下，交叉熵为：</p><p>$$H = -\frac{1}{N} \sum_{n=1}^{N} \log p(x_n) = -\frac{1}{N} \log \prod_{n=1}^{N} p(x_n)$$</p><p>相应的困惑度为：</p><p>$$\text{perplexity}(p_D, p) = 2^{-\frac{1}{N} \log\left(\prod_{n=1}^{N} p(x_n)\right)} = \left(\prod_{n=1}^{N} p(x_n)\right)^{-\frac{1}{N}} =  \sqrt[N]{\prod_{n=1}^{N} \frac{1}{p(x_n)}}$$</p><p>在语言模型中，我们通常在预测下一个单词时考虑前面的单词。例如，在二元模型中，我们使用二阶马尔可夫模型的形式$p(x_n|x_{n-1})$。假设模型预测每个单词是同样可能的，而与上下文无关，即$p(x_n|x_{n-1}) = \frac{1}{K}$，其中$K$是词汇表中的单词数量。此时，困惑度为：</p><p>$$\left(\left(\frac{1}{K}\right)^{N}\right)^{-\frac{1}{N}} = K$$</p><p>如果某些符号比其他符号更可能，且模型正确反映了这一点，则其困惑度将低于$K$。然而，我们有$H(p^<em>) \leq H_{ce}(p^</em>, p)$, 因此我们无法将困惑度降低到$2^{-H(p^*)}$之下。</p><h2 id="三、-互信息">三、 互信息</h2><p>KL散度告诉了我们如何衡量两个分布之间的区别，而两个分布之间的相关性则需要通过互信息来进行衡量。</p><h3 id="1-定义">1. 定义</h3><p><strong>互信息</strong>$I(X; Y)$衡量了随机变量$X$和$Y$之间的信息增益，定义为：<br>$$I(X; Y) \equiv D_{KL}(p(x, y) | p(x)p(y)) = \sum_{y \in Y} \sum_{x \in X} p(x, y) \log \frac{p(x, y)}{p(x)p(y)}$$<br>很容易看出，互信息是非负的：</p><p>$$I(X; Y) = D_{KL}(p(x, y) | p(x)p(y)) \geq 0$$</p><p>当且仅当$p(x, y) = p(x)p(y)$时，等号成立。</p><h3 id="2-解释">2. 解释</h3><p>互信息可以用联合熵和条件熵重新表示：</p><p>$$I(X; Y) = H(X) - H(X|Y) = H(Y) - H(Y|X)$$</p><p>这表明观察$Y$后，关于$X$的不确定性减少的值，反之亦然。此外，互信息还可以表示为：</p><p>$$I(X; Y) = H(X, Y) - H(X|Y) - H(Y|X)$$</p><p>或者：</p><p>$$I(X; Y) = H(X) + H(Y) - H(X, Y)$$</p><p>具体关系可以通过下面的图很直观的展示出来：</p><p>![](/images/Fundamentals-Information theory/13.png)</p><h3 id="3-数据处理不等式">3 数据处理不等式</h3><p>数据处理不等式表明，对于未知变量$X$，如果我们观察到它的噪声函数$Y$，并对噪声观测进行处理以生成新变量$Z$，则对未知量$X$的信息量不会增加。这可以形式化为：</p><p>$$I(X; Y) \geq I(X; Z)$$</p><p>证明如下：</p><p>$$I(X;Y,Z)=I(X;Z)+I(X;Y∣Z)=I(X;Y)+I(X;Z∣Y)$$</p><p>由于$X \perp Z | Y$，我们有$I(X; Z | Y) = 0$，因此：</p><p>$$I(X; Z) + I(X; Y | Z) = I(X; Y)$$</p><p>因为$I(X; Y | Z) \geq 0$，所以：</p><p>$$I(X; Y) \geq I(X; Z)$$</p><p>**数据处理不等式（Data Processing Inequality, DPI）**表明，在一个马尔可夫链$X \to Y \to Z$中，关于$X$的信息在通过$Y$传递到$Z$的过程中不会增加。</p><h3 id="4-充分统计量">4. 充分统计量</h3><p>设有链关系$\theta \to X \to s(X)$，其中$\theta$是待推断的参数，$X$是观测数据，$s(X)$是从数据中提取的统计量。通过数据处理不等式，得出$I(\theta; s(X)) \leq I(\theta; X)$。这意味着，通过$s(X)$获取的信息不可能超过通过$X$获取的信息。</p><p>当不等式成立为等式时，称$s(X)$是$X$的<strong>充分统计量</strong>。也就是说，知道$s(X)$就足够推断$\theta$，并且从$s(X)$可以重建$X$。</p><p>如果统计量$s(X)$包含关于$\theta$的所有相关信息，并且不包含冗余信息，则称$s(X)$是<strong>最小充分统计量</strong>。它最大限度地压缩数据，而不丢失与推断$\theta$相关的信息。</p><p>例如，对于$N$次伯努利试验，最小充分统计量是$N$和成功次数$N_1 = n$（即$I(X_n = 1)$）。对于已知方差的高斯分布，推断均值只需知道经验均值和样本数量。</p><p>指数族分布是最小充分统计量的代表，因为它们包含的信息仅限于某些统计量的约束。根据 <strong>Pitman-Koopman-Darmois 定理</strong>，只有在样本数量增加时，才存在具有有限维充分统计量的指数族分布。</p><h3 id="5-多元互信息">5. 多元互信息</h3><p>多元互信息主要用来衡量一组随机变量之间的相关性。</p><h4 id="5-1-总相关性（Total-Correlation）">5.1. 总相关性（Total Correlation）</h4><p>多元互信息最简单的定义之一是使用<strong>总相关性（Total Correlation）<strong>或</strong>多信息（Multi-Information）</strong>，定义为：<br>$$TC({X_1, \dots, X_D}) ≜ D_{KL} \left( p(x) \middle| \prod_{d} p(x_d) \right)$$</p><p>其等价表达式为：<br>$$TC({X_1, \dots, X_D}) = \sum_{d} H(x_d) - H(x)$$</p><p>其中，$H(x)$是联合熵，$H(x_d)$是边际熵。对三个变量$X, Y, Z$，总相关性为：<br>$$TC(X, Y, Z) = H(X) + H(Y) + H(Z) - H(X, Y, Z)$$</p><p>联合熵$H(X,Y,Z)$的定义是：<br>$$H(X, Y, Z) = - \sum_{x, y, z} p(x, y, z) \log p(x, y, z)$$</p><p>总相关性描述了所有变量之间的整体依赖关系。如果$p(x) = \prod_d p(x_d)$，即变量是独立的，那么总相关性为零。即使只有一对变量是相互依赖的，总相关性也会为正。</p><h4 id="5-2-相互作用信息（Interaction-Information-Co-Information）">5.2. 相互作用信息（Interaction Information, Co-Information）</h4><p>为了克服总相关性只要任意两个变量相互作用就为正的缺点，可以引入<strong>多元互信息（multivariate mutual information (MMI)），<strong>也叫做</strong>相互作用信息（Interaction Information）<strong>或者</strong>共信息（Co-Information）</strong>。这个定义基于条件互信息的递归定义：<br>$$I(X_1; \dots ; X_D) = I(X_1; \dots ; X_{D-1}) - I(X_1; \dots ; X_{D-1} | X_D)$$</p><p>对于三个变量$X, Y, Z$，其定义为：<br>$$I(X; Y; Z) = I(X; Y) - I(X; Y | Z)$$</p><p>这可以解释为：当条件变量$Z$已知时，互信息$I(X;Y)$的变化。同样，可以写成：<br>$$I(X; Y; Z) = I(X; Z) - I(X; Z | Y)$$<br>$$I(X; Y; Z) =I(Y; Z) - I(Y; Z | X)$$</p><p>这意味着：相互作用信息是两个变量之间的互信息在条件第三个变量已知时的变化。<br>根据条件互信息的定义，可以推导出：<br>$$I(X; Z | Y) = I(Z; X, Y) - I(Y; Z)$$</p><p>因此，式子可以重新写成：<br>$$I(X; Y; Z) = I(X; Z) + I(Y; Z) - I(X, Y; Z)$$</p><p>这说明，相互作用信息是变量$X$和$Y$单独提供的关于$Z$的信息与它们联合提供的信息之间的差异。</p><p>上面的关系可以通过下面的图来直观展示：</p><p>![](/images/Fundamentals-Information theory/14.png)</p><h4 id="5-3-协同与冗余（Synergy-and-Redundancy）">5.3. 协同与冗余（Synergy and Redundancy）</h4><p>相互作用信息$I(X; Y; Z)$可以为正、零或负，取决于变量之间的关系：</p><ul><li>如果$I(X; Z) + I(Y; Z) &gt; I(X, Y; Z)$，说明$X$和$Y$提供了关于$Z$的冗余信息，此时$I(X; Y; Z) &gt; 0$。</li><li>如果$I(X; Z) + I(Y; Z) &lt; I(X, Y; Z)$，说明联合观察$X$和$Y$提供了额外的关于$Z$的信息，存在协同作用，此时$I(X; Y; Z) &lt; 0$。</li></ul><h4 id="5-4-相互作用信息与因果关系（MMI-and-Causality）">5.4. 相互作用信息与因果关系（MMI and Causality）</h4><p>MMI 的符号可以用于区分不同的有向图模型，这些模型有时可以用来解释因果关系。例如：</p><p>共同原因模型（Common Cause Model）：例如$X \leftarrow Z \rightarrow Y$，其中$Z$是$X$和$Y$的共同原因。此时，条件化在$Z$上会使$X$和$Y$独立，因此$I(X; Y | Z) \leq I(X; Y)$，所以$I(X; Y; Z) \geq 0$。</p><p>共同结果模型（Common Effect Model）：例如$X \rightarrow Z \leftarrow Y$，其中$Z$是$X$和$Y$的共同结果。此时，条件化在$Z$上会使$X$和$Y$相关，因此$I(X; Y | Z) \geq I(X; Y)$，所以$I(X; Y; Z) \leq 0$。</p><p>同样，对于$X \rightarrow Z \rightarrow Y$，此时，条件化在$Z$上会使$X$和$Y$独立，因此$I(X; Y | Z) \leq I(X; Y)$，所以$I(X; Y; Z) \geq 0$。</p><h4 id="5-5-相互作用信息与熵的关系（MMI-and-Entropy）">5.5. 相互作用信息与熵的关系（MMI and Entropy）</h4><p>MMI 还可以用熵来表达。我们知道：<br>$$I(X; Y) = H(X) + H(Y) - H(X, Y)$$</p><p>和<br>$$I(X; Y | Z) = H(X, Z) + H(Y, Z) - H(Z) - H(X, Y, Z)$$</p><p>因此，可以将$I(X; Y; Z)$重新写为：<br>$$I(X; Y; Z) = [H(X) + H(Y) + H(Z)] - [H(X, Y) + H(X, Z) + H(Y, Z)] + H(X, Y, Z)$$</p><p>跟集合比较相似。对于多个变量，MMI 可以推广为：<br>$$I(X_1, \dots, X_D) = - \sum_{T \subseteq {1, \dots, D}} (-1)^{|T|} H(T)$$</p><p>对于大小为 1, 2 和 3 的变量集，其展开为：<br>$$I_1 = H_1$$</p><p>$$I_{12} = H_1 + H_2 - H_{12}$$</p><p>$$I_{123} = H_1 + H_2 + H_3 - H_{12} - H_{13} - H_{23} + H_{123}$$</p><p>通过 <strong>Möbius 反演公式</strong>，可以得到熵和互信息的对偶关系：<br>$$H(S) = - \sum_{T \subseteq S} (-1)^{|T|} I(T)$$</p><p>使用链式规则，我们还可以得到 3 变量互信息的另一种形式：<br>$$I(X; Y; Z) = H(Z) - H(Z | X) - H(Z | Y) + H(Z | X, Y)$$</p><h3 id="6-互信息的变分界限">6. 互信息的变分界限</h3><p>在直接计算互信息不可行的情况下，我们有一些估计其上界和下界的方法。</p><h4 id="6-1-上界（Upper-Bound）">6.1 上界（Upper Bound）</h4><p>假设联合分布$p(x, y)$难以直接计算，但我们可以从$p(x)$采样，并且能够计算条件分布$p(y|x)$。同时我们用$q(y)$来近似$p(y)$，此时互信息可以表示为：</p><p>$$I(x; y) = \mathbb{E}<em>{p(x,y)}\left[ \log \frac{p(y|x)}{q(y)} \right] - D</em>{KL}(p(y) \parallel q(y))$$</p><p>通过去掉KL散度项，我们得到一个互信息的上界：</p><p>$$I(x; y) \leq \mathbb{E}<em>{p(x)}\left[ D</em>{KL}(p(y|x) \parallel q(y)) \right]$$</p><p>该上界是当$q(y) = p(y)$时等号成立。</p><p>![](/images/Fundamentals-Information theory/15.png)</p><p>可以这么理解，互信息$I(Y; X) = H(Y) - H(Y | X)$，我们假设已知$p(y|x)$，因此可以很好地估计条件熵$H(Y | X)$。然而，关于边缘熵$H(Y)$，我们无法直接知道，所以我们用某个分布$q(y)$来对其进行上界估计。由于KL散度是非负的，因此我们的模型$q(y)$无法比真实的$p(y)$表现得更好，这意味着我们对$H(Y)$的估计总是偏大的，从而得到了互信息的估计的一个上界。</p><h4 id="6-2-BA下界（BA-Lower-Bound）">6.2 BA下界（BA Lower Bound）</h4><p>假设我们可以计算$p(x)$，并且用$q(x|y)$来近似$p(x|y)$。那么互信息的变分下界为：</p><p>$$\begin{align*} I(x; y) &amp;= \mathbb{E}<em>{p(x,y)} \left[ \log \frac{p(x|y)}{p(x)} \right] \         &amp;= \mathbb{E}</em>{p(x,y)} \left[ \log \frac{q(x|y)}{p(x)} \right] + \mathbb{E}<em>{p(y)} \left[ D</em>{\mathrm{KL}} (p(x|y) \parallel q(x|y)) \right] \         &amp;\geq \mathbb{E}<em>{p(x,y)} \left[ \log \frac{q(x|y)}{p(x)} \right] \         &amp;= \mathbb{E}</em>{p(x,y)} \left[ \log q(x|y) \right] + h(x) \end{align*}$$</p><p>这首先被Barber和Agakov提出，所以叫做<strong>BA下界</strong>。它的关键思想是使用容易计算的$q(x|y)$来近似$p(x|y)$，从而给出互信息的下界。</p><h4 id="6-3-NWJ下界（NWJ-Lower-Bound）">6.3 NWJ下界（NWJ Lower Bound）</h4><p>NWJ下界是通过重新参数化$q(x|y)$得到的。我们可以设：</p><p>$$q(x|y) = \frac{p(x)e^{f(x,y)}}{Z(y)}$$</p><p>其中$Z(y) = \mathbb{E}_{p(x)} \left[ e^{f(x,y)} \right]$是归一化常数。这样我们可以得到新的变分下界：</p><p>$$\begin{align*}  \mathbb{E}<em>{p(x,y)} \left[ \log \frac{p(x) e^{f(x,y)}}{p(x) Z(y)} \right] &amp;= \mathbb{E}</em>{p(x,y)} \left[ f(x, y) \right] - \mathbb{E}<em>{p(y)} \left[ \log Z(y) \right] \ &amp;= \mathbb{E}</em>{p(x,y)} \left[ f(x, y) \right] - \mathbb{E}<em>{p(y)} \left[ \log \mathbb{E}</em>{p(x)} \left[ e^{f(x,y)} \right] \right] \ &amp;\equiv I_{\text{DV}}(X; Y)  \end{align*}$$</p><p>这被叫做<strong>Donsker-Varadhan下界</strong>，为了进一步简化，可以用线性上界来逼近log函数</p><p>$$\log x \leq \frac{x}{a} + \log a - 1$$</p><p>最终得到<strong>NWJ下界</strong>的形式如下：</p><p>$$I(X; Y) \geq \mathbb{E}<em>{p(x,y)} \left[ f(x, y) \right] - e^{-1} \mathbb{E}</em>{p(y)} Z(y) \equiv I_{\text{NWJ}}(X; Y)$$</p><p>这个下界不需要归一化的分布（实践中我们使用蒙特卡洛采样估计就行），因此更易于计算。</p><h4 id="6-4-InfoNCE下界（InfoNCE-Lower-Bound）">6.4 InfoNCE下界（InfoNCE Lower Bound）</h4><p>如果我们对<strong>DV下界</strong>进行多样本扩展，则可以得到<strong>InfoNCE下界</strong>。即对于每个样本$(x_i, y_i)$，我们不只考虑它本身的联合分布，而是通过和其他样本进行对比来估计 mutual information。</p><p>假设我们有$K$对样本${(x_i, y_i)}_{i=1}^K$​ ，其中$x_i$​ 和$y_i$来自联合分布$p(x, y)$，而$y_j$（对于$i \neq j$）来自边缘分布$p(y)$。为每一对$(x_i, y_i)$，我们希望通过对比它与其他负样本（$(x_i, y_j)$其中$j \neq i$）来计算 mutual information。最终其形式为：</p><p>$$I_{NCE} = \mathbb{E} \left[ \frac{1}{K} \sum_{i=1}^{K} \log \frac{e^{f(x_i, y_i)}}{\frac{1}{K} \sum_{j=1}^{K} e^{f(x_i, y_j)}} \right]$$</p><p>![](/images/Fundamentals-Information theory/16.png)</p><p>其中，$f(x_i, y_i)$是可学习的判别函数，表示$x_i$​ 和$y_i$​ 的关联性。这样便通过对比联合分布和边缘分布的采样来估计互信息。InfoNCE下界的一个缺点是，如果互信息较大，则需要较大的样本数$K$来得到准确的估计。</p><h3 id="7-相关网络（Relevance-Networks）">7. 相关网络（Relevance Networks）</h3><p><strong>相关网络</strong>是通过一组相关变量来构建的图网络。在这个网络中，如果两个变量$X_i$和$X_j$之间的互信息高于某个阈值，就会在它们之间添加一条边。这种方法可以应用于高斯分布情况下的变量，也可以扩展到离散随机变量。</p><p>在高斯分布情况下，两个变量之间的互信息可以通过它们的**相关系数（Correlation Coefficient）**计算，公式为：<br>$$I(X_i ; X_j ) = -\frac{1}{2} \log(1 - \rho_{ij}^2)$$</p><p>其中$\rho_{ij}$是$X_i$和$X_j$的相关系数。这种情况下的图称为协方差图（Covariance Graph）。</p><p>相关网络有一个主要问题：它通常会产生非常稠密的图。因为大多数变量在一定程度上都会与其他大多数变量相互依赖，即使我们对互信息进行了阈值处理，图中仍可能存在大量的边。例如：</p><p>假设$X_1$​ 直接影响$X_2$​，而$X_2$​ 又直接影响$X_3$​，此时它们组成了一个信号传导，$X_1 \to X_2 \to X_3$。在这种情况下，$X_1$和$X_3$​ 之间也会有非零的互信息，因此会有一条$1-3$的边，虽然它们之间没有直接的依赖关系。这样，图可能会在很多情况下甚至会变得完全连接。</p><h2 id="四-数据压缩（源编码）">四. 数据压缩（源编码）</h2><p>数据压缩是信息理论的核心内容之一，也与概率机器学习密切相关。其基本思想是，我们对数据样本的不同种类建模，并且能够为出现频率最高的那些种类分配短的编码字，为出现频率较低的种类保留更长的编码。因此，数据压缩的能力需要发现数据中的潜在模式及其相对频率。</p><h3 id="1-无损压缩（Lossless-Compression）">1. 无损压缩（Lossless Compression）</h3><p>对于离散数据（如自然语言），总是可以以一种方式进行压缩，使我们能够唯一地恢复原始数据。这称为无损压缩。<strong>克劳德·香农</strong>证明了，从分布$p$中获取的数据所需的平均比特数至少为$H(p)$，这被称为<strong>源编码定理</strong>。</p><p>根据源编码定理，期望所需的比特数$R$满足以下不等式：</p><p>$$R \geq H(p)$$</p><p>其中$H(p)$是分布$p$的熵。使用非真实模型$q$进行压缩会导致多出的比特数，这正是 KL 散度的非负性所表明的。具体地，</p><p>$$H_{ce}(p, q) \geq H(p)$$</p><p>其中$H_{ce}(p, q)$是使用模型$q$对数据进行压缩时的交叉熵。</p><p>常见的无损编码技术包括 Huffman 编码、算术编码和非对称数字符号系统（Asymmetric Numeral Systems）等。</p><h3 id="2-有损压缩与率失真权衡（Lossy-Compression-and-the-Rate-Distortion-Tradeoff）">2. 有损压缩与率失真权衡（Lossy Compression and the Rate-Distortion Tradeoff）</h3><p>对于实值信号（如图像和声音），首先需要对信号进行量化，得到一系列符号。然后可以使用无损编码方法来压缩这些离散符号序列。但是，在解压缩时会丢失一些信息，因此这种方法称为有损压缩。</p><p>有损压缩中存在一个重要的权衡关系，即压缩表示的大小（使用的符号数量）和由此产生的误差之间的权衡。我们使用了**变分信息瓶颈（Variational Information Bottleneck）**的术语来量化这种权衡，尤其是在无监督设置下。</p><ul><li><strong>Distortion</strong>$D$<strong>的定义</strong>：</li></ul><p>我们可以通过编码解码模型，假设有一个随机编码器$e(z|x)$、一个随机解码器$d(x|z)$和一个先验边际$m(z)$,我们可以得到最终损失信息，即对失真的量化$D$如下：</p><p>$$D = - \int p(x) \int e(z|x) \log d(x|z) , dz , dx$$</p><p>如果解码器$d(x|z)$是一个确定性模型加上高斯噪声$N(x | f_d(z), \sigma^2)$，而编码器$e(z|x)$是确定性的$\delta(z - f_e(x))$，那么可以简化为：</p><p>$$D = \frac{1}{\sigma^2} \mathbb{E}_{p(x)} | f_d(f_e(x)) - x |_2^2$$</p><p>![](/images/Fundamentals-Information theory/17.png)</p><ul><li><strong>Rate</strong>$R$<strong>的定义：</strong></li></ul><p>$$\begin{align*} R &amp;= \int p(x) \int e(z|x) \log \frac{e(z|x)}{m(z)} , dz , dx \&amp;=\mathbb{E}<em>{p(x)}[ H</em>{ce}​(e(z|x),m(z))−H(e(z|x))] \end{align*}$$</p><p>这里$m(z)$是先验边际分布。通过 KL 散度的平均来定义了这个率：</p><p>$$R = \mathbb{E}<em>{p(x)} \left[ D</em>{KL}(e(z|x) | m(z)) \right]$$</p><p>这反映的是$z$后验分布与$z$的边缘分布的区别。如果我们使用$m(z)$来设计一个最优编码，那么$R$就是使用$m(z)$而不是实际的后验分布$p(z) = \int dx , p(x)e(z|x)$进行编码时所需支付的额外比特数。</p><p>![](/images/Fundamentals-Information theory/18.png)</p><ul><li><strong>Rate-Distortion Bounds：</strong></li></ul><p>根据前面提到的<strong>互信息的变分界限（BA下界和上界）</strong>，我们有以下不等式：</p><p>$$H - D \leq I(x; z) \leq R$$</p><p>其中$H$是（微分）熵。</p><ul><li><strong>Rate-Distortion Curve：</strong></li></ul><p>可实现的$R$和$D$值形成的曲线称为<strong>率失真曲线（Rate-Distortion Curve）</strong>。这条曲线展示了在不同$R$和$D$条件下的可达值。例如，当$D = 0$时，我们可以完美地编码和解码数据，此时$R \geq H$，即所需的最小比特数为数据的熵。</p><p>![](/images/Fundamentals-Information theory/19.png)</p><p>水平的底线对应于零失真设置，即$D = 0$。这可以通过使用$e(z|x) = \delta(z - x)$的简单编码器来实现。</p><p>左侧的垂直线对应于零率设置，即潜变量与$z$独立。在这种情况下，解码器$d(x|z)$与$z$无关。即此时$I(x; z)$为0。这种模型能够达到的最小失真仍然是数据的熵，即$D \geq H$。</p><p>使用互信息的变分界限可以更精确地刻画率和失真之间的权衡关系。实际上，我们无法在对角线上达到点，因为这要求在不等式中均取等号，即需要我们的模型$e(z|x)$和$d(x|z)$是完美的，这被称为“非参数限制”。在有限数据设置中，我们总会产生额外的误差，因此 RD 曲线会向上偏移。</p><p>我们可以通过最小化以下目标函数$J$来生成不同的解决方案：</p><p>$$J = D + \beta R$$</p><p>其中：$D$是失真（distortion），表示编码与解码之间的误差。$R$是rate，表示编码所需的比特数。$\beta$是一个权重超参数，用于调节失真和rate之间的平衡。</p><p>目标函数可以展开为：</p><p>$$J = \int dx , p(x) \int dz , e(z|x) \left( -\log d(x|z) + \beta \log \frac{e(z|x)}{m(z)} \right)$$</p><p>当$\beta = 1$时，公式与变分自编码器（VAE）目标一致:</p><p>$$\mathcal{L} = - (D + R) = E_{p(x)} \left[ E_{e(z|x)}[\log d(x|z)] - E_{e(z|x)} \left[ \log \frac{e(z|x)}{m(z)} \right] \right]$$</p><h3 id="3-信息瓶颈（The-information-bottleneck）">3. 信息瓶颈（The information bottleneck）</h3><h4 id="3-1-原版信息瓶颈（Vanilla-IB）">3.1 原版信息瓶颈（Vanilla IB）</h4><p>信息瓶颈（The information bottleneck）的目标是通过引入一个中间表示$z$，在输入$x$和输出$y$之间传递信息。我们说$z$是$x$的表示，可以用条件分布$p(z|x)$来描述。</p><ul><li><strong>充分性</strong>：表示$z$对于任务$y$是充分的，条件为$y \perp x | z$，或等价于$I(z; y) = I(x; y)$，即$H(y|z) = H(y|x)$。</li><li><strong>最小充分统计量</strong>：如果$z$是充分的，并且没有其他$z$具有更小的$I(z; x)$值，则称其为最小充分统计量。</li></ul><p>目标是找到一个表示$z$，使得$I(z; y)$最大化，同时$I(z; x)$最小化，即优化以下目标：</p><p>$$\min_\beta I(z; x) - I(z; y)$$</p><p>其中$\beta \geq 0$，优化的分布为$p(z|x)$和$p(y|z)$。</p><p>在信息瓶颈原理中，我们假设$Z$是$X$的一个函数，但与$Y$独立，形成图模型$Z \leftarrow X \rightarrow Y$。这对应于以下联合分布：</p><p>$$p(x, y, z) = p(z|x) p(y|x) p(x)$$</p><p>这表明$Z$可以捕捉$X$的任何信息，但不能包含仅与$Y$相关的信息。优化的表示只捕获对$Y$有用的关于$X$的信息，并且$Z$应该最小化对$X$的信息，以避免“浪费容量”。</p><p>![](/images/Fundamentals-Information theory/20.png)</p><p>如果所有随机变量都是离散的，并且$z = e(x)$是$x$的确定性函数，则可以使用传统算法来最小化信息瓶颈目标。如果所有变量都是联合高斯的，目标也可以通过解析求解。但一般情况下，精确求解该问题是不可行的。</p><h4 id="3-2-变分信息瓶颈（Variational-IB）">3.2. 变分信息瓶颈（Variational IB）</h4><p>根据 KL 散度的非负性，我们介绍到对于任意分布$q$，有：</p><p>$$\int dx p(x) \log p(x) \geq \int dx p(x) \log q(x)$$</p><p>首先定义符号：</p><p>*$e(z|x) = p(z|x)$：编码器<br>*$b(z|y) \approx p(z|y)$：反向编码器<br>*$d(y|z) \approx p(y|z)$：分类器（解码器）<br>*$m(z) \approx p(z)$：边际分布</p><p>推导$I(z; y)$：</p><p>$$\begin{align*} I(z; y) &amp;= \int ! dydz , p(y, z) \log \frac{p(y, z)}{p(y)p(z)} \ &amp;= \int ! dydz , p(y, z) \log p(y|z) - \int ! dydz , p(y, z) \log p(y) \ &amp;= \int ! dydz , p(z)p(y|z) \log p(y|z) - \text{const} \ &amp;\geq \int ! dydz , p(y, z) \log d(y|z) \ &amp;= \langle \log d(y|z) \rangle \end{align*}$$</p><p>这里利用了$H(p(y))$是与表示无关的常量。符号$\langle \cdot \rangle$表示对联合分布$p(x, y, z)$相关项的期望值</p><p>随后，通过从$p(y, z) = \int dx , p(x)p(y|x)p(z|x)$采样，近似求期望值。</p><p>同样地，我们可以推导$I(z; x)$的上界：</p><p>$$\begin{align*} I(z; x) &amp;= \int dzdx , p(x, z) \log \frac{p(z, x)}{p(x)p(z)} \ &amp;= \int dzdx , p(x, z) \log p(z|x) - \int dz , p(z) \log p(z) \ &amp;\leq \int dzdx , p(x, z) \log p(z|x) - \int dz , p(z) \log m(z) \ &amp;= \int dzdx , p(x, z) \log \frac{e(z|x)}{m(z)} \ &amp;= \langle \log e(z|x) \rangle - \langle \log m(z) \rangle \end{align*}$$</p><p>通过近似从$p(x, z) = p(x)p(z|x)$采样，我们可以计算期望。</p><p>综合以上结果，我们得到信息瓶颈目标函数的上界：</p><p>$$\beta I(x; z) - I(z; y) \leq \beta (\langle \log e(z|x) \rangle - \langle \log m(z) \rangle) - \langle \log d(y|z) \rangle$$</p><p>因此，VIB 的<strong>目标函数</strong>可以表示为：</p><p>$$\begin{align*} L_{VIB} &amp;= \beta , \mathbb{E}<em>{p_D(x)e(z|x)} \left[ \log e(z|x) - \log m(z) \right] - \mathbb{E}</em>{p_D(x)e(z|x)d(y|z)} \left[ \log d(y|z) \right] \ &amp;= -\mathbb{E}<em>{p_D(x)e(z|x)d(y|z)} \left[ \log d(y|z) \right]  + \beta , \mathbb{E}</em>{p_D(x)} \left[ D_{KL} \left( e(z|x) \parallel m(z) \right) \right] \end{align*}$$</p><p>这个目标函数可以通过随机梯度下降（SGD）对编码器、解码器和边际分布的参数进行最小化。我们假设这些分布是可重参数化的。对于编码器$e(z|x)$，通常使用条件高斯分布；对于解码器$d(y|z)$，通常使用 softmax 分类器。对于边际分布$m(z)$，由于其需要近似聚合的后验分布$p(z)$，通常使用灵活的模型，比如高斯混合模型。</p><p>![](/images/Fundamentals-Information theory/21.png)</p><h4 id="3-3-条件熵瓶颈（Conditional-Entropy-Bottleneck）">3.3 条件熵瓶颈（Conditional Entropy Bottleneck）</h4><p>信息瓶颈的基本目标是最大化互信息$I(Z; Y)$的同时最小化互信息$I(Z; X)$。可以表示为：</p><p>$$\min I(X; Z) - \lambda I(Y; Z) \quad (\lambda \geq 0)$$</p><p>然而，从信息图的视角来看，$I(Z; X)$中包含了一些与$Y$相关的信息。一个合理的替代目标是最小化残余互信息$I(X; Z | Y)$：</p><p>$$\min I(X; Z | Y) - \lambda’ I(Y; Z) \quad (\lambda’ \geq 0)$$</p><p>这就是<strong>条件熵瓶颈（CEB）</strong>。</p><p>![](/images/Fundamentals-Information theory/22.png)</p><p>我们假设$p(Z | X, Y) = p(Z | X)$，则根据条件互信息的定义：</p><p>$$I(X; Z | Y) = I(X; Z) - I(Y; Z)$$</p><p>因此，CEB 可以看作是标准的 IB 方法，当$\lambda’ = \lambda + 1$时，两者等价。</p><p>![](/images/Fundamentals-Information theory/23.png)</p><p>相较于$I(X; Z)$，$I(X; Z | Y)$的上界更容易确定，因为我们在$Y$的条件下进行计算。利用$p(Z | X, Y) = p(Z | X)$的性质，可以得出：</p><p>$$\begin{align*} I(X; Z | Y) &amp;= I(X; Z) - I(Y; Z) \ &amp;= H(Z) - H(Z | X) - [H(Z) - H(Z | Y)] \ &amp;= - H(Z | X) + H(Z | Y) \ &amp;= \int dz dx , p(x, z) \log p(z | x) \ &amp;\leq \int dz dx , p(x, z) \log e(z | x) - \int dz dy , p(z, y) \log b(z | y) \ &amp;= \langle \log e(z | x) \rangle - \langle \log b(z | y) \rangle \end{align*}$$</p><p>结合以上推导，我们得到最终的条件熵瓶颈<strong>目标</strong>：</p><p>$$\min \beta \left( \langle \log e(z|x) \rangle - \langle \log b(z|y) \rangle \right) - \langle \log d(y|z) \rangle$$</p><p>学习条件反向编码器$b(z|y)$通常比学习无条件边际$m(z)$更容易。此外，我们知道，当$I(X; Z | Y) = I(X; Z) - I(Y; Z) = 0$时，此时的$\beta$值对应于一个最优的表示。相比之下，在使用信息瓶颈（IB）时，如何衡量与最优性的距离并不明确。</p><h2 id="五、算法信息理论">五、算法信息理论</h2><p>考虑一个从均匀伯努利分布独立生成的长度为$n$的比特序列。该分布每个元素的最大熵为$H_2(0.5) = 1$，因此长度为$n$的序列的编码长度为$- \log_2 p(D|\theta) = - \sum_{i=1}^{n} \log_2 \text{Ber}(x_i | \theta = 0.5) = n$。然而，从直观上来看，这样的序列并没有包含太多信息。</p><p>可见统的信息理论主要基于某个随机分布的性质，这种分布被假设为生成我们观察到的数据。然而，这种理论并没有很好地反映出人们对“信息”的直观理解，而算法信息理论提出了一种不同的方法来量化一个序列的信息量。</p><h3 id="1-Kolmogorov复杂性">1. Kolmogorov复杂性</h3><p><strong>Kolmogorov复杂性</strong>是算法信息理论的核心概念，定义为生成特定比特字符串$x = x_{1:n}$的最短程序的长度。这一程序被输入到一个通用图灵机$U$中，以生成字符串$x$。公式定义为：</p><p>$$K(x) = \min_{p \in B^*} [\ell(p) : U(p) = x]$$</p><p><em>$B^</em>$是任意长度比特字符串的集合。<br>*$\ell(p)$是程序$p$的长度。</p><p>Kolmogorov复杂性具有一些类似于<strong>Shannon熵</strong>的性质。我们可以忽略常数项，得到以下不等式：</p><p>$$K(x|y) \leq K(x) \leq K(x, y)$$</p><p>这些不等式的解释如下：</p><p>*$K(x∣y)$：在已知$y$的情况下，生成$x$的最短程序长度。<br>*$K(x)$：生成$x$的最短程序长度。<br>*$K(x, y)$：生成$x$和$y$的最短程序长度。</p><p>这些不等式表明，已知条件信息$y$会减少生成$x$所需的信息量。</p><p>尽管Kolmogorov复杂性是一个理论上重要的概念，但它是不可计算的。为了解决这个问题，引入了<strong>Levin复杂性</strong>：</p><p>$$L(x) = \min_{p \in B^*} [\ell(p) + \log(\text{time}(p)) : U(p) = x]$$</p><p>*$\text{time}(p)$是程序$p$的运行时间。</p><p>Levin复杂性可以通过“Levin搜索”或“通用搜索”来计算，即以时间片的方式运行所有程序，直到第一个程序停止。这种方法的时间复杂度为：</p><p>$$\text{time}(LS(x)) = 2^{L(x)}$$</p><p>虽然Levin复杂性是可计算的，但计算效率仍然较低。为此，可以通过参数化的近似来得到Kolmogorov复杂性的上界。例如，假设$q$是某个比特字符串的分布，可以证明：</p><p>$$K(x) \leq -\log q(x) + K(q)$$</p><p>如果$q$是一个参数化模型，可以通过$q$参数的编码长度来近似$K(q)$。</p><p>Kolmogorov复杂性还可以用于定义序列的随机性定义，而无需使用随机变量或通信信道的概念。我们定义一个字符串$x$是可压缩的，当其最短描述长度小于字符串本身的长度：</p><p>$$K(x) &lt; \ell(x) = n$$</p><p>否则，称字符串为算法随机的。这种随机性定义称为<strong>Martin-Löf随机性</strong>。</p><p>例如：</p><ul><li>字符串$x = (10101010 \ldots)$是可压缩的，因为它是模式“10”的重复。</li><li>字符串$x = (11001001 \ldots)$也是可压缩的，但不如前者明显，因为它是$\pi^2$的二进制扩展。</li><li>字符串$x = (10110110 \ldots)$被认为是“真正随机的”，因为它来源于量子波动。</li></ul><p>基于序列的信息理论为著名的<strong>Lempel-Ziv无损数据压缩方案</strong>奠定了基础，这形成了<strong>zip编码</strong>的基础。利用Kolmogorov复杂性，我们可以定义一种普遍相似性度量：</p><p>$$d(x, y) = \frac{\max[K(x|y), K(y|x)]}{\max[K(x), K(y)]}$$</p><p>其中，诸如$K(x)$的项可以通过某种通用压缩器（如LZ）的编码成本进行近似。这导致了**规范化压缩距离（NCD）**的出现。</p><h3 id="2-Solomonoff归纳">2. Solomonoff归纳</h3><p>在<strong>Solomonoff归纳</strong>中，我们关注的是预测问题。假设我们观察到了一系列数据$x_{1:t}$​，这些数据来自某个未知的分布$\mu(x_{1:t})$。我们的目标是通过某个模型$\nu$来近似这个分布，以便预测未来的值，即$\nu(x_{t+1}|x_{1:t})$。这被称为归纳问题。</p><p>我们假设$\nu$属于模型集合$M$，其中$M$是一个可数模型（分布）的集合。对于每个模型$\nu$，我们有一个先验概率$w_\nu$​。在Solomonoff归纳中，模型集合$M$被假设为所有可计算函数的集合，先验定义为：</p><p>$$w_\nu = 2^{-K(\nu)}$$</p><p>这个“通用先验”能够建模任何可计算的分布$\mu$。这里的权重选择是基于<strong>奥卡姆剃刀原理</strong>，即我们应该偏好那些最简单的能够解释数据的模型。</p><p>给定这个先验，我们可以使用以下贝叶斯混合模型计算序列的先验预测分布：</p><p>$$\xi(x_{1:t}) = \sum_{\nu \in M} w_\nu \nu(x_{1:t})$$</p><p>从这个先验预测分布出发，我们可以在时间步骤$t$计算后验预测分布：</p><p>$$\begin{align*} \xi(x_t|x_{&lt;t}) &amp;= \frac{\xi(x_{1:t})}{\xi(x_{&lt;t})} \ &amp;= \frac{\sum_{\nu \in M} w_\nu \nu(x_{1:t})}{\xi(x_{&lt;t})} \ &amp;= \sum_{\nu \in M} w_\nu \frac{\nu(x_{1:t})}{\xi(x_{&lt;t})} \ &amp;= \sum_{\nu \in M} w_\nu \frac{\nu(x_{&lt;t})}{\xi(x_{&lt;t})} \nu(x_t|x_{&lt;t}) \ &amp;= \sum_{\nu \in M} w(\nu|x_{&lt;t}) \nu(x_t|x_{&lt;t}) \end{align*}$$</p><p>在最后一步中，我们利用了后验权重的性质：</p><p>$$w(\nu|x_{1:t}) = \frac{p(\nu|x_{1:t})}{p(x_{1:t})} = \frac{w_\nu \nu(x_{1:t})}{\xi(x_{1:t})}$$</p><p>考虑在每个时间步骤$t$上，比较这种预测分布与真实分布的准确性。我们用平方误差来表示：</p><p>$$s_t(x_{&lt;t}) = \sum_{x_t \in X} (\mu(x_t|x_{&lt;t}) - \xi(x_t|x_{&lt;t}))^2$$</p><p>考虑到直到时间$n$的总期望误差：</p><p>$$S_n = \sum_{t=1}^{n} \sum_{x_{&lt;t} \in X} \mu(x_{&lt;t}) s_t(x_{&lt;t})$$</p><p>Solomonoff证明了这个预测器的总误差在极限情况下的一个重要<strong>界限</strong>：</p><p>$$S_\infty \leq \ln(w^{-1}_\mu) = K(\mu) \ln 2$$</p><p>这一结果表明，总误差被生成数据的环境复杂性所界定，简单的环境易于学习，最优预测器的预测迅速接近真实值。</p><p>我们还可以考虑一种假设，即数据是由某个未知的确定性程序$p$生成的，满足$U(p) = x^<em>$，其中$x^</em>$是观察到的前缀$x = x_{1:t}$的无限扩展。假设程序的先验定义为：</p><p>$$\Pr(p) = 2^{-\ell(p)}$$</p><p>那么序列的先验预测分布为：</p><p>$$M(x) = \sum_{p: U(p) = x^*} 2^{-\ell(p)}$$</p><p>可以证明$M(x) = \xi(x)$</p><p>由此，我们可以计算后验预测分布$M(x_t|x_{&lt;t}) = \frac{M(x_{1:t})}{M(x_{&lt;t})}$。</p><p>由于Solomonoff归纳依赖于Kolmogorov复杂性来定义其先验，因此它是不可计算的。然而，可以通过各种方式对这一方案进行近似。例如，可以使用**元学习（meta learning）**来训练通用序列预测器，如Transformer或LSTM，使得这些模型能够近似一个通用预测器。</p><h3 id="3-AXI和通用AGI">3. AXI和通用AGI</h3><p>最后讲了AIXI，是一个对<strong>Solomonoff归纳法</strong>的扩展，书中说的比较简略：</p><p>![](/images/Fundamentals-Information theory/24.png)</p>]]></content>
    
    
    <categories>
      
      <category>Probabilistic Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>概率论与数理统计</tag>
      
      <tag>信息论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Probabilistic Machine Learning]: Fundamentals-Graphical models</title>
    <link href="/2024/10/20/Fundamentals-Graphical%20models/"/>
    <url>/2024/10/20/Fundamentals-Graphical%20models/</url>
    
    <content type="html"><![CDATA[<p><strong>概率图</strong>是随机变量集合的一种表现形式。在概率图中，节点代表随机变量，边的有无则表示这些变量之间的条件独立性假设。所以，称为“独立性图”似乎更为合适。根据图的不同类型，概率图模型可以分为有向图、无向图或有向无向混合图的模型。</p><h2 id="一、有向图模型（贝叶斯网络）">一、有向图模型（贝叶斯网络）</h2><p>基于有向无环图（DAGs）的有向概率图模型（DPGM）通常被称为贝叶斯网络（Bayes nets）。不过这里的“贝叶斯”其实只是定义概率分布的一种方法。</p><h3 id="1-联合分布的表示">1. 联合分布的表示</h3><p>DAG的一个关键特性是必定存在<strong>拓扑排序</strong>。根据拓扑排序的顺序，我们可以看成一个有序马尔可夫链，即一个节点在给定其父节点的情况下，与拓扑顺序中的所有前驱节点条件独立。公式如下：</p><p>$$x_i \perp x_{pred(i)\backslash pa(i)} | x_{pa(i)}$$</p><p>其中，$pa(i)$是节点$i$的父节点，而$pred(i)$是拓扑顺序中节点$i$的前驱节点。因此，联合分布可以如下表示（假设我们使用节点顺序 1 到$N_G$）：</p><p>$$p(x_{1:N_G}) = p(x_1) p(x_2|x_1) p(x_3|x_1, x_2) … p(x_{N_G} | x_1, …, x_{N_G-1}) = \prod_{i=1}^{N_G} p(x_i|x_{pa(i)})$$</p><p>其中，$p(x_i|x_{pa(i)})$是节点 i 的条件概率分布（CPD）。这种表示的主要优点是，由于图中编码的条件独立性假设，定义联合分布所需的<strong>参数数量可以大大减少</strong>。对于离散随机变量，未结构化的联合分布需要 $O(K^{N_G})$ 个参数，而DAG中每个节点最多有$N_P$个父节点，仅需要 O($N_G*K^{(N_P+1)}$) 个参数。如果DAG是稀疏的，这个数量会显著减少。</p><h3 id="2-例子">2. 例子</h3><p>书中给了<strong>马尔科夫链</strong>的例子来具体说明。</p><p>![](/images/Fundamentals-Graphical models/0.png)<br>显然二阶马尔科夫链也是一种有向图模型：</p><p>![](/images/Fundamentals-Graphical models/1.png)<br>书中还给了&quot;<strong>student&quot; network</strong>和<strong>Sigmoid belief nets</strong>的例子。</p><p>![](/images/Fundamentals-Graphical models/2.png)<br><strong>Sigmoid belief nets</strong>其实就是一种潜变量的生成模型</p><p>![](/images/Fundamentals-Graphical models/3.png)</p><h3 id="3-高斯贝叶斯网络（Gaussian-Bayes-Nets）">3. 高斯贝叶斯网络（Gaussian Bayes Nets）</h3><p>**高斯贝叶斯网络（Gaussian Bayes Nets）**也是一种有向概率图模型，其中所有的变量都是连续实值的，并且条件概率分布（CPD）具有线性高斯形式。具体来说，CPD 的形式如下：</p><p>$$p(x_i|x_{\text{pa}(i)}) = \mathcal{N}(x_i|\mu_i + w_i^T x_{\text{pa}(i)}, \sigma_i^2)$$</p><p>这表示每个变量$x_i$在给定它的父节点$x_{\text{pa}(i)}$的条件下，服从一个正态分布，其均值是父节点的线性组合加上一个局部均值$\mu_i$，标准差为$\sigma_i$​。</p><p>通过将这些局部 CPD 乘起来，我们可以得到一个大的<strong>联合高斯分布</strong>$p(x) = \mathcal{N}(x|\mu, \Sigma)$，其中$x \in \mathbb{R}^{N_G}$​ 表示所有变量的联合分布。最终，通过推导，我们得到整体均值向量$\mu = (\mu_1, \mu_2, \dots, \mu_{N_G})$是所有局部均值的拼接。而协方差则$\Sigma = U S^2 U^T$。其中$S^2$是标准差对角矩阵的平方。</p><p>具体过程如下：</p><p>![](/images/Fundamentals-Graphical models/4.png)</p><h3 id="4-条件独立性（Conditional-Independence-CI）">4. 条件独立性（Conditional Independence, CI）</h3><p>本部分首先定义了**条件独立性(CI)**的基本概念。$x_A ⊥_G x_B|x_C$表示在图$G$中，$A$与$B$在给定$C$的情况下是条件独立的。图$G$中的条件独立性陈述集合记为$I(G)$，而在某个分布$p$中成立的所有条件独立性陈述集合记为$I(p)$。</p><ul><li>图$G$被称为分布$p$的<strong>I-map（独立性图）<strong>或分布$p$相对于$G$是马尔科夫的（Markov wrt G），当且仅当图G中的所有条件独立性陈述都成立于$p$中（即$I(G) ⊆ I(p)$）。这意味着图$G$可以作为分布$p$的代理，帮助我们推理$p$的条件独立性属性。<br>*$G$是$p$的</strong>最小I-map</strong>，当且仅当没有比$G$更小的图$G′$可以满足$I(G’) ⊆ I(p)$。</li></ul><p>![](/images/Fundamentals-Graphical models/5.png)</p><h4 id="4-1-全局马尔科夫性质-d-separation">4.1 全局马尔科夫性质 (d-separation)</h4><p>接下来介绍了如何从有向无环图（DAG）中推导出条件独立性（CI）的概念，具体通过<strong>d-分离</strong>（d-separation）的方式实现。</p><ul><li><strong>d-分离的定义：</strong> 对于一条无向路径P，如果以下任意条件之一成立，则P被节点集C（观测集）d-分离：</li></ul><ol><li><strong>P包含链式结构</strong>：$s → m → t$或$s ← m ← t$，并且中间节点m属于C。</li><li><strong>P包含分叉结构</strong>：$s ↙m↘ t$，并且中间节点m属于C。</li><li><strong>P包含碰撞结构（v-结构）</strong>：$s ↘m↙ t$，并且中间节点m不属于C，且m的后代节点也不在C中。</li></ol><p>如果对于任意$a∈A$和$b∈B$的所有无向路径都被$C$d-分离，则称节点集A与B在给定C的条件下是d-分离的。</p><ul><li><strong>全局马尔科夫性质：</strong> 当A与B在给定C的情况下是d-分离时，我们把这种条件独立性写为$X_A ⊥_G X_B|X_C$。这个性质也称为有向全局马尔科夫性质，用于判定图中的条件独立性。</li></ul><p>![](/images/Fundamentals-Graphical models/6.png)<br>具体为什么者三种情况成立，解释如下：</p><ul><li>$X \rightarrow Y \rightarrow Z$</li></ul><p>联合概率分布:<br>$$p(x, y, z) = p(x) p(y|x) p(z|y)$$</p><p>条件概率:<br>$$p(x, z|y) = \frac{p(x, y, z)}{p(y)} = \frac{p(y)p(x|y)p(z|y)}{p(y)} = p(x|y)p(z|y)$$</p><p>因此，$X \perp Z | Y$。观察中间节点$Y$会将链断开（如同马尔可夫链）。</p><ul><li>$X \leftarrow Y \rightarrow Z$</li></ul><p>联合概率分布:<br>$$p(x, y, z) = p(y) p(x|y) p(z|y)$$</p><p>条件概率:<br>$$p(x, z|y) = \frac{p(x, y, z)}{p(y)} = \frac{p(y)p(x|y)p(z|y)}{p(y)} = p(x|y)p(z|y)$$</p><p>因此，$X \perp Z | Y$。观察根节点$Y$将其子节点分开（如同朴素贝叶斯分类器）。</p><ul><li>$X \rightarrow Y \leftarrow Z$</li></ul><p>联合概率分布:<br>$$p(x, y, z) = p(x) p(z) p(y|x, z)$$</p><p>条件概率:<br>$$p(y∣x,z)p(y)p(x, z|y) = \frac{p(x)p(z)p(y|x, z)}{p(y)}$$</p><p>此时，$X \not\perp Z | Y$。但我们注意到在无条件分布中：$p(x, z) = p(x)p(z)$说明$X$和$Z$是边际独立的。然而，观察到一个共同子节点$Y$使得其父节点$X$和$Z$变得相关，这种现象被称为 <strong>Explaining Away</strong>或 <strong>Berkson’s paradox</strong>。</p><h4 id="4-2-Berkson’s-paradox的例子">4.2 Berkson’s paradox的例子</h4><p>书中给了几个例子来直观展示<strong>Berkson’s paradox</strong>：</p><p><strong>示例 1：掷硬币实验</strong></p><ul><li>假设我们掷两个硬币100次，并且只记录至少有一个硬币是正面朝上的结果。这意味着我们会忽略双反的情况。</li><li>在这种情况下，每当硬币1为反面时，硬币2必定为正面，这导致了一个假象，即硬币1和硬币2似乎相关。</li><li>但实际上，这种相关性是由于<strong>选择偏差</strong>引起的，即我们只记录特定条件下的数据，从而扭曲了它们的实际独立性。</li></ul><p><strong>示例 2：高斯分布图模型 (DPGM)</strong></p><ul><li>我们有一个$X \rightarrow Z \leftarrow Y$的图结构，且联合分布为：$p(x, y, z) = N(x | -5, 1) N(y | 5, 1) N(z | x + y, 1)$</li><li>当我们不对$Z$进行条件化时，$X$和$Y$是独立的。然而，如果我们只选择$z &gt; 2.5$的样本，会发现$X$和$Y$变得相关，这也是由于<strong>选择偏差</strong>导致的。</li></ul><h4 id="4-3-Markov-Blankets">4.3 Markov Blankets</h4><p>Markov Blankets是指，使某个节点与图中其他所有节点条件独立的最小节点集。对于一个节点$i$，它的马尔可夫包络$mb(i)$包括它的<strong>父节点</strong>、<strong>子节点</strong>和<strong>共同父节点</strong>（与其子节点有共同父母的节点），形式化表示为：</p><p>$$mb(i) ≜ ch(i) ∪ pa(i) ∪ copa(i)$$</p><p>其中$ch(i)$表示节点$i$的子节点，$pa(i)$是它的父节点，$copa(i)$是它子节点的共同父节点。</p><p>![](/images/Fundamentals-Graphical models/7.png)<br>我们通过分解节点的联合分布，证明节点$i$的条件概率$p(X_i | X_{-i})$仅取决于马尔可夫包络中的节点。最终条件概率为：</p><p>$$p(x_i | x_{-i}) = p(x_i | x_{mb(i)}) \propto  p(x_i | x_{mb(i)}) \prod_{Y_j \in ch(i)} p(x_k | x_{pa(k)})$$</p><p>![](/images/Fundamentals-Graphical models/8.png)</p><h4 id="4-4-其他马尔可夫性质">4.4 其他马尔可夫性质</h4><p>通过<strong>d-分离</strong>准则，可以得出<strong>局部马尔可夫性质</strong>：</p><p>$$i \perp nd(i) \setminus pa(i) | pa(i)$$</p><p>其中$nd(i)$表示节点$i$的非后代节点，即除了它的后代以外的其他节点。局部马尔可夫性质表示，一个节点在已知它的父节点的条件下，与它的非后代独立。</p><p>同时，考虑上面结论的一个特殊情况，就可以得到<strong>有序马尔可夫性质</strong>：</p><p>$$i \perp pred(i) \setminus pa(i) | pa(i)$$</p><p>![](/images/Fundamentals-Graphical models/9.png)<br>其中$pred(i)$是节点$i$的前驱节点（根据某个拓扑排序）。这些性质与<strong>全局马尔可夫性质</strong> 、局部马尔可夫性质 、有序马尔可夫性质之间有递推关系，最终这些性质是等价的。</p><p>![](/images/Fundamentals-Graphical models/10.png)</p><h3 id="5-采样（Sampling）和推理（Inference）">5. 采样（Sampling）和推理（Inference）</h3><p>从一个有向概率图模型中生成样本是简单的。我们可以按照拓扑顺序访问节点，即先访问父节点再访问子节点，然后根据父节点的值为每个节点采样。这个过程称为<strong>祖先采样（ancestral sampling）</strong>，它能够生成来自联合分布的独立样本。</p><p>![](/images/Fundamentals-Graphical models/11.png)<br>在PGMs中，推理指的是在已知一组可观察节点$V$的情况下，计算一组查询节点$Q$的后验分布，同时对不相关的干扰变量$R$进行边际化：</p><p>$$p_\theta(Q | V) = \frac{p_\theta(Q, V)}{p_\theta(V)} = \frac{\sum_{R} p_\theta(Q, V,R)}{p_\theta(V)}$$</p><p>如果$Q$是单个节点，则$p_\theta(Q | V)$被称为节点$Q$的后验边际。</p><p>![](/images/Fundamentals-Graphical models/12.png)</p><p><strong>例子：</strong></p><p>设$V = x$为观察到的声音波形序列，$Q = z$为未知的说话单词，$R = r$为与信号相关的其它因素（如音调或背景噪声）。我们的目标是计算在给定声音的情况下，单词的后验分布：<br>$$p_\theta(z | x) = \sum_r p_\theta(z, r | x) = \sum_{r}{\frac{p_{\theta}(z,r,x)}{\sum_{r’,z’}{p_{\theta}}(z’,r’,x)}}$$</p><p>为了简化，我们可以将随机因子$R$与查询集合$Q$合并，定义隐藏变量的完整集合$H = Q \cup R$：<br>$$p_\theta(h | x) = \frac{p_\theta(h, x)}{p_\theta(x)} = \frac{p_\theta(h, x)}{\sum_{h’} p_\theta(x, h’)}$$</p><p>计算复杂度：推理任务的计算复杂度依赖于图的条件独立性属性，通常是NP-hard的，但对于某些图结构（如链、树和稀疏图），可以有效地用动态规划方法解决。</p><p>![](/images/Fundamentals-Graphical models/13.png)</p><h3 id="6-学习">6. 学习</h3><p>学习的目标是从数据中计算后验分布$p(\theta | D)$。在机器学习中，通常计算参数的点估计，例如最大化后验：$\hat{\theta} = \arg\max p(\theta | D)$</p><h4 id="6-1-从完整数据中学习">6.1 从完整数据中学习</h4><p>下面给出一个具体的图模型进行示范：</p><p>![](/images/Fundamentals-Graphical models/14.png)<br>图示描述了一个典型的监督学习问题，其中有$N$个局部变量$x_n$和$y_n$，以及两个全局变量，代表数据样本共享的参数。局部变量为观察到的（训练集中），以实心（阴影）节点表示；全局变量为未观察到的，以空心（无阴影）节点表示。</p><p>根据图的条件独立性属性，联合分布因式分解为每个节点的乘积：<br>$$\begin{align*} p(\theta, D) &amp;= p(\theta_x) p(\theta_y) \prod_{n=1}^{N} p(y_n | \theta_y) p(x_n | y_n, \theta_x) \  &amp;= \left( p(\theta_y) \prod_{n=1}^{N} p(y_n | \theta_y) \right) \left( p(\theta_x) \prod_{n=1}^{N} p(x_n | y_n, \theta_x) \right) \  &amp;= [p(\theta_y) p(D_y | \theta_y)] [p(\theta_x) p(D_x | \theta_x)]  \end{align*}$$</p><p>其中$D_y = {y_n}<em>{n=1}^{N}$​ 和$D_x = {x_n, y_n}</em>{n=1}^{N}$分别为足以估计$\theta_y$和$\theta_x$​ 的数据。</p><p>我们可以独立地计算每个参数的<strong>后验分布</strong>：<br>$$p(\theta, D) = \prod_{i=1}^{N_G} p(\theta_i)p(D_i | \theta_i)$$</p><p>从而得出<strong>最大似然估计</strong>：<br>$$\hat{\theta} = \arg\max_{\theta} \prod_{i=1}^{N_G} p(D_i | \theta_i)$$</p><p>![](/images/Fundamentals-Graphical models/15.png)</p><h4 id="6-2-不完整数据中学习-隐变量">6.2 不完整数据中学习(隐变量)</h4><p>![](/images/Fundamentals-Graphical models/16.png)<br>如上图，当存在隐变量时，似然函数的因式分解不再适用，因此无法独立地估计CPD。对于观测数据的似然性，可以写成：</p><p>$$\begin{align*} p(D | \theta) &amp;= \sum_{z_{1:N}} \prod_{n=1}^{N} p(z_n | \theta_z) p(x_n | z_n, \theta_x) \ &amp;=  \prod_{n=1}^{N} \sum_{z_{n}} p(z_n | \theta_z) p(x_n | z_n, \theta_x) \end{align*}$$</p><p>对数函数无法在求和上进行分解：</p><p>$$\ell(\theta) = \sum_{n} \log \sum_{z_n} p(z_n | \theta_z) p(x_n | z_n, \theta_x)$$</p><p>所以就有了如下的两种方法：</p><ul><li><strong>使用EM算法</strong></li></ul><p>期望步骤（E步）：在这个步骤中，算法推断隐变量$z_n$​ 的期望值，而不是返回其完整的后验分布$p(z_n | x_n, \theta^{(t)})$。这样做是为了降低计算复杂性，返回期望充分统计量（ESS），即隐变量的加权计数。</p><p>最大化步骤（M步）：在这个步骤中，使用E步中计算的ESS来最大化完全观察数据的对数似然期望值。这意味着在这个步骤中，参数更新基于对隐变量的期望。</p><p>![](/images/Fundamentals-Graphical models/17.png)</p><ul><li><strong>使用SGD拟合</strong></li></ul><p>EM是批处理算法，使用随机梯度下降（SGD）更适合大规模数据集。我们需要为每个示例计算观测数据的边际似然：<br>$$p(x_n | \theta) = \sum_{z_n} p(z_n | \theta_z) p(x_n | z_n, \theta_x)$$</p><p>对数似然计算：<br>$$l(\theta) = \log p(D | \theta) = \sum_{n=1}^{N} \log p(x_n | \theta)$$</p><p>梯度计算：</p><p>$$\begin{align*} \nabla_\theta \ell(\theta) &amp;= \sum_n \nabla_\theta \log p(x_n|\theta) \ &amp;= \sum_n \frac{1}{p(x_n|\theta)} \nabla_\theta p(x_n|\theta) \ &amp;= \sum_n \frac{1}{p(x_n|\theta)} \nabla_\theta \left( \sum_{z_n} p(z_n, x_n|\theta) \right) \ &amp;= \sum_n \sum_{z_n} \frac{p(z_n, x_n|\theta)}{p(x_n|\theta)} \nabla_\theta \log p(z_n, x_n|\theta) \ &amp;= \sum_n \sum_{z_n} p(z_n|x_n, \theta) \nabla_\theta \log p(z_n, x_n|\theta) \end{align*}$$</p><p>![](/images/Fundamentals-Graphical models/18.png)<br>当然，这种几种做法需要我们知道隐变量的后验分布，但在深度学习中，很多时候是不知道的。这时候比如VAEs就是直接优化最大似然下界，相当于只进行了EM算法中的M步。</p><h2 id="二、无向图模型（马尔可夫随机场）">二、无向图模型（马尔可夫随机场）</h2><p>在某些领域，比如图像，去定义像素之间的联系的方向是不自然的。我们可以说一个像素与周围像素有关，但为这种关系定义一个方向（即建模一个有向图模型），其实并不是自然或者合理的。此时用无向图模型，不指定边的方向，更自然地处理这些问题。相比有向图模型，**无向图模型（UPGM）**具有对称性，特别适用于空间或关系数据。</p><h3 id="1-联合分布">1. 联合分布</h3><p>在无向图中，由于没有拓扑顺序，无法使用链规则来表示联合分布$p(x_1, \ldots, x_N)$。相反，联合分布通过图中的<strong>最大团（maximal cliques）<strong>来表示。每个最大团关联一个</strong>势函数</strong>，记为$\psi_c(x_c; \theta_c)$，其中$x_c$​ 是该团的变量，$\theta_c$​ 是其参数。这些势函数可以是任何非负函数。</p><p>团是一个无向图中的完全子图，其中任意两个节点都相互连接。在一个图中，最大团是不能再扩展的团，即如果再添加任何一个节点，这个团将不再是完全连接的。</p><p>![](/images/Fundamentals-Graphical models/19.png)</p><ul><li><strong>Hammersley-Clifford定理</strong></li></ul><p>如果联合分布$p$满足由无向图$G$所隐含的条件独立性（CI）属性，那么可以写成以下形式：<br>$$p(x|\theta) = \frac{1}{Z(\theta)} \prod_{c \in C} \psi_c(x_c; \theta_c)$$</p><p>其中$C$是图$G$的所有最大团的集合，$Z(\theta)$是<strong>归一化因子（partition function）</strong>，确保整体分布的总和为1：<br>$$Z(\theta) = \sum_x \prod_{c \in C} \psi_c(x_c; \theta_c)$$</p><p>![](/images/Fundamentals-Graphical models/20.png)</p><ul><li><strong>Gibbs分布</strong></li></ul><p><strong>Hammersley-Clifford定理</strong>中的分布可以重写为：</p><p>$$p(x|\theta) = \frac{1}{Z(\theta)} \exp(-E(x; \theta))$$</p><p>其中$E(x; \theta)$是状态$x$的能量，定义为所有团的能量之和：<br>$$E(x; \theta) = \sum_c E(x_c; \theta_c)$$</p><p>势函数可以通过能量定义为：</p><p>$$\psi_c(x_c; \theta_c) = \exp(-E(x_c; \theta_c))$$</p><p>这表明低能量状态与高概率状态相关联。Gibbs分布也称为<strong>基于能量的模型</strong>，广泛用于物理和生物化学领域，同时也在机器学习中用于定义生成模型。此外，条件随机场（CRFs）是一种特定形式的能量基础模型，形式为$p(y|x, \theta)$，其中势函数基于输入特征$x$。</p><p>![](/images/Fundamentals-Graphical models/21.png)</p><h3 id="2-全可见的马尔可夫随机场（Fully-visible-MRFs）">2. 全可见的马尔可夫随机场（Fully visible MRFs）</h3><p><strong>Fully visible MRFs</strong>指的是无向图模型中不存在潜变量，即除了参数以外，所有的节点都是数据的一部分。</p><p>书中给了几个例子，这里只记录<strong>Ising models</strong>一个例子</p><p>Ising模型是一种特定的马尔可夫随机场（MRF），用于表示二元变量的联合分布。在一个二维格子（lattice）中，节点表示原子，每个原子可以有两个状态（+1或-1），这通常用于表示磁性材料中的自旋。其对应的无向图如下：</p><p>![](/images/Fundamentals-Graphical models/22.png)<br>联合分布可以表示为：<br>$$p(x|\theta) = \frac{1}{Z(\theta)} \prod_{i \sim j} \psi_{ij}(x_i, x_j; \theta)$$<br>其中$i \sim j$表示节点$i$和$j$是邻居。</p><ul><li>**势函数：**对于Ising模型，势函数定义为：<br>$$\psi_{ij}(x_i, x_j; \theta) = \begin{cases} e^{J_{ij}} &amp; \text{如果 } x_i = x_j \ e^{-J_{ij}} &amp; \text{如果 } x_i \neq x_j \end{cases}$$</li></ul><p>$J_{ij}$​ 是节点之间的耦合强度。若两个节点不相连，则$J_{ij} = 0$。</p><p>![](/images/Fundamentals-Graphical models/23.png)</p><ul><li>**能量模型：**Ising模型通常以能量为基础定义：<br>$$p(x|\theta) = \frac{1}{Z(J)} \exp(-E(x; J))$$<br>能量函数为：<br>$$E(x; J) = -J \sum_{i \sim j} x_i x_j$$</li></ul><p>其中，$x_i x_j$的值为：</p><p>$$+1（当 x_i = x_j​ 时）\ −1（当 x_i \neq x_j 时）$$</p><p>![](/images/Fundamentals-Graphical models/24.png)</p><ul><li><strong>耦合强度与温度</strong>：耦合强度$J$控制邻近节点之间的相互作用程度。可以通过引入温度$T$来调整$J$，设$J’ = J/T$，这意味着：温度较低时（冷），节点之间的耦合较强（$J$较大）。温度较高时（热），节点之间的耦合较弱（$J$较小）。</li><li>**磁性系统的特性：**如果所有权重为负（$J &lt; 0$），节点倾向于与邻居不同，形成反铁磁系统，导致系统受挫，因为在二维格子中不可能所有邻居都不同；如果所有边的权重为正（$J &gt; 0$），邻近节点更可能处于相同状态，这被称为铁磁模型。</li></ul><p>![](/images/Fundamentals-Graphical models/25.png)</p><ul><li>**引入外场：**除了成对项（pairwise terms），通常还会加入单项（unary terms），称为外部场。模型可以表示为：<br>$$p(x|\theta) = \frac{1}{Z(\theta)} \prod_i \psi_i(x_i; \theta) \prod_{i \sim j} \psi_{ij}(x_i, x_j; \theta)$$</li></ul><p>对于每个节点，外部势函数定义为：<br>$$\psi_i(x_i) = \begin{cases} e^{\alpha} &amp; \text{如果 } x_i = +1 \ e^{-\alpha} &amp; \text{如果 } x_i = -1 \end{cases}$$</p><p>其能量模型为：<br>$$E(x|\theta) = -\alpha \sum_i x_i - J \sum_{i \sim j} x_i x_j$$</p><p>![](/images/Fundamentals-Graphical models/26.png)</p><h3 id="3-MRFs与潜在变量">3. MRFs与潜在变量</h3><p>对于包含潜变量的MRFs，书中举了著名的<strong>Boltzmann机</strong>作为例子。</p><ul><li>普通Boltzmann机器允许任意的图结构，但确切的推理和学习在普通Boltzmann机器中是不可行的，近似推理（如Gibbs抽样）通常很慢。</li><li>限制Boltzmann机器（RBMs）将节点分为两层，且同层节点之间没有连接。这种结构使得推理更加高效，因为隐藏节点在给定可见节点的条件下是独立的。RBMs通常具有二元节点，能量项形式为$w_{dk} x_d z_k$，其中$z_k$决定隐藏单元的活跃状态。</li><li>深度Boltzmann机器通过堆叠多个RBM层来构建深度Boltzmann机器，进一步提高模型的表示能力。</li><li>深度belief网络（DBNs）结合了RBM和生成模型（DPGM），作为潜在分布编码的先验，并将其转换为观察数据。DBN可以以贪婪方式进行训练，支持快速的自下而上的推理。</li></ul><p>![](/images/Fundamentals-Graphical models/27.png)</p><h3 id="4-最大熵模型">4. 最大熵模型</h3><p><strong>最大熵模型</strong>的目标是在特征符合经验期望的条件下，构建具有最大熵的分布。其形式为：<br>$$p(x|\theta) = \frac{1}{Z(\theta)} \exp(\theta^T \phi(x))$$</p><p>在前面我们也提到，指数族分布是满足最大熵的分布。</p><p>![](/images/Fundamentals-Graphical models/28.png)</p><p>在某些应用中，特征$\phi(x)$可以预先定义，但也可以通过无监督学习进行诱导。这种**特征诱导（Feature induction）**的方法通常从基础特征开始，逐步生成新的特征组合（书中也没有细讲）。</p><p>总归最大熵模型也算是很经典也很熟悉的一个模型了。</p><h3 id="5-条件独立性">5. 条件独立性</h3><p>在给定三个节点集$A$、$B$和$C$的情况下，如果在图$G$中，去掉所有$C$中的节点后，$A$中的任一节点与$B$中的任一节点之间没有路径相连，则称$X_A$​ 在$X_C$​ 条件下与$X_B$​ 条件独立。用符号表示为：</p><p>$$X_A \perp_G X_B | X_C$$</p><p>这也被称为UPGMs的<strong>全局马尔可夫性质</strong>。例如，在下面的图中，{X1, X2} 条件独立于 {X6, X7} 给定 {X3, X4, X5}。</p><p>![](/images/Fundamentals-Graphical models/29.png)<br>使节点$t$条件独立于图中其他所有节点的最小节点集称为$t$的<strong>马尔可夫毯（Markov blanket）</strong>，记作$mb(t)$。也就是说：<br>$$t \perp V \setminus cl(t) | mb(t)$，其中$cl(t) \equiv mb(t) \cup {t}$$<br>$V$是图中所有节点的集合。</p><p>可以证明，在UPGM中，节点的马尔可夫毯正是其直接邻居。这被称为<strong>无向局部马尔可夫性质（undirected local Markov property）</strong>。例如，上图中对于节点 X5，其马尔可夫毯为 {X2, X3, X4, X6, X7}。</p><p>根据局部马尔可夫性质，可以得出，如果两个节点之间没有直接边，则它们在其余节点条件下是条件独立的。这称为<strong>成对马尔可夫性质（pairwise Markov property）</strong>：</p><p>$$s \perp t | V \setminus {s, t} \iff G_{st} = 0$$</p><p>其中$G_{st} = 0$表示$s$和$t$之间没有边。</p><p>全局马尔可夫性质蕴含局部马尔可夫性质，局部马尔可夫性质又蕴含成对马尔可夫性质。相对不明显的是，成对马尔可夫性质可以推导出全局马尔可夫性质，因此这些马尔可夫性质实际上是相同的。</p><p>![](/images/Fundamentals-Graphical models/30.png)</p><h3 id="6-采样（sampling）与推断（Inference）">6. 采样（sampling）与推断（Inference）</h3><p>与有向概率图模型相比，从UPGM中**采样（sampling）**可能会比较慢，因为UPGM中的变量没有顺序。此外，除非知道归一化常数$Z$的值，否则很难计算任何配置的概率。</p><p>由于这些挑战，通常使用<strong>马尔可夫链蒙特卡洛（MCMC）方法</strong>来从UPGM中生成样本。MCMC方法通过构建一个状态空间并在该空间中进行随机游走，逐步收敛到目标分布。</p><p>对于特殊的的UPGM，也可以使用**结点树算法（junction tree algorithm）**通过动态规划生成样本。</p><p>![](/images/Fundamentals-Graphical models/31.png)</p><p><strong>至于Inference</strong>，书中仅给了一个去噪的例子，具体内容会在第九章进行讲述。</p><ul><li>**模型描述：**假设我们有一个由二进制像素$z_i$​ 组成的图像，但我们只观察到像素的噪声版本$x_i$​。该联合模型的形式为：<br>$$p(x,z)=p(z)p(x|z) = \left[ \frac{1}{Z} \prod_{i \sim j} \psi_{ij}(z_i, z_j) \right] \prod_{i} p(x_i | z_i)$$</li></ul><p>其中$p(z)$是一个<strong>Ising model先验</strong>，而$p(x_i | z_i) = N(x_i | z_i, \sigma^2)$，$z_i$取值为 {-1, +1}。</p><ul><li><strong>链图（Chain Graph）</strong>：这个模型在先验上使用UPGM，而在似然部分使用有向边，形成一种称为链图的混合模型。</li></ul><p>![](/images/Fundamentals-Graphical models/32.png)</p><ul><li>**后验推断：**推断任务是计算后验边际$p(z_i | x)$，以及后验最大后验估计（MAP）：$\text{argmax}_z , p(z | x)$</li></ul><p>由于对于大网格的精确计算是不可行的，因此必须使用近似方法。可以使用多种算法进行推断，包括均值场变分推断**（mean field variational inference）<strong>、吉布斯采样</strong>（Gibbs sampling）<strong>、循环信念传播</strong>（loopy belief propagation）**等。</p><p>![](/images/Fundamentals-Graphical models/33.png)</p><h3 id="7-学习">7. 学习</h3><p>即使在完全观测的情况下，计算最大似然估计（MLE）也可能非常耗费计算资源，因为需要处理归一化常数$Z(\theta)$。而计算参数的后验分布$p(\theta | D)$则更加困难，因为还需要额外的归一化常数$p(D)$，这被称为<strong>双重不可解问题（doubly intractable）</strong>。</p><h4 id="7-1-从完全观测数据中学习">7.1 从完全观测数据中学习</h4><p>完全观测数据指的是训练过程中没有隐藏变量或缺失数据（即完全观测数据设置）。此时MRF的分布形式为：</p><p>$$p(x|\theta) = \frac{1}{Z(\theta)} \exp\left( \sum_{c} \theta^T_c \phi_c(x) \right)$$</p><p>其中，$c$表示团，$Z(\theta)$是归一化常数，$\theta_c$​ 是参数向量，$\phi_c(x)$是对应的特征函数。</p><p>则<strong>对数似然</strong>可以表示为：</p><p>$$\ell(\theta) \triangleq \frac{1}{N} \sum_{n} \log p(x_n | \theta) = \frac{1}{N} \sum_{n} \left[ \sum_{c} \theta_c^T \phi_c(x_n) - \log Z(\theta) \right]$$</p><p>在指数族中，我们已经知道了</p><p>$$\frac{\partial \log Z(\theta)}{\partial \theta_c} = \mathbb{E}[\phi_c(x) | \theta] = \sum_{x} p(x | \theta) \phi_c(x)$$</p><p>所以其梯度为：</p><p>$$\frac{\partial \ell}{\partial \theta_c} = \frac{1}{N} \sum_{n} \left[ \phi_c(x_n) - \mathbb{E}[\phi_c(x)|\theta] \right]$$</p><p>其中，$\mathbb{E}[\phi_c(x)|\theta]$表示在模型下特征函数的期望值。当数据的期望值与模型的期望值相等时，梯度为零，这被称为<strong>矩匹配（moment matching）</strong>。评估来自数据的期望值，称为<strong>正相（positive phase）</strong>，因为$x$被固定为观测值。评估来自模型的期望值，称为<strong>负相（negative phase）</strong>，因为$x$在模型中可以自由变化。</p><p>在特定情况下，可以使用<strong>迭代比例拟合算法（iterative proportional fitting, IPF）<strong>进行迭代优化。然而，在一般情况下，通常使用</strong>梯度下降方法</strong>进行参数估计。</p><p>![](/images/Fundamentals-Graphical models/34.png)</p><h4 id="7-2-计算的细节问题">7.2 计算的细节问题</h4><p>计算MRF和条件随机场（CRF）时，MLE的最大计算瓶颈是计算对数归一化常数$Z(\theta)$的导数：</p><p>$$\frac{\partial \log Z(\theta)}{\partial \theta} = \mathbb{E}<em>{p(x|\theta)}[\nabla</em>\theta \log \tilde{p}(x|\theta)]$$</p><p>由于需要在每一步梯度下降训练时从模型中采样，计算梯度变得非常耗时。所以除了MLE，还可以使用其他估计方法：**对比散度（contrastive divergence）<strong>和</strong>伪似然估计（pseudolikelihood estimation）。**这两个是生成模型里面比较常见的方法。</p><h4 id="7-3最大伪似然估计（Maximum-Pseudolikelihood-Estimation-MPLE）">7.3最大伪似然估计（Maximum Pseudolikelihood Estimation, MPLE）</h4><p>伪似然是一种替代MLE的简单方法，定义如下：</p><p>$$\ell_{PL}(\theta) = \frac{1}{N} \sum_{n=1}^{N} \sum_{d=1}^{D} \log p(x_{nd}|x_{n,-d}, \theta)$$</p><p>伪似然优化的是全条件概率的乘积，也称为<strong>复合似然（composite likelihood）</strong>。这里$x_{n,-d}$表示除了$x_d$​ 外的其他变量。$x_{nd}$通常表示第$n$个样本的第$d$个变量或特征</p><p>MPLE在某些情况下是MLE的近似，但通常不是最优的（在某些特殊模型如高斯MRF中，MPLE与MLE等价）</p><p>与MLE相比，伪似然更快，因为计算每个节点的全条件概率只需对单个节点的状态求和，而不需要计算全局归一化常数。同时，尽管伪似然在一般情况下不等同于MLE，但它在大样本极限下是一致估计量。一些具体实践中的表现如下：</p><p>![](/images/Fundamentals-Graphical models/35.png)</p><h4 id="7-4-从不完全观测数据中学习">7.4 从不完全观测数据中学习</h4><p>在一些应用中，我们可能只观察到部分数据，其他数据（隐藏变量）是不可见的。例如，我们可能希望从噪声图像$x$中推断出一个“干净”的图像$z$。这样的模型被称为<strong>隐 Gibbs 随机场</strong>。</p><p>模型的联合分布形式为：</p><p>$$p(x, z | \theta) = \frac{\exp(\theta^T \phi(x, z))}{Z(\theta)}$$</p><p>对数似然$\ell(\theta)$的表达式为：</p><p>$$\begin{align*} \ell(\theta) &amp;= \frac{1}{N} \sum_{n=1}^{N} \log \left( \sum_{z_n} p(x_n, z_n | \theta) \right)  \ &amp;= \frac{1}{N} \sum_{n=1}^{N} \log \left( \frac{1}{Z(\theta)} \sum_{z_n} \tilde{p}(x_n, z_n | \theta) \right)  \ &amp;= \frac{1}{N} \sum_{n=1}^{N} \left( \log \sum_{z_n} \tilde{p}(x_n, z_n | \theta) - \log Z(\theta) \right)  \end{align*}$$</p><p>我们可以把第一项写成如下形式：</p><p>$$\begin{align*} \log \sum_{z_n} \tilde{p}(x_n, z_n | \theta) &amp;= \log \sum_{z_n} \exp(\theta^T \phi(x_n, z_n)) \ &amp;\triangleq \log Z(\theta, x_n) \end{align*}$$</p><p>这表示在给定$x_n$​ 的情况下，隐藏变量$z$的所有可能值的对数分区函数。</p><p>这样对数似然的梯度可以表示为：</p><p>$$\frac{\partial \ell}{\partial \theta} = \frac{1}{N} \sum_{n} \left( E_{z \sim p(z | x_n, \theta)}[\phi(x_n, z)] - E_{(z,x) \sim p(z,x | \theta)}[\phi(x, z)] \right)$$</p><p>这个表达式的意思是，梯度是由<strong>两个期望值</strong>的差组成的：</p><ul><li>第一个期望值是条件在观测到的$x_n$下，对应于隐藏变量$z$的期望。</li><li>第二个期望值是在无条件情况下对$z$和$x$的期望。</li></ul><p>![](/images/Fundamentals-Graphical models/36.png)</p><h2 id="三、-条件随机场（CRFs）">三、 条件随机场（CRFs）</h2><p><strong>CRF</strong> 是一种建模条件分布的马尔科夫随机场的模型，它通过输入节点$x$预测输出节点$y$的联合概率。其模型形式为：</p><p>$$p(y|x, \theta) = \frac{1}{Z(x, \theta)} \prod_{c} \psi_c(y_c; x, \theta)$$</p><p>这里的分区函数$Z(x, \theta)$不仅依赖于参数$\theta$，还依赖于输入$x$，反映了输入对模型输出的影响。</p><p>势函数$\psi_c(y_c; x, \theta)$可以采用对数线性形式：$\psi_c(y_c; x, \theta) = \exp(\theta^T_c \phi_c(x, y_c))$，CRF 可以使用非线性势函数（如深度神经网络）来增强建模能力。</p><p>CRF 能够捕捉输出标签之间的依赖关系，适用于结构化预测问题，例如序列标签或图节点的标签。它允许对输出的有效值施加约束，如在句法分析中，必须遵循语法规则。</p><p>![](/images/Fundamentals-Graphical models/37.png)</p><h3 id="1-一维的CRFs">1. 一维的CRFs</h3><p><strong>1D CRFs</strong> 是基于链式结构的图模型，用于定义给定输入序列$x_{1:T}$下的输出序列$y_{1:T}$​ 的联合概率分布。公式如下：</p><p>$$\begin{equation} p(y_{1:T} | x, \theta) = \frac{1}{Z(x, \theta)} \prod_{t=1}^{T} \psi(y_t, x_t; \theta) \prod_{t=2}^{T} \psi(y_{t-1}, y_t; \theta) \end{equation}$$</p><p>其中$ψ(y_t, x_t; θ)$是节点势，$ψ(y_{t-1}, y_t; θ)$是边势。</p><p>![](/images/Fundamentals-Graphical models/38.png)<br>值得注意的是有一种模型可以看成这类任务的另一种建模方法，即<strong>最大熵马尔可夫模型（MEMM）</strong>：</p><p>$$\begin{equation} p(y_{1:T} | x, \theta) = p(y_1 | x_1; \theta) \prod_{t=2}^{T} p(y_t | y_{t-1}, x_t; \theta) \end{equation}$$</p><p>在最大熵马尔可夫模型中，条件概率$p(y_t|y_{t-1}, x_t; θ)$是局部归一化的。这意味着每个条件的计算仅依赖于前一个标签和当前输入，而不能有效地利用全局上下文信息，这在某些情况下可能导致模型性能的下降。具体模型可以看成一个DPGM：</p><p>![](/images/Fundamentals-Graphical models/39.png)<br><strong>具体应用示例：</strong></p><p>CRFs 在1980年代到2010年代的自然语言处理（NLP）领域得到了广泛应用，尤其是在序列标注任务中。然而，随着深度学习的发展，RNN 和 Transformer 等模型逐渐取代了 CRFs。</p><ul><li><strong>名词短语分块（Noun Phrase Chunking）</strong></li></ul><p>任务描述：在信息提取中，将句子解析为名词短语和动词短语，并为每个单词分配词性标签。</p><p>使用 BIO（Beginning, Inside, Outside）标注方法来标识名词短语的起始、内部和外部。例如，序列 OBIIO 和 OBIOBIO 是有效的标注，表明它们分别代表一个名词短语和两个相邻的名词短语。</p><p>![](/images/Fundamentals-Graphical models/40.png)</p><ul><li><strong>命名实体识别（Named Entity Recognition）</strong></li></ul><p>任务描述：不仅对名词短语进行标注，还将其分类为不同类型（如人名、地名、组织名等）。</p><p>BIO 扩展：采用扩展的 BIO 标签来处理不同类型的命名实体（B-Per, I-Per, B-Loc, I-Loc, B-Org, I-Org, Other）。</p><p>长距离依赖：通过考虑词之间的长距离相关性，提高模型性能。这种模型被称为跳链 CRF（skip-chain CRF）。</p><p>![](/images/Fundamentals-Graphical models/41.png)</p><ul><li><strong>自然语言解析（Natural Language Parsing）</strong></li></ul><p>使用概率上下文无关文法（PCFG），PCFG 是一种生成模型，定义了一组重写或生成规则，形式为$\sigma \rightarrow \sigma’ \sigma’‘$或$\sigma \rightarrow x$，其中$\sigma, \sigma’, \sigma’'$是非终结符（类似于词性），而$x$是终结符（即单词）。</p><p>每个规则都有一个相关的概率，从而定义了一个词序列的概率分布。但为了计算观察到特定序列$x = x_1, \ldots, x_T$​ 的概率，需要对所有生成该序列的树进行求和。这一过程可以通过算法在$O(T^3)$的时间复杂度内完成。</p><p>可以通过深度神经网络来定义特征，使得解析器能够更好地捕捉语言中的复杂模式。</p><p>![](/images/Fundamentals-Graphical models/42.png)</p><h3 id="2-二维的CRFs">2. 二维的CRFs</h3><p>CRFs 还可以应用于图像处理问题，这些问题通常定义在二维网格上。模型的条件概率形式为：</p><p>$$p(y|x) = \frac{1}{Z(x)} \left[ \sum_{i \sim j} \psi_{ij}(y_i, y_j) \right] \prod_i p(y_i|x_i)$$</p><p>这里，$\psi_{ij}(y_i, y_j)$是节点之间的潜在函数。</p><p><strong>具体应用示例：</strong></p><ul><li><strong>语义分割</strong></li></ul><p>语义分割的任务是为图像中的每个像素分配标签。虽然可以使用卷积神经网络（CNN）解决此问题，但由于卷积是局部操作，可能无法捕获长程依赖。</p><p>所以将CNN的输出传入CRF，尤其是完全连接的CRF，可以更好地捕捉长距离连接。完全连接CRF的推理复杂度较高，但通过高斯势函数可以使用均值场算法进行有效推理。</p><p>$$p(y|x) = \frac{1}{Z(x)} \left[ \prod_i p(y_i|f(x)<em>i) \cdot \prod</em>{(i,j) \in E} \psi(y_i, y_j | x) \right]$$</p><p>这里，$E$是CRF中的边集，$f(x)_i$​ 是CNN的输出</p><ul><li><strong>目标检测</strong></li></ul><p>为给定类别（如人或车）找到图像中的对象位置。传统的滑动窗口检测器可能对形状可变的对象（如人的身体）表现不佳。</p><p>部件分解策略：将对象分解为部件，使用成对的CRF来确保部件之间的空间一致性。例如，使用势函数</p><p>$$\psi(y_i, y_j | x) = \exp(-d(y_i, y_j))$$</p><p>其中$d(y_i, y_j)$是$i$和$j$的距离函数，我们也可以设定让它与输入$x$相关，这样便可以鼓励相邻部件靠近。</p><p>最终模型形式类似：</p><p>$$p(y|x) = \frac{1}{Z(x)} \left[ \prod_i p(y_i|f(x)<em>i) \cdot \prod</em>{(i,j) \in E} \psi(y_i, y_j | x) \right]$$</p><h3 id="3-参数估计">3. 参数估计</h3><p>对于参数的估计，我们仍然使用最大似然估计，我们假设势函数是线性的：</p><p>$$\psi_c(y_c; x, \theta) = \exp(\theta^T_c \phi_c(x, y_c) )$$</p><p>根据势函数的定义，似然函数为：</p><p>$$\log p(y_n | x_n, \theta) = \sum_c \theta^T_c \phi_c(y_{n,c}, x_n) - \log Z(x_n; \theta)$$</p><p>其中，分区函数$Z(x_n; \theta)$定义为：</p><p>$$Z(x_n; \theta) = \sum_y \exp(\theta^T \phi(y, x_n))$$</p><p>接下来，我们定义对数似然：</p><p>$$\begin{align*} \ell(\theta) &amp;= \frac{1}{N} \sum_n \log p(y_n | x_n, \theta) \ &amp;= \frac{1}{N} \sum_n [\sum_c \theta^T_c \phi_c(y_{n,c}, x_n) - \log Z(x_n; \theta)] \end{align*}$$</p><p>根据链式法则，似然函数的导数为：</p><p>$$\frac{\partial \ell}{\partial \theta_c} = \frac{1}{N} \sum_n \left( \phi_c(y_{n,c}, x_n) - \frac{\partial}{\partial \theta_c} \log Z(x_n; \theta) \right)$$</p><p>由于$\frac{\partial}{\partial \theta_c} \log Z(x_n; \theta)$可以表示为期望值（前面证明过）：</p><p>$$\frac{\partial}{\partial \theta_c} \log Z(x_n; \theta) = \mathbb{E}_{p(y | x_n, \theta)}[\phi_c(y, x_n)]$$</p><p>因此，最终的梯度为：</p><p>$$\frac{\partial \ell}{\partial \theta_c} = \frac{1}{N} \sum_n \left( \phi_c(y_{n,c}, x_n) - \mathbb{E}_{p(y | x_n, \theta)}[\phi_c(y, x_n)] \right)$$</p><p>![](/images/Fundamentals-Graphical models/43.png)<br><strong>更一般情况下</strong>，CRF 可以写作：</p><p>$$p(y | x; \theta) = \frac{\exp(f(x, y; \theta))}{Z(x; \theta)}$$</p><p>其中$f(x, y; \theta)$是评分函数（负能量函数），高分对应于可能的情况。</p><p>对数似然的梯度为：</p><p>$$\nabla_\theta \ell(\theta) = \frac{1}{N} \sum_{n=1}^N \left( \nabla_\theta f(x_n, y_n; \theta) - \nabla_\theta \log Z(x_n; \theta) \right)$$</p><p>计算对数分区函数的导数是可行的，前提是我们能够计算对应的期望值。然而，需要注意的是，我们必须对每个训练样本计算这些导数，这比马尔可夫随机场（MRF）的情况要慢，因为MRF的对数分区函数是一个常数，独立于观测数据。</p><h2 id="四、-有向图模型和无向图模型的比较">四、 有向图模型和无向图模型的比较</h2><h3 id="1-表达能力">1. 表达能力</h3><p>一个图$G$是分布$p$的 I-map 如果图中编码的所有条件独立（CI）关系都在分布中成立；完美图则能够精确表示分布的所有 CI 属性。</p><p>![](/images/Fundamentals-Graphical models/44.png)</p><p>可以证明，DPGMs 和 UPGMs 能够建模不同的分布集，意味着两者在建模能力上并不优于对方。</p><ul><li><strong>DPGM 的优越性</strong>：DPGM 可以精确表示 v-structure（如$A \to C \leftarrow B$），表明$A$与$B$独立，但在给定$C$时不独立。若将箭头去掉，得到的无向图会错误地表示其他独立关系。事实上，这种CI性质无向图模型建模不出来。</li><li><strong>UPGM 的优越性</strong>：如四循环的例子，UPGM 可以正确表示某些 CI 关系（例如$A \perp C | B, D$），而相应的 DPGM 无法精确编码所有关系。</li></ul><p>![](/images/Fundamentals-Graphical models/45.png)</p><h3 id="2-有向图模型和无向图模型的转换">2. 有向图模型和无向图模型的转换</h3><h4 id="2-1-从有向图模型转化为无向图模型">2.1 从有向图模型转化为无向图模型</h4><p>在将有向概率图模型（DPGM）转换为无向概率图模型（UPGM）时，首先我们需要<strong>道德化（Moralization）</strong>。</p><p>即对于共享子节点的“未婚”父节点（即没有边连接的父节点），需要添加边以连接它们。这一步确保条件独立性（CI）属性在转换后依然保持一致。</p><p>一旦道德化完成，移除所有的箭头，得到一个无向图。</p><p>以学生网络为例：</p><p>![](/images/Fundamentals-Graphical models/46.png)<br>其联合分布如下：</p><p>$$P(C, D, I, G, S, L, J, H) = P©P(D|C)P(I)P(G|I, D)P(S|I)P(L|G)P(J|L, S)P(H|G, J)$$</p><p>接下来，为每个条件概率分布（CPD）定义势函数，得到：</p><p>$$p(C, D, I, G, S, L, J, H) = \psi_C© \psi_D(D, C) \psi_I(I) \psi_G(G, I, D) \psi_S(S, I) \psi_L(L, G) \psi_J(J, L, S) \psi_H(H, G, J)$$</p><p>所有的潜在函数都是局部归一化的，因为它们都是 CPD，因此归一化常数$Z = 1$</p><p>转换后的无向图如上所示，我们看到已经添加了以下的边：D-I，G-J，L-S，这些边连接了共享子节点的父节点，确保了在无向图中能够存储每个家庭的条件概率分布。</p><p><strong>但需要注意的是</strong>转换过程中，某些条件独立性（CI）关系可能会被放宽或忽略，这样只是可以保证转换后的图能够表示原有图的一部分信息。</p><h4 id="2-2-从无向图模型转化为有向图模型">2.2 从无向图模型转化为有向图模型</h4><p>将无向概率图模型（UPGM）转换为有向概率图模型（DPGM），我们首先需要<strong>创建虚拟节点</strong>：对于每个潜在函数$\psi_c(x_c; \theta_c)$，我们引入一个“虚拟节点”$Y_c$​，并将设置一个状态$y^*_c$​。</p><p>接着，我们定义条件概率分布$p(Y_c = y^<em><em>c | x_c) = \psi_c(x_c; \theta_c)$。这表示在给定特征$x_c$的条件下，虚拟节点$Y_c$​ 取特定值的概率，与原UPGM中的潜在函数相对应。这样转换后的整体联合分布形式为$p</em>{\text{undir}}(x) \propto p_{\text{dir}}(x, y^</em>)$</p><p><strong>具体示例：</strong></p><p>考虑一个UPGM，其中联合分布为：<br>$$p(A, B, C, D) = \frac{\psi(A, B, C, D)}{Z}$$</p><p>为了转换成DPGM，我们添加一个虚拟节点$E$，使其成为所有其他节点的子节点，并设置$E = 1$。然后定义 CPD 为：<br>$$p(E = 1 | A, B, C, D) \propto \psi(A, B, C, D)$$</p><p>![](/images/Fundamentals-Graphical models/47.png)<br>同样，这个过程中某些条件独立性（CI）关系可能会被放宽或忽略。</p><h3 id="3-有向图模型和无向图模型的结合">3. 有向图模型和无向图模型的结合</h3><p>**链图（Chain graphs）**是一种可能包含有向和无向边的概率图模型，但不允许有向循环。它能够有效地结合两种类型的边，从而捕捉更复杂的依赖关系。</p><p>例如下图给出了一个简单的联合模型示例</p><p>![](/images/Fundamentals-Graphical models/48.png)</p><p>$$p(y_{1:D}|x_{1:D}) = \left[ \frac{1}{Z} \prod_{i \sim j} \psi_{ij}(x_i, x_j) \right] \prod_{i=1}^{D} p(y_i | x_i)$$</p><p>其中，$p(x)$由无向概率图模型（UPGM）定义，而$p(y|x)$则由有向概率图模型（DPGM）指定。</p><p>再比如如下的离散时间的二阶马尔科夫链：假设观测值是连续的$x_t \in \mathbb{R}^D$，其转移函数可以表示为线性高斯条件概率分布（CPD）：</p><p>$$p(x_t | x_{t-1}, x_{t-2}, \theta) = \mathcal{N}(x_t | A_1 x_{t-1} + A_2 x_{t-2}, Σ)$$</p><p>这种模型也被称为<strong>向量自回归模型（VAR process of order 2）</strong>，广泛应用于时间序列预测和<strong>经济计量学</strong>中。</p><p>![](/images/Fundamentals-Graphical models/49.png)<br>链图可以**通过部分有向无环图（PDAG）**来描述，PDAG可分解为一个有向图，其链组件的节点之间仅通过无向边连接。这允许对不同的条件概率分布进行更灵活的建模。例如下图：</p><p>![](/images/Fundamentals-Graphical models/50.png)<br>$$p(A, B, \ldots, I) = p(A) p(B) p(C, D, E | A, B) p(F, G | C, D) p(H) p(I | C, E, H)$$</p><p>这里的每个条件概率分布（CPD）对应于条件随机场（CRF），例如：</p><p>$$p(C, D, E | A, B) = \frac{1}{Z(A, B)} \phi(A, C) \phi(B, E) \phi(C, D) \phi(D, E)$$<br>$$p(F, G | C, D) = \frac{1}{Z(C, D)} \phi(F, C) \phi(G, D) \phi(F, G)$$</p><h2 id="五、-扩展概率图模型（PGM）">五、 扩展概率图模型（PGM）</h2><h3 id="1-因子图（Factor-Graphs）">1. 因子图（Factor Graphs）</h3><p>**因子图（Factor Graphs）**是一种扩展了的概率图模型（PGM），它将变量之间的依赖关系明确表示了出来。主要有两种形式的因子图：<strong>双部因子图（Bipartite Factor Graph）<strong>和</strong>Forney因子图（Forney Factor Graph, FFG）</strong>。</p><h4 id="1-1-双部因子图（Bipartite-Factor-Graphs）">1.1 双部因子图（Bipartite Factor Graphs）</h4><p>双部因子图是一种无向图，具有两种不同类型的节点：</p><ul><li>圆形节点代表随机变量。</li><li>方形节点代表因子，因子对应于某些函数或潜在分布。</li></ul><p><strong>例子解释</strong></p><p>考虑一个马尔可夫随机场（MRF），如下图所示：</p><p>![](/images/Fundamentals-Graphical models/51.png)<br>我们可以将每个最大团中的势函数转换为一个因子图。如下所示：</p><p>![](/images/Fundamentals-Graphical models/52.png)<br>其中涉及变量$x_1, x_2, x_3, x_4$​，其联合分布表示为：</p><p>$$f(x_1, x_2, x_3, x_4) = f_{124}(x_1, x_2, x_4) f_{234}(x_2, x_3, x_4)$$</p><p>这里，每个因子代表一个这些变量的势函数。通过这种方式，因子图更直观详细地描述了变量间的关系。</p><p>我们还可以对每条边而不是每个团关联一个势函数，如下所示：</p><p>![](/images/Fundamentals-Graphical models/53.png)<br>其表示为：<br>$$f(x_1, x_2, x_3, x_4) = f_{14}(x_1, x_4) f_{12}(x_1, x_2) f_{34}(x_3, x_4) f_{23}(x_2, x_3) f_{24}(x_2, x_4)$$<br>因此，通过因子图的表示法，我们可以更精确地控制变量之间的关系。</p><p>有向概率图模型也可以转换为因子图。每个条件概率分布（CPD）被转换为一个因子，并连接到使用该 CPD 的所有变量。下面是一个例子：</p><p>![](/images/Fundamentals-Graphical models/54.png)</p><p>$$f(x_1, x_2, x_3, x_4, x_5) = f_1(x_1) f_2(x_2) f_{123}(x_1, x_2, x_3) f_{34}(x_3, x_4) f_{35}(x_3, x_5)$$</p><p>其中，因子$f_{123}(x_1, x_2, x_3)$代表条件概率$p(x_3|x_1, x_2)$等。</p><h4 id="1-2-Forney因子图（Forney-Factor-Graphs-FFG）">1.2 Forney因子图（Forney Factor Graphs, FFG）</h4><p>Forney因子图也叫做标准因子图，与双部因子图不同的是：</p><ul><li>节点表示因子。</li><li>边表示变量。变量与多个因子通过边关联。</li></ul><p>例子解释</p><p>假设有如下因子化的函数：</p><p>$$f(x_1, …, x_5) = f_a(x_1) f_b(x_1, x_2) f_c(x_2, x_3, x_4) f_d(x_4, x_5)$$</p><p>该函数的 Forney 因子图如图所示</p><p>![](/images/Fundamentals-Graphical models/55.png)<br>每条边代表变量。例如，$x_3$​ 只参与一个因子$f_c$，并且它只连接到一个节点，这叫做“半边”（half-edge）。这种表示方法非常适合表示某些有自然生成顺序的变量（如时间序列）。</p><p>FFG 还有一种表示来支持层次（组成）结构，即可以将复杂的变量依赖结构表示为一个黑盒。例如，如上图的(b) 展示了一个层次结构的示例，其中因子$f_{prior}(x_1, x_2, x_3, x_4)$代表复杂的联合分布，因子$f_{lik}(x_4, x_5)$代表似然函数。</p><p>![](/images/Fundamentals-Graphical models/56.png)<br>当变量需要参与超过两个因子时，还可以引入等式约束节点。例如上图 展示了如何将多个变量通过等式约束节点连接。这个约束的作用是确保所有连接到该因子的变量具有相同的值，其形式化定义如下：</p><p>$$f_=(x, x_1, x_2) = \delta(x - x_1) \delta(x - x_2)$$</p><p>这里，$\delta(u)$是 Dirac delta 函数（若$u$是连续的）或 Kronecker delta 函数（若$u$是离散的），用于确保连接到此因子的变量值相等。</p><p>![](/images/Fundamentals-Graphical models/57.png)<br>上图显示了等式约束节点的简化表示，这里我们使用变量$x$在多个因子之间共享，确保它们的值一致。我们可以将因子$f_{y|x}(y, x)$视为条件概率$p(y|x)$，并将相同的因子重复使用，这也是一种参数共享（parameter tying）。</p><h2 id="六、结构因果模型（Structural-Causal-Models-SCM）">六、结构因果模型（Structural Causal Models, SCM）</h2><p>传统的概率模型只能用于描述世界的静态关系，而因果模型可以用于描述世界发生变化时的影响，允许我们进行干预并推断这些干预的效果。通过干预某个变量，因果模型能够预测系统中的其他变量如何受到影响。</p><p>一个SCM被定义为三元组$M = (U, V, F)$：</p><p>*$U = { U_i : i = 1, \ldots, N }$：“噪声”变量的集合，作为模型的输入。<br>*$V = { V_i : i = 1, \ldots, N }$：内生变量的集合，属于模型自身。<br>*$F = { f_i : i = 1, \ldots, N }$：一组确定性函数，形式为：$V_i = f_i(V_, U_i)$其中$pa_i$是变量$i$的父节点，$U_i \in U$是外部输入。</p><p>SCM 假设所有的因果相关因素都被包含在模型中，这被称为“<strong>因果马尔科夫假设</strong>”，即模型中的噪声项$U$是相互独立的。如果噪声项之间存在依赖关系，可以通过引入隐藏的父节点来表示这些依赖关系。</p><h3 id="1-示例：教育对财富的因果影响">1. 示例：教育对财富的因果影响</h3><p>以教育水平（X）对财富（Y）的影响为例</p><p>$X$：表示个人的教育水平，可以用一个数字来表示（例如，0 = 高中，1 = 大学，2 = 研究生）。</p><p>$Y$：表示某一时刻的财富水平。</p><p>$Z$：表示因教育所产生的债务。</p><p>在一些情况下，增加教育水平$X$可能会导致财富$Y$的增加。这种情况下，从$X$到$Y$的边被添加。</p><p>然而，接受更多教育可能会产生大量费用（在某些国家），这可能会对财富产生干扰作用。因此，从$X$到$Z$的边被添加，以反映教育水平增加通常伴随的债务增加。</p><p>同时，从$Z$到$Y$的边被添加，表示债务的增加通常会导致财富的减少。</p><p>图形表示如下，通过有向边表示变量之间的因果关系：</p><p>![](/images/Fundamentals-Graphical models/58.png)<br>对应的SCM形式为：</p><p>$$X = f_X(U_x)$$</p><p>$$Z = f_Z(X, U_z)$$</p><p>$$Y = f_Y(X, Z, U_y)$$</p><p>其中$f_X, f_Y, f_Z$是某组函数，$U_x, U_y, U_z$​ 是噪声变量。</p><p>我们还可以明确表示噪声项，这清楚地表明了噪声项在先验上是独立的。</p><h3 id="2-结构方程模型（Structural-equation-models）">2. 结构方程模型（Structural equation models）</h3><p>SEM 是 SCM 的一个特例，其中所有的函数关系都是线性的，噪声项服从高斯分布。这种模型在经济学和社会科学中常用，因为它建模了因果关系，并且计算上较为简单。例如前面例子：</p><p>![](/images/Fundamentals-Graphical models/59.png)<br>这里我们可以用SEM表示为：</p><p>$$X = U_x$$</p><p>$$Z = c_z + w_{xz}X + U_z$$</p><p>$$Y = c_y + w_{xy}X + w_{zy}Z + U_y$$</p><p>这里，$c$是常数项，$w$是权重，$U$是外生噪声。</p><p>假设噪声项服从高斯分布：</p><p>$$p(U_x) = N(U_x | 0, \sigma^2_x)$$</p><p>$$p(U_z) = N(U_z | 0, \sigma^2_z)$$</p><p>$$p(U_y) = N(U_y | 0, \sigma^2_y)$$</p><p>则模型可以转换为高斯的有向图模型：</p><p>$$p(X) = N(X | \mu_x, \sigma^2_x)$$</p><p>$$p(Z|X) = N(Z | c_z + w_{xz}X, \sigma^2_z)$$</p><p>$$p(Y|X, Z) = N(Y | c_y + w_{xy}X + w_{zy}Z, \sigma^2_y)$$</p><h3 id="3-SCM的干预操作（Do-operator）">3. SCM的干预操作（Do operator）</h3><p><strong>干预</strong>指的是改变一个或多个局部机制的行为。例如，可以强制某个变量达到特定值，记作$\text{do}(X_i = x_i)$。这意味着我们强制将变量$X_i$​ 的值设置为$x_i$。当进行完美干预时，应“切断”指向$X_i$的边，表示该变量的值现在独立于其通常的父节点。这种操作称为“<strong>图形手术（graph surgery）</strong>”。</p><p>使用教育模型作为例子，可以通过强制$Z$为某个值（例如，支付所有人的学生贷款）来进行干预。此时，条件概率$p(X | \text{do}(Z = z))$和$p(X | Z = z)$是不同的，因为干预改变了模型。</p><p>如果我们看到某人没有债务，可能推断他们没有接受高等教育（即$p(X \geq 1 | Z = 0)$较小）。但如果我们实施了干预（如免除所有人的学生贷款），那么观察到某人没有债务不会影响我们对其教育背景的看法（即$p(X \geq 1 | do(Z = 0)) = p(X \geq 1)$）。</p><p>在更现实的场景中，可能无法将变量设置为特定值，但可以从当前值出发进行某种程度的改变。例如，可能会将每个人的债务减少一个固定的金额$\Delta = -10,000$。这可以表示为：$Z = f’_Z(Z, U_z)$其中$f’_Z(Z, U_z) = f_Z(Z, U_z) + \Delta$。</p><p>为了建模这类情景，除了上面对模型图进行修改外，我们也可以在原图上创建一个<strong>增强DAG</strong>，其中每个变量都增加了一个额外的父节点，表示该变量的机制是否以某种方式改变。在增强DAG中，可以使用标准的概率推断进行条件计算。例如：$p(Q | \text{do}(A_z = a), E = e) = p(Q | A_z = a, E = e)$</p><p>![](/images/Fundamentals-Graphical models/60.png)</p><h3 id="4-反事实推理（Counterfactuals）">4. 反事实推理（Counterfactuals）</h3><p><strong>反事实推理</strong>关注的是结果的原因。例如，在服用阿司匹林后，如果头痛消失，可能会问：“如果我没有服用阿司匹林，我的头痛是否仍然会消失？”Judea Pearl 据此提出了<strong>因果层次结构</strong>，包括三个分析层次，每个层次的假设越来越强，具体如下：</p><p>![](/images/Fundamentals-Graphical models/61.png)<br>反事实预测过程包括：</p><ul><li><strong>反推</strong>：推断给定证据的潜在因素分布$p(U_i | A_i = a, Y_i = y_i)$。</li><li><strong>干预</strong>：在结构因果模型中修改因果机制，将$A_i = a$替换为$A_i = a’$。</li><li><strong>预测</strong>：通过修改后的模型计算$p(Y_{a’} | A_i = a, Y_i = y_i)$。</li></ul><p>简单来说就是先根据观测结果得到潜在变量的分布，然后在这个潜在变量的分布的基础上，进行do operation并计算结果的分布。</p>]]></content>
    
    
    <categories>
      
      <category>Probabilistic Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>概率论与数理统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Probabilistic Machine Learning]: Fundamentals-Statistics</title>
    <link href="/2024/10/14/Fundamentals-Statistics/"/>
    <url>/2024/10/14/Fundamentals-Statistics/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习<strong>Probabilistic Machine Learning</strong>的学习笔记，分享记录，也便于自己实时查看。</p><p>前面<strong>Probability</strong>部分重点是关注给定参数$\theta$后，数据$D$的分布，即$P(D|\theta)$，而<strong>Statistics</strong>部分则是关注给定数据分布下，参数$\theta$的概率，即$P(\theta|D)$。</p><h2 id="一、贝叶斯统计">一、贝叶斯统计</h2><p>贝叶斯统计也是比较熟悉了，主要就是用贝叶斯公式进行计算后验：</p><p><img src="/images/Fundamentals-Statistics/1.png" alt><br>这里$P(\theta)$叫做先验，$P(\theta|D)$是后验，$P(D|\theta)$叫做似然。</p><p>书中以抛硬币实验来讲述了贝叶斯统计的众多概率，这里简单总结一下：</p><ul><li><strong>Prior</strong> ：均匀分布或者Beta分布，抛硬币我们可以选择Beta分布来指定更强的先验：<br>$$p(θ)=Beta(θ∣α,β)∝θ ^{α−1}  (1−θ) ^{β−1}$$</li><li><strong>Posterior</strong>： 在Beta分布先验条件下可计算得到后验为：<br>$$p(θ∣D)∝θ^{N_1}​(1−θ)^{N_0}​⋅θ^{α−1}(1−θ)^{β−1}=Beta(θ∣α+N_1​,β+N_0​)$$</li><li><strong>MAP 估计</strong>：即让后验最大<br>$$\hat{\theta}_{\text{MAP}} = \frac{\alpha + N_1 - 1}{\alpha + N_1 - 1 + \beta + N_0 - 1}$$<br>用均匀分布先验则和MLE得到的结果一致。</li><li><strong>Posterior Mean</strong>：很多时候会使用后验的均值而非峰值作为参数，:<br>$$\hat{\theta} = \int \theta \cdot p(\theta|D) d\theta$$</li><li><strong>Posterior Variance</strong>：表达估计的不确定性，对于抛硬币可得到标准差<br>$$\sigma = \sqrt{V[\theta|D]} \approx \sqrt{\frac{\hat{\theta}(1 - \hat{\theta})}{N}}$$<br>所以随着样本量$N$的增大，不确定性以$\frac{1}{\sqrt{N}}$​ 的速度下降。不确定性（方差）在$\hat{\theta} = 0.5$时达到最大，在$\hatθ$接近0或1时达到最小。这表明，确定一个硬币偏向比确定它是公平的要容易得多。</li><li><strong>Credible Intervals</strong>：置信区间，后验分布的 <strong>100(1 - α)%</strong> 置信区间定义<br>$$C_\alpha(D) = (l, u) : P(l \leq \theta \leq u|D) = 1 - \alpha$$</li><li><strong>Posterior Predictive Distribution</strong>：假设我们希望预测未来的观测值，贝叶斯最优方法是通过边缘化未知参数来计算后验预测分布：<br>$$p(y|D) = \int p(y|\theta) p(\theta|D) d\theta$$<br>有时计算该积分可能会很困难，这时可以使用点估计方法，选择一个参数估计值$\hat{\theta} = \delta(D)$，例如 MLE 或 MAP，从而近似为：<br>$$p(y|D) \approx p(y|\hat{\theta})$$</li><li><strong>Marginal Likelihood</strong>：对于优化没有影响，主要在于对模型的选择上：<br>$$p(D|M) = \int p(\theta|M) p(D|\theta, M) d\theta \quad$$</li></ul><p>还提到了一个定理**de Finetti’s theorem（德·芬尼蒂定理）：**如果数据是可交换的，那么必然存在一个隐藏的随机变量$\theta$，数据在给定$\theta$的条件下是独立同分布的。这个定理为贝叶斯方法提供了理论基础。</p><p><img src="/images/Fundamentals-Statistics/2.png" alt></p><h2 id="二、频率学派统计">二、频率学派统计</h2><p>与贝叶斯统计不同，频率学派不将参数当作随机变量，而是依赖采样分布来表示不确定性。它通过反复采样来评估数据中的随机性和不确定性，而不是使用先验分布和后验分布。核心思想是重复实验的假设：通过观察如果在不同的数据集上重复实验，估计的量（例如参数）会如何变化，这种变化构成了不确定性的依据。</p><p>这个也很熟悉了，简单来说就是频率学派认为参数是一个值，通过不断地实验就能去估计这个值。虽然这个有一定的缺点，但其一些准则在实践中也是被广泛使用的。</p><p><img src="/images/Fundamentals-Statistics/3.png" alt></p><h3 id="1-Sampling-distributions">1. Sampling distributions</h3><p>采样分布是对某个估计器（如最大似然估计，MLE）的结果变化进行的描述。</p><p>举例来说，假设从一个真实模型$p(x|\theta^*)$中采样多个数据集$D^{(s)}$，然后对每个数据集应用估计器来得到参数估计$\hat{\theta}(D^{(s)})$。通过让数据集的数量$S$趋向无穷，我们可以得到估计器的采样分布。这个分布反映了在不同的样本下，参数估计的变化情况。</p><p><img src="/images/Fundamentals-Statistics/4.png" alt></p><h3 id="2-Bootstrap-自助法">2. Bootstrap 自助法</h3><p>当估计器比较复杂或者样本量较小的时候，可以使用<strong>Bootstrap</strong>方法来近似采样分布。自助法的核心是通过从原始数据集中随机采样生成多个伪数据集，然后计算每个伪数据集的参数估计，最终得到估计值的经验分布。主要有两种方法：</p><ul><li><strong>参数自助法</strong>假设我们知道参数$\theta^<em>$，我们可以生成伪数据集并计算估计值。但现实是$\theta^</em>$是未知的，所以我们使用从数据中估计出的参数$\hat{\theta}$，这就称为“参数自助法”。</li><li>另一种是<strong>非参数自助法</strong>，它不依赖于特定的生成模型，而是直接从原始数据集中进行<strong>有放回</strong>的采样，这样每个新生成的数据集与原始数据集有相同的大小，但通常会有重复数据点。</li></ul><p><img src="/images/Fundamentals-Statistics/5.png" alt><br><img src="/images/Fundamentals-Statistics/6.png" alt></p><h3 id="3-渐近正态性（Asymptotic-Normality）">3. 渐近正态性（Asymptotic Normality）</h3><p>当样本量足够大时，最大似然估计（MLE）的采样分布会趋向于正态分布。这称为MLE的<strong>渐近正态性</strong>。在数学上，它表述为：</p><p>$$\sqrt{N}(\hat{\theta} - \theta^<em>) \rightarrow N(0, F(\theta^</em>)^{-1})$$</p><p>Fisher 信息矩阵其中$F(\theta^*)$是费舍尔信息矩阵。</p><p>费舍尔信息矩阵衡量的是似然函数在真参数处的曲率，表明数据中包含的“信息量”。渐近正态性意味着，当样本量$N$趋于无穷时，估计值的分布会收敛于一个以真参数$\theta^*$为中心的高斯分布。</p><p><img src="/images/Fundamentals-Statistics/7.png" alt></p><h3 id="4-Fisher-信息矩阵">4. Fisher 信息矩阵</h3><p>**Fisher 信息矩阵（Fisher Information Matrix, FIM）**与对数似然函数的曲率密切相关。这一矩阵在频率学派统计中有重要作用，主要用于刻画最大似然估计（MLE）的采样分布。此外，Fisher 信息矩阵在贝叶斯统计中也有应用，例如推导 Jeffreys 的无信息先验，以及在优化问题中作为自然梯度下降的一部分。</p><p>定义如下：</p><p><strong>score function</strong> ：<br>$$s(\theta)\equiv\nabla_\theta\log p(x|\theta)$$</p><p><strong>Fisher 信息矩阵</strong> ：<br>$$F(\theta) \equiv \mathbb{E}<em>{x \sim p(x|\theta)} \left[ \nabla</em>\theta \log p(x|\theta) \nabla_\theta \log p(x|\theta)^T \right]$$</p><p>其第$i,j$项为：</p><p>$$F_{ij} = \mathbb{E}_{x \sim \theta} \left[ \frac{\partial}{\partial \theta_i} \log p(x|\theta) \frac{\partial}{\partial \theta_j} \log p(x|\theta) \right]$$</p><p><img src="/images/Fundamentals-Statistics/8.png" alt><br>可以看到Fisher 信息矩阵与负对数似然函数（NLL, Negative Log Likelihood）有关系：</p><p>$$\text{NLL}(\theta) = - \log p(D|\theta)$$</p><p>我们有如下定理：</p><p><strong>定理 4.1</strong> 如果$\log p(x|\theta)$是二阶可微的，并且在某些正则条件下，Fisher 信息矩阵等于 NLL 的期望 Hessian 矩阵：</p><p>$$<br>F(\theta)<em>{ij} = \mathbb{E}</em>{x \sim \theta} \left[ \frac{\partial}{\partial \theta_i} \log p(x|\theta) \frac{\partial}{\partial \theta_j} \log p(x|\theta) \right] = - \mathbb{E}_{x \sim \theta} \left[ \frac{\partial^2}{\partial \theta_i \partial \theta_j} \log p(x|\theta) \right]<br>$$</p><p><img src="/images/Fundamentals-Statistics/9.png" alt><br>然后书上给了一些常见分布的例子</p><ul><li>二项分布的 FIM：$F(\theta) = \mathbb{E}_{x \sim \theta}[-s’(\theta|x)] = \frac{n}{\theta(1 - \theta)}$</li><li>单变量高斯分布的 FIM：$F(\theta) = \begin{pmatrix} \frac{1}{v} &amp; 0 \ 0 &amp; \frac{1}{2v^2} \end{pmatrix}$</li><li>逻辑回归的 FIM：$F(w) = \mathbb{E}<em>{p(y|X,w,\lambda)}[\nabla^2 L(w)] = X^T \Lambda X + \lambda I$，其中$\Lambda</em>{nn} = \sigma(w^T x_n)(1 - \sigma(w^T x_n))$。</li><li>指数族分布的 FIM：$F_\eta = \text{Cov}[T(x)]$</li></ul><h3 id="5-频率学派的Counterintuitive-properties">5. 频率学派的Counterintuitive properties</h3><p>首先是**频率主义的置信区间，**它基于抽样分布来估计参数的不确定性。其定义是，如果重复抽取样本并计算每个样本的置信区间，那么有 95% 的区间会包含真实参数。但对于一个具体的样本，<strong>无法说参数有 95% 的概率落在置信区间内</strong>。换句话说，频率主义认为参数是固定的，数据是随机的，所以无法给出“参数在此区间的概率”。</p><p>贝叶斯方法则把数据固定，参数看作是随机的。因此，贝叶斯的可信区间给出了参数在某区间内的概率。这是人们在直觉上通常更关心的问题：已知数据后，参数落在某个范围的概率。</p><p>文中提到一个具体的例子：</p><p><img src="/images/Fundamentals-Statistics/10.png" alt><br>然后就是**p 值的误导性，**p 值是指在原假设（H0）成立时，观察到某个统计量或更极端结果的概率。频率主义的假设检验通过计算 p 值来决定是否拒绝原假设，通常认为 p 值很小就意味着原假设不太可能成立。</p><p>问题是p 值经常被错误地解释为“原假设为真的概率”，但实际上它只是给出了在原假设成立的情况下，观察到数据的概率。它并没有告诉我们在看到数据后原假设是否成立，或者备择假设（H1）是否更有可能成立。</p><p>文中用了一个类比来说明 p 值的误导性。假设“如果一个人是美国人，他大概率不是国会议员”，我们观测到某人是国会议员，但这并不能推导出“这个人很可能不是美国人”。</p><p>这是一个典型的错误推理，类似于依赖 p 值来判断假设的真实性。相反，贝叶斯方法会使用贝叶斯定理结合数据推导出假设的后验概率，更符合人们的直觉。</p><p><img src="/images/Fundamentals-Statistics/11.png" alt></p><h2 id="三、共轭先验">三、共轭先验</h2><p>如果先验分布$p(\theta)$属于某个参数化家族$F$，并且后验分布$p(\theta|D)$也在该家族中，则称$p(\theta)$为$p(D|\theta)$的共轭先验。这意味着贝叶斯更新后，分布保持在同一个家族中，便于计算。</p><p>书中详细介绍了常见分布的共轭先验，这里仅做总结：</p><h3 id="3-1-二项分布">3.1 二项分布</h3><ul><li>**共轭先验：**贝塔分布<br>$$p(\theta) = \text{Beta}(\theta | \alpha, \beta)$$</li><li>**更新公式：**在观察到$k$次成功和$n$次试验后，后验分布为：<br>$$p(\theta | k, n) = \text{Beta}(\theta | \alpha + k, \beta + n - k)$$</li></ul><h3 id="3-2-多类分布">3.2. 多类分布</h3><ul><li><p>**共轭先验：**狄利克雷分布：<br>$$p(\boldsymbol{\theta}) = \text{Dirichlet}(\boldsymbol{\theta} | \boldsymbol{\alpha})$$</p></li><li><p>**更新公式：**如果观察到类别$i$的次数为$n_i$​，则后验分布为<br>$$p(\boldsymbol{\theta} | \mathbf{n}) = \text{Dirichlet}(\boldsymbol{\theta} | \boldsymbol{\alpha} + \mathbf{n})$$</p><p>其中$\mathbf{n} = (n_1, n_2, \ldots, n_k)$表示每个类别的观察次数。</p></li></ul><h3 id="3-3-单变量高斯模型（Univariate-Gaussian-Model）">3.3 单变量高斯模型（Univariate Gaussian Model）</h3><p><strong>3.3.1 给定$\sigma^2$的后验</strong></p><ul><li>**共轭先验：**另一个高斯分布：<br>$$N(\mu|m_0, \tau_0^2)$$</li><li>**更新公式：**后验分布也为高斯分布，参数为：<br>$$<br>\begin{align}<br>\hat{\tau}^2 &amp;= \frac{1}{\frac{1}{\sigma^2} + \frac{N}{\tau_0^2}} \<br>\hat{m} &amp;= \hat{\tau}^2 \left( \frac{m_0}{\tau_0^2} + \frac{N\bar{y}}{\sigma^2} \right)<br>\end{align}<br>$$<br>这里，$\bar{y}$是样本均值。</li></ul><p><strong>3.3.2 给定</strong>$μ$<strong>的后验</strong></p><ul><li><strong>共轭先验</strong>为逆伽马分布：<br>$$\text{IG}(\sigma^2|\alpha_0, \beta_0) \propto (\sigma^2)^{-\alpha_0 - 1} \exp\left(-\frac{\beta_0}{\sigma^2}\right)$$</li><li>**更新公式：**后验分布也是逆伽马分布，参数为：<br>$$<br>\begin{align}<br>&amp;\hat{\alpha} = \alpha_0 + \frac{N}{2} \<br>&amp;\hat{\beta} = \beta_0 + \frac{1}{2}\sum_{n=1}^{N}(y_n - \mu)^2<br>\end{align}<br>$$</li></ul><p><strong>3.3.3 对于均值</strong>$\mu$<strong>和方差</strong>$\sigma^2$<strong>的推断</strong></p><ul><li><p>**共轭先验：**正态-逆伽马分布（NIG）：<br>$$NIG(\mu, \sigma^2 | m, \kappa, a, b) \equiv N(\mu | m, \frac{\sigma^2}{\kappa}) IG(\sigma^2 | a, b)$$<br>一般就用正态-逆卡方分布（NIX）：<br>$$NI\chi^2(\mu, \sigma^2 | m, \kappa, \nu, \tau^2) \equiv N(\mu | m, \frac{\sigma^2}{\kappa}) \chi^{-2}(\sigma^2 | \nu, \tau^2)$$</p></li><li><p>**更新公式：**后验参数更新：<br>$$<br>\begin{align}<br>&amp;\hat{m} = \frac{\kappa m + N\hat{x}}{\hat{\kappa}} \<br>&amp;\hat{\kappa} = \kappa + N \<br>&amp;\hat{\nu} = \nu + N \<br>&amp;\hat{\nu} \hat{\tau}^2 = \nu \tau^2 + \sum_{n=1}^{N}(y_n - \bar{y})^2 + \frac{N\kappa}{\kappa + N}(m - \bar{y})^2<br>\end{align}<br>$$</p></li><li><p><strong>方差的后验边际分布：</strong><br>$$p(\sigma^2 | D) = \chi^{-2}(\sigma^2 | \hat{\nu}, \hat{\tau}^2)$$</p></li><li><p><strong>均值的后验边际分布：</strong><br>$$p(\mu | D) = T(\mu | \hat{m}, \frac{\hat{\tau}^2}{\hat{\kappa}}, \hat{\nu})$$</p></li></ul><h3 id="3-4-对于多变量高斯模型">3.4. 对于多变量高斯模型</h3><p><strong>3.4.1 在给定 Σ 的情况下推断 µ</strong></p><ul><li>**共轭先验：**高斯分布:<br>$$p(\mu) = N(\mu | m, V)$$</li><li><strong>后验分布：</strong> :<br>$$p(\mu | D, \Sigma) = N(\mu | \hat{m}, \hat{V})$$<br>更新公式：<br>$$<br>\begin{align}<br>&amp;\hat{V}^{-1} = V^{-1} + N\Sigma^{-1} \<br>&amp;\hat{m} = \hat{V}(\Sigma^{-1}(Ny) + V^{-1}m)<br>\end{align}<br>$$</li></ul><p><strong>3.4.2 在给定 µ 的情况下推断 Σ</strong></p><ul><li>**共轭先验：**逆Wishart分布:<br>$$p(\Sigma) = IW(\Sigma | \Psi^{-1}, \nu)$$</li><li><strong>后验分布：</strong> :<br>$$p(\Sigma | D, \mu) \propto IW(\Sigma | \hat{\Psi}, \hat{\nu})$$<br>更新公式：<br>$$<br>\begin{align}<br>&amp;\hat{\nu} = \nu + N\<br>&amp;\hat{\Psi} = \Psi + S_\mu<br>\end{align}<br>$$</li></ul><p><strong>3.4.3 同时推断 Σ 和 µ</strong></p><ul><li><strong>共轭先验：</strong><br>$$p(\mu, \Sigma) = N(\mu | m, V) IW(\Sigma | \Psi^{-1}, \nu)$$</li><li><strong>后验分布：</strong><br>$$p(\mu, \Sigma | D) \propto |\Sigma|^{-\frac{N + \nu + D + 2}{2}} \exp\left(-\frac{1}{2} \text{tr}(\Sigma^{-1} M)\right)$$<br>其中$M$是更新后的散点矩阵。</li></ul><h3 id="3-5-指数族模型">3.5 指数族模型</h3><p>唯一存在共轭先验的分布族是指数族，具体如下：</p><ul><li>**共轭先验：**我们可以将先验分布写成与似然函数相似的形式：<br>$$p(\eta|\tilde{\tau}, \tilde{\nu}) = \frac{1}{Z(\tilde{\tau}, \tilde{\nu})} \exp\left(\tilde{\tau}^T \eta - \tilde{\nu} A(\eta)\right)$$<br>其中，$\tilde{\nu}$是先验的强度，$\frac{\tilde{\tau}}{\tilde{\nu}}$​ 是先验均值，$Z(\tilde{\tau}, \tilde{\nu})$是归一化因子。</li><li><strong>后验分布：</strong><br>$$<br>\begin{align}<br>p(\eta|D) &amp;= \frac{p(D|\eta) p(\eta)}{p(D)} \<br>&amp;= \frac{h(D)}{Z(\tilde{\tau}, \tilde{\nu})p(D)} \exp\left( (\tilde{\tau} + s(D))^T \eta - (\tilde{\nu} + N) A(\eta)\right) \<br>&amp;= \frac{1}{Z(\hat{\tau}, \hat{\nu})} \exp\left(\hat{\tau}^T \eta - \hat{\nu} A(\eta)\right)<br>\end{align}<br>$$<br>其中：<br>$$<br>\begin{align}<br>&amp;\hat{\tau} = \tilde{\tau} + s(D)\<br>&amp;\hat{\nu} = \tilde{\nu} + N \<br>&amp;Z(\hat{\tau}, \hat{\nu}) = \frac{Z(\tilde{\tau}, \tilde{\nu})h(D)}{p(D)}<br>\end{align}<br>$$</li></ul><p>我们看到，后验分布与先验分布具有相同的形式，只是更新了充分统计量和样本大小。后验均值为先验均值与经验均值（即最大似然估计）之间的组合：</p><p>$$\begin{align*} E[\eta|D] &amp;= \frac{\hat{\tau}}{\hat{\nu}} \<br>&amp;= \frac{\tilde{\tau} + s(D)}{\tilde{\nu} + N} \<br>&amp;= \frac{\tilde{\nu}}{\tilde{\nu} + N} \frac{\tilde{\tau}}{\tilde{\nu}} + \frac{N}{\tilde{\nu} + N} \frac{s(D)}{N}  \<br>&amp;= \lambda E[\eta] + (1 - \lambda) \hat{\eta}_{MLE} \end{align*}$$</p><p>其中，$\lambda = \frac{\tilde{\nu}}{\tilde{\nu} + N}$​。</p><ul><li><strong>边际似然：</strong><br>$$p(D) = \frac{Z(\hat{\tau}, \hat{\nu}) h(D)}{Z(\tilde{\tau}, \tilde{\nu})}$$</li><li>**后验预测密度：**我们现在推导给定过去数据$D = (x_1, …, x_N)$时，未来观测$D’ = (x’<em>1, …, x’</em>{N’})$的预测密度，如下：</li></ul><p>$$\begin{align*} p(D’|D) &amp;= \int p(D’|\eta) p(\eta|D) d\eta \&amp;=h(D’) \frac{Z(\tilde{\tau} + s(D) + s(D’), \tilde{\nu} + N + N’)}{Z(\tilde{\tau} + s(D), \tilde{\nu} + N)} \end{align*}$$</p><h2 id="四、无信息先验">四、无信息先验</h2><p>在缺乏领域特定知识时，我们不希望主观定义不合理的先验，于是我们便可以选择无信息先验客观。主要有如下几种：</p><h3 id="1-最大熵先验（Maximum-entropy-priors）">1. 最大熵先验（Maximum entropy priors）</h3><p><strong>最大熵先验</strong>是一种不做过多假设的先验分布，适合在没有充足信息的情况下使用。通过最大化熵来选择先验，这种方法依赖于拉普拉斯提出的“不充分理由原则”，即当我们没有理由偏向某个特定值时，应选择“平坦”的分布。例如，对于伯努利分布的参数 θ（取值范围 [0,1]），最大熵先验是均匀分布。</p><p>我们也可以根据已知约束来定义最大熵先验，使其在满足这些约束的同时使得熵最大化。书中举了一个例子：</p><p><img src="/images/Fundamentals-Statistics/12.png" alt></p><h3 id="2-杰弗里斯先验（Jeffreys-priors）">2. 杰弗里斯先验（Jeffreys priors）</h3><p><strong>Jeffreys priors</strong>通过保证对参数化不敏感，即在不同的参数化方式下，后验分布不会改变。杰弗里斯先验的一个关键特性是对参数的变化保持不变，这意味着无论采用何种参数化方式，结果应该是一致的。</p><p><img src="/images/Fundamentals-Statistics/13.png" alt><br>参数$\theta$的 Jeffreys Prior 为以下形式：</p><p>$$p_{J}(\theta) \propto \sqrt{\mathcal{I}(\theta)}$$</p><p>其中，$\mathcal{I}(\theta)$是我们所熟知的Fisher信息量。证明如下：</p><p><img src="/images/Fundamentals-Statistics/14.png" alt><br>例如对于伯努利分布，其杰弗里斯先验是 Beta(1/2, 1/2) 分布。</p><h3 id="3-不变性先验（Invariant-priors）">3. 不变性先验（Invariant priors）</h3><p>不变性先验是指当我们知道某些不变性时，可以将其编码进先验中。例如：</p><p><strong>平移不变先验</strong>：对位置参数的推断可以使用平移不变先验，这种先验在任何相同宽度的区间上都分配相同的概率质量。</p><p><img src="/images/Fundamentals-Statistics/15.png" alt><br><strong>尺度不变先验</strong>：对尺度参数的推断可以使用尺度不变先验，其满足任意比例缩放后保持相同概率质量。</p><p><img src="/images/Fundamentals-Statistics/16.png" alt></p><h3 id="4-参考先验（Reference-priors）">4. 参考先验（Reference priors）</h3><p>参考先验通过最大化数据集上的后验与先验之间的KL散度来定义。它旨在使先验尽可能远离所有可能的后验分布，从而保持非信息性。参考先验可以看作是对不同数据集的互信息最大化问题。对于一维情况，参考先验等同于Jeffreys priors，而在高维情况下，计算起来则更复杂。</p><h2 id="五、层次先验（Hierarchical-priors）">五、层次先验（Hierarchical priors）</h2><p>贝叶斯模型需要为参数$\theta$指定先验$p(\theta)$，而先验的参数（超参数$\xi$）也是未知的。为了处理这种不确定性，我们可以对超参数$\xi$再定义一个先验，从而构建<strong>层次贝叶斯模型</strong>。这种模型的形式化表达为：$p(\xi, \theta, D) = p(\xi) p(\theta | \xi) p(D | \theta)$</p><p><img src="/images/Fundamentals-Statistics/17.png" alt><br>这表明数据$D$通过参数$\theta$依赖于超参数$\xi$，从而形成一个层次结构。</p><p>在实际问题中，如果我们有多个相关的数据集$D_j$​，各个数据集有自己的参数$\theta_j$，那么分别独立估计每个$\theta_j$​ 可能会产生不可靠的结果，特别是当某个数据集较小时。层次模型可以通过共享超参数$\xi$来借用数据量大的群体的信息，帮助数据量小的群体进行更好的估计.</p><h3 id="1-层次二项模型的例子">1. 层次二项模型的例子</h3><p>问题背景：假设我们想估计不同群体中某种疾病的患病率，每个群体的样本量是$N_j$​，阳性病例数是$y_j$。我们可以假设$y_j$服从二项分布$\text{Bin}(N_j, \theta_j)$，其中$\theta_j$​ 是该群体的患病率。</p><p>如果直接对每个群体单独估计$\theta_j$，特别是当样本量$N_j$很小时，可能会导致不可靠的结果。比如，如果$y_j = 0$，我们可能会估计$\hat{\theta_j} = 0$，尽管实际的患病率可能更高。</p><p>解决方案：为了避免这种问题，可以假设所有的$\theta_j$不是独立的，而是从一个共同的 Beta 分布中抽取，即$\theta_j \sim \text{Beta}(a, b)$。这个假设允许我们通过共享的先验$\xi = (a, b)$来提高估计的可靠性。这种模型的联合分布可以写作：<br>$$p(D, \theta, \xi) = p(\xi) \prod_{j=1}^{J} \text{Beta}(\theta_j | \xi) \prod_{j=1}^{J} \text{Bin}(y_j | N_j, \theta_j)$$</p><p>后验推断：可以通过<strong>Hamiltonian Monte Carlo（HMC）<strong>算法来进行后验推断，生成超参数$\xi$和群体参数$\theta_j$​ 的样本。对于每个群体，后验均值$E[\theta_j | D]$会根据数据量的大小进行调整。对于数据较少的群体，估计值会向全体群体的均值（共享信息）靠拢，这种现象被称为</strong>收缩（shrinkage）</strong>。</p><p><img src="/images/Fundamentals-Statistics/18.png" alt></p><h3 id="2-层次高斯模型的例子">2. 层次高斯模型的例子</h3><p>问题背景：现在考虑实数值数据的情况，假设我们有多个群体的数据，每个群体的数据$y_{ij}$服从正态分布$N(\theta_j, \sigma^2)$，其中$\theta_j$​ 是该群体的均值，$\sigma^2$是固定的方差。</p><p>与二项模型类似，我们可以假设各群体的均值$\theta_j$​ 来自一个共同的正态分布$\theta_j \sim N(\mu, \tau^2)$。这个模型的联合分布为：<br>$$p\propto p(\mu)p(\tau^2) \prod_{j=1}^{J} N(\theta_j | \mu, \tau^2) N(y_j | \theta_j, \sigma_j^2)$$</p><p>其中$p(\mu)$和$p(\tau^2)$是超参数的先验分布，可以假定$\sigma_j^2$是知道的。</p><p><img src="/images/Fundamentals-Statistics/19.png" alt><br>对于每个群体，后验均值$E[\theta_j | D]$会介于单独的最大似然估计值$\hat{\theta_j}$和全局均值$\mu$之间。根据公式：<br>$$E[\theta_j | D, \mu, \tau^2] = w_j \mu + (1 - w_j) \hat{\theta_j}$$</p><p>​其中<strong>收缩系数</strong>$w_j = \frac{\sigma_j^2}{\sigma_j^2 + \tau^2}$​​。数据量较小或不确定性较高的群体（即$\sigma_j^2$较大的群体）会有更大的收缩，意味着它们的估计值会更多地依赖于全局均值。</p><p>为了解决算法在进行后验推断时的计算效率问题，可以采用<strong>非中心化参数化（non-centered parameterization）</strong>。这种方法通过重新表达$\theta_j = \mu + \tau \eta_j$，其中$\eta_j \sim N(0, 1)$，从而减少参数之间的依赖性，提升推断的计算效率。</p><p><img src="/images/Fundamentals-Statistics/20.png" alt></p><h2 id="六、经验贝叶斯">六、经验贝叶斯</h2><p>对于层次贝叶斯模型，在<strong>全贝叶斯推断</strong>中，我们对底层参数和超参数同时进行推断，计算$p(\theta, \xi | D)$的联合后验分布。虽然这种方法在统计上是更为严格的，但计算量通常较大。<strong>经验贝叶斯</strong>提供了一种近似方法，首先通过最大化边际似然（如$p(D|\xi)$）估计超参数$\xi$，然后在给定这些估计值的条件下推断底层参数的后验分布（如$p(\theta|\hat{\xi}, D)$）。这种方法通过对超参数做<strong>点估计</strong>，而非推断它们的后验分布，因此简化了计算。</p><p>通过边际似然最大化来估计超参数是经验贝叶斯的核心步骤。具体来说，经验贝叶斯在给定数据$D$的条件下，通过<strong>最大化边际似然</strong>$p(D|\xi)$来找到最优的超参数估计值$\hat{\xi}$​。这种方法有时也被称为<strong>II类最大似然</strong>，因为它不是直接优化底层参数$\theta$，而是先优化超参数$\xi$。</p><p><img src="/images/Fundamentals-Statistics/21.png" alt></p><h3 id="1-经验贝叶斯在层次二项模型中的应用">1. 经验贝叶斯在层次二项模型中的应用</h3><p>在二项分布的层次模型中，经验贝叶斯的边际似然可以通过积分将底层参数$\theta_j$​ 消除掉，从而直接用超参数$\xi$表示边际似然。具体公式是：</p><p>$$p(D|\xi) = \prod_j \int \text{Bin}(y_j|N_j, \theta_j) \text{Beta}(\theta_j | a, b) d\theta_j$$</p><p>经验贝叶斯方法通过最大化此边际似然来估计超参数$a$和$b$，然后在给定这些估计值后，再计算每个$\theta_j$的后验分布。</p><p><img src="/images/Fundamentals-Statistics/22.png" alt></p><h3 id="2-经验贝叶斯在层次高斯模型中的应用">2. 经验贝叶斯在层次高斯模型中的应用</h3><p>在层次高斯模型中，经验贝叶斯可以通过边际化$\theta_j$​ 得到边际似然，并利用最大似然估计超参数$\mu$和$\tau^2$。在这个例子中，边际似然公式是：</p><p>$$p(D|\mu, \tau^2, \sigma^2) = \prod_{j=1}^{J} N(y_j | \mu, \tau^2 + \sigma^2)$$</p><p>然后通过矩匹配方法估计$\tau^2$和$\mu$。</p><p><img src="/images/Fundamentals-Statistics/23.png" alt></p><h3 id="3-经验贝叶斯在马尔可夫模型中的应用">3. 经验贝叶斯在马尔可夫模型中的应用</h3><p>经验贝叶斯还可以用于语言模型中的 <strong>n-gram 平滑问题</strong>。在这个上下文中，经验贝叶斯被用来估计马尔可夫链中状态转移矩阵的先验分布。通过为转移矩阵的每一行设定一个独立的狄利克雷分布作为先验，经验贝叶斯可以通过最大化边际似然来估计先验参数$\alpha$和$m$，从而得到自适应的平滑方法。这个方法的优势在于，它能够根据数据自动调整平滑参数$\lambda_j$，从而提高模型的表现。</p><p>在 n-gram 语言模型中，我们希望计算不同词之间的转移概率，比如在二元模型（bigram model）中，给定词$X_t = j$，下一个词$X_{t+1} = k$的概率可以由转移矩阵$A_{jk}$​ 来表示。传统的加一平滑方法对每一个可能的词对$(j, k)$都假设了一个等价的概率，但这种假设往往过于简单。**删除插值（deleted interpolation）**是一个更复杂的方案，定义了如下的转移矩阵表示：</p><p>$$A_{jk} = (1 - \lambda) f_{jk} + \lambda f_k$$</p><p>其中，$f_{jk} = \frac{N_{jk}}{N_j}$是从词$j$到词$k$的 bigram 频率，$f_k = \frac{N_k}{N}$​​ 是词$k$的 unigram 频率，而$\lambda$是一个通过交叉验证选择的平滑参数。</p><p><img src="/images/Fundamentals-Statistics/24.png" alt><br>然而，删除插值方法没有考虑不同的上下文在词的频率中可能有不同的重要性。贝叶斯方法则可以为每个上下文动态地调整平滑参数$\lambda_j$​。</p><p>通过经验贝叶斯的方法对删除插值进行了重新解释。首先，假设转移矩阵的每一行都遵循独立的 Dirichlet 先验分布：</p><p>$$A_j \sim Dir(\alpha_0 m_1, \dots, \alpha_0 m_K) = Dir(\alpha_0 m) = Dir(\alpha)$$</p><p>其中，$A_j$是转移矩阵的第$j$行，$m$是先验均值向量，满足$\sum_k m_k = 1$，而$\alpha_0$​ 是先验强度。通过贝叶斯推断，可以得到转移矩阵行$A_j$的后验分布：</p><p>$$A_j \sim Dir(\alpha + N_j)$$</p><p>其中$N_j = (N_{j1}, \dots, N_{jK})$是从状态$j$转移到其他状态的计数向量。在此基础上，后验预测密度为：</p><p>$$p(X_{t+1} = k | X_t = j, D) = \frac{N_{jk} + \alpha_j m_k}{N_j + \alpha_0}$$</p><p>这个公式可以改写为删除插值的形式：</p><p>$$p(X_{t+1} = k | X_t = j, D) = (1 - \lambda_j) f_{jk} + \lambda_j m_k$$</p><p>其中，$\lambda_j = \frac{\alpha_j}{N_j + \alpha_0}$是动态调整的平滑参数，表示给定上下文$j$时，将先验分布与经验数据相结合的权重。</p><p><img src="/images/Fundamentals-Statistics/25.png" alt><br>EB 方法的核心思想是通过数据来估计 <strong>Dirichlet 分布</strong>的超参数$\alpha$和$m$。在这个问题中，有一种近似方法来估计先验均值$m$：</p><p>$$m_k \propto |{ j : N_{jk} &gt; 0 }|$$</p><p>这个估计意味着某个词$k$的先验概率与该词出现在多少种不同的上下文中有关，而不是它的具体出现次数。这种估计方法可以解决某些平滑方法中的不足。举个例子，如果在一个数据集中“you see”频繁出现，那么虽然 “you” 和 “see” 的 unigram 频率相同，但是它们在新上下文中出现的概率不应该相等。贝叶斯模型通过先验分布的参数$m_k$​ 可以自适应地处理这种情况。</p><p><img src="/images/Fundamentals-Statistics/26.png" alt></p><h2 id="七、模型选择">七、模型选择</h2><p>在统计建模中，选择合适的模型至关重要。所有模型都存在一定的误差，然而某些模型能更好地适应数据，提供有用的预测。选择模型时，我们需要考虑模型的假设和拟合能力，确保它能在现实世界中应用。</p><h3 id="1-贝叶斯模型选择">1. 贝叶斯模型选择</h3><p>贝叶斯模型选择的一个自然的想法是利用后验概率来确定最有可能生成数据的模型。公式如下：</p><p>$$\hat{m} = \arg\max_{m \in M} p(m|D)$$</p><p>这里的$p(m|D)$表示给定数据$D$下模型$m$的后验概率。根据贝叶斯定理，我们可以表示为：</p><p>$$p(m|D) = \frac{p(D|m)p(m)}{\sum_{m \in M} p(D|m)p(m)}$$</p><p>如果模型的先验是均匀的，即$p(m) = \frac{1}{|M|}$，那么最大后验模型是：</p><p>$$\hat{m} = \arg\max_{m \in M} p(D|m)$$</p><p><img src="/images/Fundamentals-Statistics/27.png" alt><br>但是不同的模型设计是有好坏之分的。</p><p><strong>示例：硬币是否公平？</strong></p><p>假设我们想知道某个硬币是否是公平的。我们可以设定两个模型：</p><p>$M_0$：假设硬币是公平的，即$\theta = 0.5$。</p><p>$M_1$​：假设硬币是偏向的，即$\theta$可以是任意值。</p><p>通过比较这两个模型的边际似然，我们可以决定哪个模型更有可能解释观察到的数据。例如：</p><p>在公平硬币模型下，观察到$N$次投掷的边际似然是：</p><p>$$p(D|M_0) = \left( \frac{1}{2} \right)^N$$</p><p>在偏向硬币模型下，边际似然更复杂，需要计算贝塔分布的积分：</p><p>$$p(D|M_1) = \int p(D|\theta)p(\theta|M_1)d\theta$$</p><p>如果观察到的正面次数较多，模型$M_1$​ 的可能性会更高。可能说明$M_0$的先验并不好。</p><h3 id="2-贝叶斯模型平均">2. 贝叶斯模型平均</h3><p>如果我们的目标是进行准确的预测，综合所有模型的预测结果通常比只依赖单一模型更好。贝叶斯模型平均可以表示为：</p><p>$$p(y|D) = \sum_{m \in M} p(y|m)p(m|D)$$<br>这里$p(y|m)$是模型$m$对新数据$y$的预测。通过对所有模型的预测进行加权平均，我们可以得到更稳健的结果。</p><p>与机器学习中的集成技术类似，我们取预测器的加权组合。然而，集成的权重不必总和为 1，尤其是在贝叶斯模型平均中，如果有一个最佳模型$m^<em>$，在大样本极限下，$p(m|D)$将成为一个在$m^</em>$上的退化分布，其他模型将被忽略。</p><p><img src="/images/Fundamentals-Statistics/28.png" alt></p><h3 id="3-边际似然估计">3 边际似然估计</h3><p>为了进行贝叶斯模型选择，我们需要计算在给定先验的条件下的边际似然：</p><p>$$p(D|m) = \int p(D|\theta, m)p(\theta|m)d\theta$$</p><p>这里的积分通常难以直接计算。对于共轭先验模型，边际似然可以解析计算，这类模型因其先验与后验分布形式一致，使得边际似然的计算变得简单明了。</p><p>但对于其它的，我们可以使用变分推断或蒙特卡洛方法来估计。文中还给了一个<strong>Harmonic mean estimator</strong>的方法：</p><p><img src="/images/Fundamentals-Statistics/29.png" alt></p><h3 id="4-交叉验证与边际似然的联系">4. 交叉验证与边际似然的联系</h3><p><strong>交叉验证</strong>是一种评估模型预测能力的常用方法。它通过将数据划分为训练集和验证集来评估模型的表现。**留一交叉验证（LOO-CV）**是一种特殊的情况，其中每次留出一个样本进行测试，其他样本用于训练。</p><p>交叉验证的结果可以用来估计模型的泛化能力。</p><p><img src="/images/Fundamentals-Statistics/30.png" alt><br>它与**对数边际似然（LML）**有很一定的关系：</p><p><img src="/images/Fundamentals-Statistics/31.png" alt></p><h3 id="5-条件边际似然">5. 条件边际似然</h3><p>边际似然用于回答“从先验生成训练数据的可能性有多大？”。它适用于在不同的固定先验之间进行假设检验，但很多时候我们更关心的是“后验能够生成数据分布中的新样本的概率是多少？”，这与模型的泛化性能相关联。</p><p>研究表明，边际似然有时可能与模型的泛化性能负相关。这是因为边际似然可能会出现先验较差但模型快速适应数据的情况</p><p>为了解决这个问题，研究者们提出了<strong>条件对数边际似然（CLML）</strong>，公式为：</p><p>$$CLML(m) = \sum_{n=K}^{N} \log p(D_n|D_{1:n-1}, m)$$</p><p>其中，$K \in {1, \dots, N}$是算法的一个参数。CLML通过给定前$K$个数据点的后验分布来评估后续$N - K$个数据点的边际似然。这种方法减少了数据点顺序对结果的依赖。特别地，当$K = N - 1$并对所有数据顺序进行平均时，这种方法相当于<strong>留一法（LOO）估计</strong>。</p><p><img src="/images/Fundamentals-Statistics/32.png" alt></p><h3 id="6-贝叶斯留一法估计">6. 贝叶斯留一法估计</h3><p>对于监督模型来说，一个我们关注的点是**ELPD（expected log-pointwise predictive density），**ELPD 是对未来数据的预测性能进行估计的度量：</p><p>$$ELPD(m) = \mathbb{E}_{(x^<em>, y^</em>)} \left[ \log p(y^<em>|x^</em>, D, m) \right]$$</p><p>由于未来数据未知，因此可以使用 LOO 近似，即将部分数据点从数据集中移除并计算其预测分布：</p><p>$$ELPD_{\text{LOO}}(m) = \sum_{n=1}^N \log p(y_n|x_n, D_{-n}, m)$$</p><p><img src="/images/Fundamentals-Statistics/33.png" alt></p><p>直接计算$ELPD_{\text{LOO}}$​ 需要计算$N$次不同的后验分布，这比较慢。可以通过只计算一次后验分布$p(\theta|D, m)$，然后使用<strong>重要性采样</strong>近似 LOO 积分。</p><p>重要性采样的核心思想是定义目标分布$f(\theta) = p(\theta|D_{-n}, m)$，并使用已知的提议分布$g(\theta) = p(\theta|D, m)$，计算重要性权重：</p><p>$$w_{s,-n} = \frac{f(\theta_s)}{g(\theta_s)} \propto \frac{1}{p(D_n|\theta_s)}$$</p><p>将这些权重进行归一化后，可以用来近似 <strong>LOO 估计</strong>：</p><p>$$ELPD_{\text{IS-LOO}}(m) = \sum_{n=1}^N \log \sum_{s=1}^S \hat{w}_{s,-n} p(y_n|x_n, \theta_s, m)$$</p><p><img src="/images/Fundamentals-Statistics/34.png" alt></p><p>重要性采样的一个问题是，权重的方差可能非常大，导致一些权重值过大。为了解决这个问题，可以对每个样本的权重拟合一个 <strong>Pareto 分布</strong>，从而对权重进行平滑。这样可以减少异常值对 LOO 估计的影响。</p><p><img src="/images/Fundamentals-Statistics/35.png" alt></p><h2 id="八、模型检测与假设检验">八、模型检测与假设检验</h2><h3 id="1-后验预测检查（Posterior-Predictive-Checks）：">1. 后验预测检查（Posterior Predictive Checks）：</h3><p>通过已知数据和模型生成未来的<strong>合成数据</strong>，以评估真实数据与模型生成的数据是否相似。如果模型生成的数据与真实数据差异很大，说明模型无法捕捉数据中的某些特征，模型可能不适合。</p><p><img src="/images/Fundamentals-Statistics/36.png" alt></p><h3 id="2-贝叶斯p值">2.贝叶斯p值</h3><p>通过计算<strong>贝叶斯p值</strong>来量化模型的合理性。如果观测到的测试统计量位于预测分布的极端部分（即p值接近0或1），说明模型无法合理解释数据</p><p><img src="/images/Fundamentals-Statistics/37.png" alt></p><h3 id="3-假设检验">3. 假设检验</h3><p>与频率学派的假设检验相对，贝叶斯方法提供了假设检验的两种替代方案：</p><ul><li><strong>使用贝叶斯因子进行模型比较</strong>：贝叶斯假设检验不再将检验统计量与临界值进行比较，而是评估在两种模型下数据的边际似然比——零假设$M_0$​ 和替代假设$M_1$​。这个比值称为贝叶斯因子，表示为：<br>$B_{1,0} = \frac{p(D | M_1)}{p(D | M_0)}$如果$B_{1,0} &gt; 1$，我们倾向于支持$M_1$，否则我们更倾向于支持$M_0$​。</li></ul><p><img src="/images/Fundamentals-Statistics/38.png" alt></p><ul><li><strong>基于参数估计</strong>：即估计在假设条件下附近的概率。例如，要测试硬币是否公平，我们计算正面概率$\theta$的后验分布，并检查接近 0.5 的区域中有多少概率质量。</li></ul><p><img src="/images/Fundamentals-Statistics/39.png" alt></p>]]></content>
    
    
    <categories>
      
      <category>Probabilistic Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>概率论与数理统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[旅游日志] :青甘大环线</title>
    <link href="/2024/10/09/%E9%9D%92%E7%94%98%E5%A4%A7%E7%8E%AF%E7%BA%BF/"/>
    <url>/2024/10/09/%E9%9D%92%E7%94%98%E5%A4%A7%E7%8E%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>2024年的国庆假期，笔者忙完了保研，于是和高中同学一起去青甘大环线进行了7天的自驾游，在这记录保存一下笔者看到的祖国大西北的美景。</p><h2 id="青海湖">青海湖</h2><p>大环线的第一站，青海湖比我想象中大很多，可惜景点只有一小部分。</p><p><img src="/images/青甘大环线/1.jpg"></p><p><img src="/images/青甘大环线/2.jpg"></p><p><img src="/images/青甘大环线/3.jpg"></p><p><img src="/images/青甘大环线/4.jpg"></p><p><img src="/images/青甘大环线/5.jpg"></p><h2 id="茶卡盐湖">茶卡盐湖</h2><p>第二站去的茶卡盐湖，说是中国的天空之镜，可惜去的是晚上，没有欣赏到。btw，去茶卡盐湖一定要买小火车，笔者走了好久但还是没走到终点。</p><p><img src="/images/青甘大环线/6.jpg"></p><p><img src="/images/青甘大环线/7.jpg"></p><p><img src="/images/青甘大环线/8.jpg"></p><h2 id="水上雅丹">水上雅丹</h2><p>第二天去的水上雅丹，总体来说比较独特的地貌。</p><p><img src="/images/青甘大环线/9.jpg"></p><p><img src="/images/青甘大环线/10.jpg"></p><p><img src="/images/青甘大环线/11.jpg"></p><p><img src="/images/青甘大环线/12.jpg"></p><h2 id="翡翠湖">翡翠湖</h2><p>翡翠湖估计是我觉得这趟旅行最好看的经典了，真的非常好看。</p><p><img src="/images/青甘大环线/13.jpg"></p><p><img src="/images/青甘大环线/14.jpg"></p><p><img src="/images/青甘大环线/15.jpg"></p><p><img src="/images/青甘大环线/16.jpg"></p><p><img src="/images/青甘大环线/17.jpg"></p><p><img src="/images/青甘大环线/18.jpg"></p><h2 id="莫高窟">莫高窟</h2><p>莫高窟洞窟内不让拍照，只拍了外面，总体来说体验一波佛教文化。</p><p><img src="/images/青甘大环线/19.jpg"></p><p><img src="/images/青甘大环线/20.jpg"></p><p><img src="/images/青甘大环线/21.jpg"></p><h2 id="鸣沙山和月牙泉">鸣沙山和月牙泉</h2><p>鸣沙山是很高沙丘，笔者玩了滑沙的项目。国庆晚上会有万人演唱会，氛围还是可以的。</p><p><img src="/images/青甘大环线/22.jpg"></p><p><img src="/images/青甘大环线/23.jpg"></p><p><img src="/images/青甘大环线/24.jpg"></p><p><img src="/images/青甘大环线/25.jpg"></p><h2 id="嘉峪关">嘉峪关</h2><p>天下第一雄关，也算是人文景观了。</p><p><img src="/images/青甘大环线/26.jpg"></p><p><img src="/images/青甘大环线/27.jpg"></p><p><img src="/images/青甘大环线/28.jpg"></p><h2 id="七彩丹霞">七彩丹霞</h2><p>最后驿站去的七彩丹霞，还是十分好看的。</p><p><img src="/images/青甘大环线/29.jpg"></p><p><img src="/images/青甘大环线/30.jpg"></p><p><img src="/images/青甘大环线/31.jpg"></p><p><img src="/images/青甘大环线/32.jpg"></p><p><img src="/images/青甘大环线/33.jpg"></p><h2 id="其它">其它</h2><p>一些有意思的图片，第一张是买的沙瓶纪念品。 <img src="/images/青甘大环线/34.jpg"></p><p><img src="/images/青甘大环线/35.jpg"></p><p><img src="/images/青甘大环线/36.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活blog</category>
      
      <category>旅行日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Probabilistic Machine Learning]: Fundamentals-Probability</title>
    <link href="/2024/10/08/Fundamentals-Probability/"/>
    <url>/2024/10/08/Fundamentals-Probability/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习<strong>Probabilistic Machine Learning</strong>的学习笔记，分享记录，也便于自己实时查看。</p><h2 id="一、Probability基础知识">一、Probability基础知识</h2><h3 id="1-Probability-space">1. Probability space</h3><p>概率空间是一个三元组$(Ω，F，P)$，其中$Ω$是样本空间，是实验可能结果的集合；$F$是事件空间，它是$Ω$所有可能子集的集合；$P$是概率函数，它是从事件$E \subsetΩ$到$[0,1]$中的一个数(即$P: F→[0,1]$)的映射，它满足一定的一致性等要求，具体如下：</p><p><img src="/images/Fundamentals-Probability/1.png" alt></p><h3 id="2-其它">2. 其它</h3><p>离散随机变量定义，连续随机变量定义，条件概率，贝叶斯公式…</p><p>具体略过</p><h2 id="二、常见分布">二、常见分布</h2><h3 id="1-Discrete-distributions">1. Discrete distributions</h3><h4 id="1-1-Bernoulli-and-binomial-distributions：">1.1 Bernoulli and binomial distributions：</h4><p><strong>伯努利分布</strong>和<strong>二项分布</strong>，也很熟悉了</p><p><img src="/images/Fundamentals-Probability/2.png" alt></p><h4 id="1-2-Categorical-and-multinomial-distribution：">1.2 Categorical and multinomial distribution：</h4><p><img src="/images/Fundamentals-Probability/3.png" alt><br>其实也就是对伯努利分布和二项分布在<strong>更多的类别</strong>上的分布：</p><p><img src="/images/Fundamentals-Probability/4.png" alt></p><h4 id="1-3-Poisson-distribution">1.3 Poisson distribution</h4><p><strong>泊松分布</strong>，本科课程也重点学习过**：**</p><p><img src="/images/Fundamentals-Probability/5.png" alt></p><h4 id="1-4-Negative-binomial-distribution">1.4 Negative binomial distribution</h4><p><strong>负二项分布</strong>又称帕斯卡分布（巴斯卡分布），它表示，已知一个事件在伯努利试验中每次的成功的概率是$p$，在一连串伯努利实验中，直到失败$r$次，此时成功次数作为随机变量$x$。</p><p>$r=1$时，即为几何分布。</p><p><img src="/images/Fundamentals-Probability/6.png" alt></p><h3 id="2-分布在R上的Continuous-distributions">2. 分布在R上的Continuous distributions</h3><h4 id="2-1-Gaussian-（Normal）">2.1 Gaussian （Normal）</h4><p><strong>高斯分布</strong>，最经典的分布</p><p><img src="/images/Fundamentals-Probability/7.png" alt><br><img src="/images/Fundamentals-Probability/8.png" alt></p><h4 id="2-2-Half-normal">2.2 Half-normal</h4><p><strong>半正态分布</strong>即一个高斯分布的绝对值（比如很多时候建模需要非负）</p><p><img src="/images/Fundamentals-Probability/9.png" alt></p><h4 id="2-3-Student-t-distribution">2.3 Student t-distribution</h4><p><strong>t-分布</strong>也比较熟悉了：</p><p><img src="/images/Fundamentals-Probability/10.png" alt></p><h4 id="2-4-Cauchy-distribution">2.4 Cauchy distribution</h4><p><strong>Cauchy distribution</strong>是t-分布的特例：</p><p><img src="/images/Fundamentals-Probability/11.png" alt></p><h4 id="2-5-Laplace-distribution">2.5 Laplace distribution</h4><p><strong>拉帕拉斯分布</strong>也是很有名的分布，把高斯分布的平方改成了绝对值：</p><p><img src="/images/Fundamentals-Probability/12.png" alt></p><h4 id="2-6-Sub-Gaussian-and-super-Gaussian-distributions">2.6 Sub-Gaussian and super-Gaussian distributions</h4><p>其实就是比较尾部衰减速度。<strong>超高斯分布</strong>式指随机过程$X$的<strong>四阶累计量</strong>恒大于零，并且关于其均值对称分布。而<strong>亚高斯分布</strong>就是恒小于零。</p><p>例如拉普拉斯分布就是超高斯分布一种，而<strong>均匀分布</strong>就是亚高斯分布一种。</p><p><img src="/images/Fundamentals-Probability/13.png" alt><br>具体对比如图：</p><p><img src="/images/Fundamentals-Probability/14.png" alt></p><h3 id="3-分布在正实数上的Continuous-distributions">3. 分布在正实数上的Continuous distributions</h3><h4 id="3-1-Gamma-distribution">3.1 Gamma distribution</h4><p><strong>伽马分布</strong>以<strong>伽马函数</strong>为基础，非常灵活。</p><p>“指数分布”和“$χ^{2}$分布”都是伽马分布的特例。</p><p><img src="/images/Fundamentals-Probability/15.png" alt><br>概率分布的可视化如下：</p><p><img src="/images/Fundamentals-Probability/16.png" alt></p><h4 id="3-2-Exponential-distribution">3.2 Exponential distribution</h4><p><strong>指数分布</strong>，伽马分布的特例。本科课程也重点学习过。</p><p><img src="/images/Fundamentals-Probability/17.png" alt></p><h4 id="3-3-Chi-squared-distribution">3.3 Chi-squared distribution</h4><p>$χ^{2}$分布，伽马分布的特例。也比较熟悉了。</p><p><img src="/images/Fundamentals-Probability/18.png" alt><br><img src="/images/Fundamentals-Probability/19.png" alt></p><h4 id="3-4-Inverse-gamma">3.4 Inverse gamma</h4><p><strong>倒伽马分布</strong>是伽马分布变量的倒数。倒$χ^{2}$分布是其特例。</p><p><img src="/images/Fundamentals-Probability/20.png" alt></p><h4 id="3-5-Pareto-distribution">3.5 Pareto distribution</h4><p><strong>帕累托分布</strong>是以意大利经济学家维弗雷多·帕雷托命名的。 是从大量真实世界的现象中发现的<strong>幂定律</strong>分布。其形式如下：</p><p><img src="/images/Fundamentals-Probability/21.png" alt><br>可以注意到，对概率分布取对数，则会得到一个线性函数，所以NLP中大名鼎鼎的<strong>齐夫定律</strong>便服从这个分布：</p><p><img src="/images/Fundamentals-Probability/22.png" alt><br><img src="/images/Fundamentals-Probability/23.png" alt><br>对于尾部比较大的分布的建模，帕累托分布是有用的，现实中许多形式的数据都具有这种特性。如：</p><ul><li>财富在个人之间的分布（80%的人掌握20%的财富）</li><li>人类居住区的大小</li><li>对维基百科条目的访问</li></ul><p>一般认为这是因为数据是由各种潜在因素产生的，当这些潜在因素混合在一起时，自然会导致这种重尾的分布。</p><p><img src="/images/Fundamentals-Probability/24.png" alt><br>其概率分布的直观展示如下：</p><p><img src="/images/Fundamentals-Probability/25.png" alt></p><h3 id="4-分布在-0-1-上的Continuous-distributions">4. 分布在[0, 1]上的Continuous distributions</h3><h4 id="4-1-Beta-distribution">4.1 Beta distribution</h4><p>所谓的以$\alpha, \beta$为参数的 <strong>Beta 分布</strong>$f(x; \alpha, \beta)$，其实描述的就是我们在做抛硬币实验的过程中，我们当前如果已经观测到$\alpha + 1$次正面，$\beta + 1$次反面，那么此时硬币正面朝上的真实概率的可能性分布。</p><p>即，Beta 分布是一个作为伯努利分布和二项式分布的<strong>共轭先验分布</strong>的密度函数。</p><p><img src="/images/Fundamentals-Probability/26.png" alt></p><h3 id="5-Multivariate-continuous-distributions">5.Multivariate continuous distributions</h3><h4 id="5-1-Multivariate-normal-Gaussian">5.1 Multivariate normal (Gaussian)</h4><p>多元高斯函数是最重要最经典的多元分布了，下面会专门详细学习。</p><h4 id="5-2-Multivariate-Student-distribution">5.2 Multivariate Student distribution</h4><p><strong>多元t分布</strong>的形状与多元高斯比较类似，主要是峰值更低，尾部缩减更慢。</p><p><img src="/images/Fundamentals-Probability/27.png" alt><br>当$v$趋近于无穷时，其逐渐逼近多元高斯分布，其均值和协方差矩阵如下：</p><p><img src="/images/Fundamentals-Probability/28.png" alt></p><h4 id="5-3-Circular-normal-von-Mises-Fisher-distribution">5.3 Circular normal (von Mises Fisher) distribution</h4><p>现实中，有些数据仅仅分布于一个<strong>单位球</strong>上，而不是欧式空间的任何一点都有概率。此时，<strong>冯·米塞斯分布</strong>就是针对这种情况。</p><p>冯·米塞斯分布就是高斯分布在单位球上的拓展。</p><p><img src="/images/Fundamentals-Probability/29.png" alt></p><h4 id="5-4-Matrix-normal-distribution-MN">5.4 Matrix normal distribution (MN)</h4><p>Matrix normal distribution是作用于矩阵的正态分布，其定义如下：</p><p><img src="/images/Fundamentals-Probability/30.png" alt><br>它可以转化为作用于向量上的多元高斯分布，只要将<strong>矩阵正态分布</strong>进行<strong>向量化</strong>处理便可以得到多元正态分布形式，如上所示。</p><p>这两者<strong>完全等价</strong> (证明过程可以参考<a href="https://en.wikipedia.org/wiki/Matrix_normal_distribution">https://en.wikipedia.org/wiki/Matrix_normal_distribution</a>)，公式中的符号$\otimes$表示 <strong>Kronecker积</strong>，$V\otimes U$表示多元正态分布的协方差矩阵；符号$\text{vec}\left(\cdot\right)$表示将给定矩阵<strong>按列</strong>组织成一个向量。</p><p>这两者完全等价，但在实践中，考虑到协方差矩阵$V\otimes U\in\mathbb{R}^{(mn)\times (mn)}$，假设我们想生成一个大小为$100\times 200$的随机矩阵$X$，并要求矩阵$X$在概率上服从矩阵正态分布。此时，若利用多元正态分布进行生成，则需要协方差矩阵$V\otimes U$的大小为$(100\times 200)\times (100\times 200)=20000\times 20000$，元素数量为$4\times 10^8$，显然，这个数字很惊人，毕竟存储这么大的矩阵就需要消耗计算机比较多的内存了，所以<strong>矩阵正态分布</strong>有它的优势。</p><h4 id="5-5-Wishart-distribution">5.5 Wishart distribution</h4><p><strong>Wishart分布</strong>是<strong>伽马分布</strong>的多元形式，也是十分重要的分布。卡方分布也是它的特例。</p><p><img src="/images/Fundamentals-Probability/31.png" alt><br>多元高斯分布和Wishart分布有很紧密的联系，设$Y_{1}\ldots Y_{n}\ iid\sim\ N(0,\Sigma)$，其中$Y_{i}(i = 1,\ldots,n)$是$p$维列向量，则随机矩阵$W = \sum_{i = 1}^{n}{Y_{i}Y_{i}^{T}}$的分布就是wishart分布，记作$W\sim Wishart(\Sigma,n)$，可以发现，当协方差矩阵退化为单位1，得到的就是卡方分布。</p><h4 id="5-6-Inverse-Wishart-distribution">5.6 Inverse Wishart distribution</h4><p>与倒伽马分布和伽马分布的关系类似，服从Wishart分布的随机变量的倒数就服从<strong>倒Wishart分布</strong>。</p><p><img src="/images/Fundamentals-Probability/32.png" alt><br><img src="/images/Fundamentals-Probability/33.png" alt></p><h4 id="5-7-Dirichlet-distribution">5.7 Dirichlet distribution</h4><p><strong>狄利克雷分布</strong>是<strong>Beta分布</strong>的多元形式，自然的其也是<strong>多项分布的共轭先验分布</strong>。</p><p><strong>共轭先验</strong>在Beta分布里面已经提到过，目前笔者也只是稍微了解了一点，后面笔者也打算专门去深入了解一下。</p><p><img src="/images/Fundamentals-Probability/34.png" alt><br>狄利克雷分布可以用来定义“不确定性”的问题。考虑一个3面骰子。如果我们知道每个结果都是等可能的，我们可以使用“尖峰”对称狄利克雷，如Dir(20,20,20)，即我们确信结果将是不可预测的。相比之下，如果我们不确定结果会是什么样子(例如，它可能是一个有偏的骰子)，那么我们可以使用“平坦”对称狄利克雷，例如Dir(1,1,1)，它可以生成广泛的可能的结果分布。</p><p><img src="/images/Fundamentals-Probability/35.png" alt><br><img src="/images/Fundamentals-Probability/36.png" alt><br><img src="/images/Fundamentals-Probability/37.png" alt></p><h2 id="三、高斯联合分布">三、高斯联合分布</h2><p>实践中最广泛使用的连续随机变量联合概率分布是多元高斯分布了，也叫多元正态分布(MVN)。这部分是因为其在数学上很方便，而且高斯分布假设在许多情况下是相当合理的。</p><h3 id="1-The-multivariate-normal">1. The multivariate normal</h3><h4 id="定义">定义</h4><p>多元高斯分布的定义应该都很熟悉了：</p><p><img src="/images/Fundamentals-Probability/38.png" alt><br>可以对协方差矩阵进行限制：</p><p><img src="/images/Fundamentals-Probability/39.png" alt></p><h4 id="Gaussian-shells">Gaussian shells</h4><p>随着维度$D$的增加，样本$x∼N(0,I_D)$中大部分点并不位于原点附近，而是集中在距离原点$r = \sqrt{D}$​ 处的一个薄壳或环形区域。这是因为虽然概率密度随着$\frac{r^2}{2}$指数衰减（距离增大概率密度减小），但球体的体积 随距离增加而增加，导致大多数点集中在距离原点$\sqrt{D}$处的一个<strong>薄环</strong>上。此现象称为“高斯肥皂泡”。</p><p>计算点$x$到原点的平方距离$d(x) = \sum_{i=1}^{D} x_i^2$​，其中$x_i \sim N(0, 1)$。</p><ul><li>期望值：$\mathbb{E}[d^2] = D$。</li><li>方差：$\text{Var}(d^2) = D$。</li></ul><p>所以随着D的增大，<strong>the coefficient of variation</strong>（标准差与期望的比值）会趋近于0</p><p><img src="/images/Fundamentals-Probability/40.png" alt><br><img src="/images/Fundamentals-Probability/41.png" alt></p><h4 id="Marginals-and-conditionals-of-an-MVN">Marginals and conditionals of an MVN</h4><p>对于一个满足多元高斯分布的向量$x$进行分块为$x1，x2$，会发现其<strong>边缘分布</strong>均为高斯分布，<strong>条件分布</strong>也均为高斯分布。</p><p>并且$p(x_1|x_2)$的后验均值是$x_2$的线性函数，但协方差于$x_2$无关，这是高斯分布的一个特殊性质。具体如下：</p><p><img src="/images/Fundamentals-Probability/42.png" alt></p><h4 id="其它表达形式">其它表达形式</h4><p>高斯分布有其它表达形式，这些形式有对应的优势，例如边缘化公式在<strong>矩形式</strong>下更简单，而条件化公式在<strong>信息形式</strong>下更简单</p><p><img src="/images/Fundamentals-Probability/43.png" alt></p><h3 id="2-Linear-Gaussian-systems">2. Linear Gaussian systems</h3><p>线性高斯系统定义如下，一个变量$z$和条件分布$p(y|z)$均为高斯分布：</p><p><img src="/images/Fundamentals-Probability/44.png" alt><br>此时<strong>联合分布</strong>$p(z,y)$的形式如下：</p><p><img src="/images/Fundamentals-Probability/45.png" alt><br>而后验分布$p(z|y)$也是一个高斯分布：</p><p><img src="/images/Fundamentals-Probability/46.png" alt></p><h2 id="四、The-exponential-family">四、The exponential family</h2><p><strong>指数族</strong>包括了众多上面提到的常见分布，比如高斯分布、二项分布、多项式分布、 泊松分布、gamma分布、beta分布等等。</p><p>其在机器学习里面起着至关重要的作用，主要因为其独特的优点：</p><p><img src="/images/Fundamentals-Probability/47.png" alt><br><img src="/images/Fundamentals-Probability/48.png" alt></p><h3 id="1-定义">1. 定义</h3><p>指数族分布（Exponential Family Distribution）： 指数族分布是一类可以写成如下形式的分布：<br>$$p(x|\eta) = h(x) \exp \left( \eta^T T(x) - A(\eta) \right)$$<br>其中，$\eta$是自然参数，$T(x)$是充分统计量，$A(\eta)$是归一化常数，确保概率分布的积分为1。具体定义如下：</p><p><img src="/images/Fundamentals-Probability/49.png" alt><br>在数族分布中，如果自然参数$\eta$之间相互独立，则可以更方便地进行推导和计算。所谓的独立性意味着没有非零的$\eta$满足$\eta^T T(x) = 0$，即自然参数$\eta$不能通过其他参数线性组合来为零。此时我们称一个指数族分布为<strong>最小</strong>，因为这意味着我们不能通过减少自然参数的数量来进一步简化分布的参数化，否则分布会变得冗余。</p><p>在多项式分布中，由于参数有一个和为1的约束条件，导致自然参数之间并不完全独立。因此，严格来说，多项式分布并不是最小指数族。但尽管多项式分布中自然参数有依赖性，但可以通过<strong>重新参数化</strong>，将$K$个参数中的一个去掉，使用$K-1$个独立的参数来表示整个分布。这样可以将原来的问题转换为最小指数族的形式，使得参数之间更加独立。</p><p><img src="/images/Fundamentals-Probability/50.png" alt></p><h3 id="2-例子">2. 例子</h3><h4 id="2-1-伯努利分布：">2.1 伯努利分布：</h4><p>$$\begin{align*} P(x|\mu) &amp;=\mu^x(1-\mu)^{1-x} \&amp;=exp (ln(\mu^x(1-\mu)^{1-x})) \&amp;=exp(xln(\frac{\mu}{1-\mu})+ln(1-\mu)) \end{align*}$$</p><p>对比可知有如下关系:</p><ul><li>[规范参数]$\eta = \phi(\mu)=ln(\frac{\mu}{1-\mu})$</li><li>[充分统计量]$T(x)=x$</li><li>[累积函数]$A(\eta)=-ln(1-\mu)$</li><li>[基础度量值]$h(x)=1$<br>*$\lambda = logistic(\eta)=\frac{1}{1+e^{-\eta}}$</li></ul><p><img src="/images/Fundamentals-Probability/51.png" alt><br>上面也提到了多项式分布怎么减少参数量（让参数变为互相独立的）。</p><h4 id="2-2-Categorical-distribution">2.2 Categorical distribution</h4><p>与伯努利分布类似，由于参数求和为1，所以独立变量只有$K-1$个：</p><p><img src="/images/Fundamentals-Probability/52.png" alt></p><h4 id="2-3-单变量高斯分布">2.3 单变量高斯分布</h4><p>高斯分布可做如下变换：</p><p>$$\begin{align*} P(x|\mu,\sigma^2)&amp;=\frac{1}{\sqrt{2\pi\sigma^2}}exp(-\frac{1}{2\sigma^2}(x-\mu)^2)  \&amp;=\frac{1}{\sqrt{2\pi}}exp(\frac{\mu}{\sigma^2}x-\frac{1}{2\sigma^2}x^2-\frac{1}{2\sigma^2}\mu^2-ln\sigma) \end{align*}$$</p><p>同样对比可知:</p><ul><li>[规范参数]$\eta = \phi(\lambda)=[\frac{\mu}{\sigma^2},-\frac{1}{2\sigma^2}]$</li><li>[充分统计量]$T(x)=[x,x^2]$</li><li>[累积函数]$A(\eta)=\frac{1}{2\sigma^2}\mu^2+ln\sigma$</li><li>[基础度量值]$h(x)=\frac{1}{\sqrt{2\pi}}$</li><li>因为高斯模型有两个参数,所以两个向量长度都为2</li></ul><p><img src="/images/Fundamentals-Probability/53.png" alt><br>如果限制$\sigma^{2} = 1$，则有如下形式：</p><p><img src="/images/Fundamentals-Probability/54.png" alt><br>此时$h(x)$不再是常数。</p><h4 id="2-4-多元高斯分布">2.4 多元高斯分布</h4><p>与单变量高斯分布推导类似，但比较复杂，如下所示：</p><p><img src="/images/Fundamentals-Probability/55.png" alt><br><img src="/images/Fundamentals-Probability/56.png" alt></p><h4 id="2-5-不是指数族的例子">2.5 不是指数族的例子</h4><p>分布族为指数族的必要条件为它有共同支撑集，也即$S_\theta = {x: p(x) &gt; 0}$与$\theta$无关。</p><p>比如说均匀分布$R(0, \theta)$就没有共同支撑集（因为它非零的区域为$[0,\theta]$），所以它不可能是指数族分布。</p><p><img src="/images/Fundamentals-Probability/57.png" alt></p><h3 id="3-重要性质">3. 重要性质</h3><h4 id="Log-partition-function">Log partition function</h4><p>对数配分函数$A(\eta)$有如下性质：</p><p><img src="/images/Fundamentals-Probability/58.png" alt><br>直接从定义证明即可</p><h4 id="自然参数和矩参数转换">自然参数和矩参数转换</h4><p>对数分区函数$A(\eta)$的梯度等于充分统计量的期望，也就是矩参数（或均值参数）。即：$m = E[T(x)] = \nabla_\eta A(\eta)$这表明我们可以通过计算$A(\eta)$的梯度，从自然参数$\eta$得到对应的矩参数$m$。</p><p>如果指数族是最小的，则可以从矩参数$m$转换回自然参数$\eta$。这一过程通过对函数$A(\eta)$的<strong>凸共轭函数</strong>（convex conjugate）$A^<em>(m)$实现，公式为：$\eta = \nabla_m A^</em>(m)$</p><p>其中，凸共轭函数$A^<em>(m)$定义为：$A^</em>(m) = \sup_{\eta \in \Omega} \left( m^T \eta - A(\eta) \right)$这意味着通过$A^*$的梯度可以从矩参数$m$转回自然参数$\eta$。</p><p><img src="/images/Fundamentals-Probability/59.png" alt></p><h3 id="4-指数族的极大似然估计">4. 指数族的极大似然估计</h3><p>指数族模型的似然函数形式：对于指数族分布模型，其似然函数可以写成以下形式：$p(D|\eta) = \prod_{n=1}^N h(x_n) \exp \left( \eta^T \sum_{n=1}^N T(x_n) - N A(\eta) \right)$</p><p>上式可以化简为：</p><p>$$p(D|\eta) \propto \exp \left( \eta^T T(D) - N A(\eta) \right)$$</p><p>这里$T(D)$是数据集的<strong>充分统计量</strong>之和：<br>$$T(D) = \left[ \sum_{n=1}^N T_1(x_n), \ldots, \sum_{n=1}^N T_K(x_n) \right]$$<br>不同的分布对应不同的充分统计量，例如：</p><ul><li>对于Bernoulli分布，充分统计量$T(D)$为：$T(D) = \left[ \sum_n I(x_n = 1) \right]$</li><li>对于一维高斯分布，充分统计量$T(D)$为：$T(D) = \left[ \sum_n x_n, \sum_n x_n^2 \right]$</li></ul><p><strong>Pitman-Koopman-Darmois定理</strong>说明在某些正则条件下，指数族分布是唯一具有有限充分统计量的分布族。也就是说，在指数族分布中，充分统计量的个数不依赖于数据集的大小。</p><p><img src="/images/Fundamentals-Probability/60.png" alt><br>给定数据集$D$，指数族分布的对数似然函数为：<br>$$\log p(D|\eta) = \eta^T T(D) - N A(\eta) + \text{const}$$</p><p>由于$-A(\eta)$是自然参数$\eta$的凸函数，而$\eta^T T(D)$是线性函数，因此可以得出：对数似然函数是凸的，从而存在唯一的全局最大值。</p><p>我们对对数似然函数求导，导数如下：<br>$$\nabla_\eta \log p(D|\eta) = T(D) - N E[T(x)]$$</p><p>对于单个数据点$x$，导数为：<br>$$\nabla_\eta \log p(x|\eta) = T(x) - E[T(x)]$$</p><p>至于$E[T(x)]$，我们用数据集进行估计即可：<br>$$E[T(x)] = \frac{1}{N} \sum_{n=1}^N T(x_n)$$</p><p><img src="/images/Fundamentals-Probability/61.png" alt></p><h2 id="五、随机变量之间的变换">五、随机变量之间的变换</h2><h3 id="1-双射">1. 双射</h3><p>双射的变换公式很熟悉了，主要就是涉及到<strong>雅可比矩阵</strong>行列式：</p><p><img src="/images/Fundamentals-Probability/62.png" alt></p><h3 id="2-蒙特卡罗近似">2. 蒙特卡罗近似</h3><p>也很熟悉了，就是采样估计：</p><p><img src="/images/Fundamentals-Probability/63.png" alt></p><h3 id="3-Probability-integral-transform">3. Probability integral transform</h3><p>这个其实就是从均匀分布采样，然后通过逆映射进行计算，这样就相当于从原分布中进行采样了。也比较熟悉了：</p><p><img src="/images/Fundamentals-Probability/64.png" alt></p><h2 id="六、-马尔可夫链">六、 马尔可夫链</h2><p>马尔可夫链涉及的知识比较多，书上讲的也都是比较基础的，本科课程也学习过。主要记录一下之前没见过的：</p><p>马尔可夫链的最大似然估计：</p><p><img src="/images/Fundamentals-Probability/65.png" alt><br><strong>MAP estimation：<strong>解决数据稀疏的问题，引入了</strong>Dirichlet先验</strong>：</p><p><img src="/images/Fundamentals-Probability/66.png" alt></p><h2 id="七、比较两个分布的相似度">七、比较两个分布的相似度</h2><h3 id="1-f-散度">1. f-散度</h3><p>f散度是一个函数，这个函数用来衡量两个概率密度p和q的区别，也就是衡量这两个分布多么的相同或者不同。像$KL$散度和$JS$散度都是它的一种特例</p><p>f散度定义如下：</p><p>$${D_f}(\mathcal P_1|\mathcal P_2)=\int f (\frac{p_2(x)}{p_1(x)})\cdot p_1(x)\mathrm d x=\mathbb E_{x\sim\mathcal P_1}\left[f(\frac{p_2(x)}{p_1(x)})\right] \$$</p><p>$f()$就是不同的散度函数，$D_f$就是在f散度函数下，两个分布的差异。规定</p><p>*$f$是凸函数(为了用琴生不等式)<br>*$f ( 1 ) = 0$(如果两个分布一样，刚好公式=0)</p><p><img src="/images/Fundamentals-Probability/67.png" alt></p><p>下面给出一些常见的f-散度例子：</p><h4 id="KL-散度">KL 散度</h4><p>当$f( r ) = rlog( r )$时，f-散度变为 KL 散度，公式为：</p><p>$$D_{KL}(p || q) = \int p(x) \log \frac{p(x)}{q(x)} dx$$</p><h4 id="α-散度-Alpha-Divergence">α-散度 (Alpha Divergence)</h4><p>当$f(x) = \frac{4}{1 - \alpha^2} (1 - x^{\frac{1+\alpha}{2}})$时，f-散度变为 α-散度，公式为：</p><p>$$D^\alpha_A (p || q) = \frac{4}{1 - \alpha^2} \left( 1 - \int p(x)^{\frac{1+\alpha}{2}} q(x)^{\frac{1-\alpha}{2}} dx \right)$$</p><p>其中，$\alpha \neq \pm 1$。另一种常用的参数化方式（Minka 方式）为：</p><p>$$DD^\alpha_M(p || q) = \frac{1}{\alpha(1-\alpha)} \left( 1 - \int p(x)^\alpha q(x)^{1-\alpha} dx \right)$$</p><ul><li>当$\alpha \to 0$时，α-散度趋向于$D_{KL}(q||p)$。</li><li>当$\alpha \to 1$时，α-散度趋向于$D_{KL}(p||q)$。</li><li>当$\alpha = 0.5$时，α-散度等于 Hellinger 距离（见下）。</li></ul><p><img src="/images/Fundamentals-Probability/70.png" alt></p><h4 id="Hellinger-距离-Hellinger-Distance">Hellinger 距离 (Hellinger Distance)</h4><p>平方的 Hellinger 距离定义为：</p><p>$$D_H^2(p || q) = \frac{1}{2} \int \left( \sqrt{p(x)} - \sqrt{q(x)} \right)^2 dx$$</p><p>这相当于 f-散度，其中$f( r ) = (\sqrt{r} - 1)^2$。</p><p><img src="/images/Fundamentals-Probability/71.png" alt></p><h4 id="卡方距离-Chi-Squared-Distance">卡方距离 (Chi-Squared Distance)</h4><p>卡方距离定义为：</p><p>$$\chi^2(p || q) = \frac{1}{2} \int \frac{(q(x) - p(x))^2}{q(x)} dx$$</p><p>这对应于 f-散度，其中$f( r ) = ( r - 1 )^2$。</p><p><img src="/images/Fundamentals-Probability/72.png" alt></p><h3 id="2-积分概率度量-Integral-Probability-Metrics-IPM">2. 积分概率度量 (Integral Probability Metrics, IPM)</h3><p>IPM 也用于计算两个分布$P$和$Q$之间的差异，其定义为：</p><p>$$<br>D_F(P, Q) = \sup_{f \in F} \left| \mathbb{E}<em>{p(x)}[f(x)] - \mathbb{E}</em>{q(x’)}[f(x’)] \right|<br>$$</p><p>其中，$F$是一类“光滑”的函数。常见的 IPM 度量包括：</p><ul><li><strong>最大均值差异 (Maximum Mean Discrepancy, MMD)</strong></li></ul><p>如果$F$是在正定核函数下的 <strong>RKHS</strong>（再生核希尔伯特空间），则对应的 IPM 被称为最大均值差异（MMD）。</p><ul><li><strong>Wasserstein 距离 (Wasserstein Distance)</strong></li></ul><p>如果$F$是满足 <strong>Lipschitz</strong> 条件的函数类$F = { ||f||_L \leq 1 }$，即 Lipschitz 常数有界（例如为1）的函数集合，则 IPM 变为 Wasserstein-1 距离：</p><p>$$<br>W_1(P, Q) = \sup_{||f||<em>L \leq 1} \left| \mathbb{E}</em>{p(x)}[f(x)] - \mathbb{E}_{q(x)}[f(x’)] \right|<br>$$</p><p><img src="/images/Fundamentals-Probability/68.png" alt><br><img src="/images/Fundamentals-Probability/69.png" alt></p>]]></content>
    
    
    <categories>
      
      <category>Probabilistic Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>概率论与数理统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新说明 2024.9.30</title>
    <link href="/2024/09/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <url>/2024/09/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>国庆假期到了，这学期课程压力比较小，所以也是能为以后的科研学习一下相关知识。但国庆假期还是给自己放了一个大长假，这段时间估计是不太会更新了。</p><h2 id="Stanford-CS236">Stanford CS236</h2><p>最近Stanford CS236课程也算是看完了，后面可能还会有一些内容打算写一写吧。主要还是围绕diffusion，包括</p><ul><li>ldm</li><li>diffusion的condition控制</li><li>如何把diffusion用于离散的数据</li></ul><p>前面的文章可能也会补一补。感觉diffusion涉及到的数学知识还是挺多的，后面有机会可以来补一补数学基础。</p><h2 id="Probabilistic-Machine-Learning">Probabilistic Machine Learning</h2><p>打算学习一下<strong>Probabilistic Machine Learning</strong>这本书，后面应该也会边学边记录一下，也强烈给读者推荐这本书，特别对于像我这样致力于在AI领域进行研究但基础比较薄弱的同学。</p><p>这本书应该也是将来一段时间我的学习重点了，内容还是很多的。</p><h2 id="数学">数学</h2><p>Stanford CS236课程还是涉及到挺多的数学知识，后面有机会可以来补一补数学基础。之前保研复习了一下微积分，线代，微分方程这些，后面可能会多看一看优化相关（比如什么拉格朗日对偶问题，每次遇到都是混过去了）的知识，同时对diffusion涉及的一些知识也多了解了解，可能包括：</p><ul><li>SDE和ODE的解法</li><li>傅里叶变换</li><li>优化理论</li></ul><h2 id="科研">科研</h2><p>国庆之后也可能会具体进行一些导师的项目，后面在科研上的学习有机会也可以记录一下。</p><h2 id="碎碎念">碎碎念</h2><p>感觉还是太菜了，什么都不会。感觉大学四年在课堂上学的东西真的太基础了。</p><p>以前本科的实习也就是看了几篇论文就开始做，然后也就用的别人的模型，在上面小修小补，以至于做了一学期的生成模型，现在看了Stanford CS236，感觉以前真的啥都不知道。</p><p>虽然可能跟着别人脚步走也能发论文吧，但还是希望能夯实一下理论基础，希望以后科研的日子能过得轻松一点。</p>]]></content>
    
    
    <categories>
      
      <category>更新日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>更新日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diffusion Model原理</title>
    <link href="/2024/09/29/Diffusion%20Model%E5%8E%9F%E7%90%86/"/>
    <url>/2024/09/29/Diffusion%20Model%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习StanfordCS236课程的学习笔记，分享记录，也便于自己实时查看。</p><h2 id="引入">引入</h2><p>前面的课程中我们已经学习了许多生成模型的架构，例如VAEs，Score BasedModels等。在课程的最后也是总算来到当前最火的生成模型架构：DiffusionModel。其实DiffusionModel与前面模型或多或少都有一定的联系，我们也可以从不同的视角来理解它。</p><p>笔者本科科研也算是学习研究了一些Diffusion相关的工作，但之前一直没有去梳理生成模型的发展，也没有深究其背后的数学原理。所以借此几乎，正好对一些知识进行整理，并对生成模型进行部分回顾。首先从DDPM和DDIM入手吧，这两篇文章也是之前科研实践学习过很多次了。</p><h2 id="ddpm">DDPM</h2><p>首先我们知道，DDPM是个马尔科夫模型（如下图），DDPM包括两个步骤。这两个步骤在原文中定义为前向加噪（forward，下图从右到左）和后向去噪（reverse，下图从左到右）。</p><p><img src="/images/Diffusion%20Model原理/1.png"></p><p>从<span class="math inline">\(x_0\)</span>到<span class="math inline">\(x_T\)</span>的过程就是前向加噪过程，我们可以看到加噪过程就是对原始图片<span class="math inline">\(x_0\)</span>不断添加噪声，使其最后信噪比趋近于0，此时得到的图片也就变成噪声了，而与之相对应的去噪过程就是还原过程，即从噪声不断去噪还原为图片。</p><p>我们通过往图片中加入噪声，使得图片变得模糊起来，当加的步骤足够多的时候（也就是T的取值越大的时候，一般取1000），图片已经非常接近一张纯噪声。纯噪声也就意味着多样性，我们的模型在去噪（还原）的过程中能够产生更加多样的图片。</p><p>这里的操作实际上就是指在图片加入噪声<span class="math inline">\(noise\)</span>，噪声<span class="math inline">\(noise\)</span>本身的分布可以是很多样的（btw，保研还被问过这个问题），而论文中采用的是<strong>标准正态分布</strong>，其理由是考虑到其优良的性质，在接下来的公式推理中见到。</p><h3 id="推导">推导</h3><p>从上面的图可知，DDPM将前向过程和逆向过程都设计为了马尔可夫链的形式：</p><ul><li>称从<span class="math inline">\(x_0\)</span>到<span class="math inline">\(x_T\)</span>的马尔可夫链为<strong>前向过程(forward process)</strong> 或<strong>扩散过程 (diffusionprocess)</strong>；</li><li>称从<span class="math inline">\(x_T\)</span>到<span class="math inline">\(x_0\)</span>的马尔可夫链为<strong>逆向过程(reverse process)</strong> 或<strong>去噪过程 (denoisingprocess)</strong>.</li></ul><p>所以我们的损失函数通过极大似然估计来进行。但这里我们又会遇到和VAE一样的问题，<span class="math inline">\(log(P(x))\)</span>中的<span class="math inline">\(P(x)\)</span>需要对<span class="math inline">\(x_{1:T}\)</span>进行积分，此时我们便可以效仿VAE的做法，即把<span class="math inline">\(x_{1:T}\)</span>作为类似VAE中的潜变量，去优化对数似然的下界ELBO（为什么是下界可以参考我都VAEs的文章，简单来说就是用<strong>琴生不等式</strong>即可）：</p><p><span class="math display">\[\begin{align*} ELBO &amp;= \mathbb{E}_{\mathbf{x}_{1:T} \simq(\mathbf{x}_{1:T} \vert \mathbf{x}_0)} \left[\log\frac{p_\theta(\mathbf{x}_{0:T})}{q(\mathbf{x}_{1:T} \vert\mathbf{x}_0)} \right] \\&amp;= \mathbb{E}_{\mathbf{x}_{1:T} \simq(\mathbf{x}_{1:T} \vert \mathbf{x}_0)} \left[ \log\frac{p(\mathbf{x}_T) \prod_{t=1}^T p_\theta(\mathbf{x}_{t-1} \vert\mathbf{x}_t)}{\prod_{t=1}^T q(\mathbf{x}_t \vert \mathbf{x}_{t-1})}\right]  \end{align*}\]</span></p><p>至于这里为啥要在给定<span class="math inline">\(x_0\)</span>下计算，一方面是单纯的<span class="math inline">\(q(\mathbf{x}_{1:T})\)</span>我们没办法计算得出，而<span class="math inline">\(q(\mathbf{x}_{1:T}|\mathbf{x}_0)\)</span>我们能求出其闭式解，另一方面在训练时我们的确已经<span class="math inline">\(x_0\)</span>的信息。</p><p>OK，我们继续进行推导</p><p><span class="math display">\[\begin{align} &amp;\ \ \ \ \ \text{ELBO}(\mathbf x_0) \\ &amp;=\mathbbE_{q(\mathbf x_{1:T}\vert\mathbf x_0)}\left[\log\frac{p(\mathbfx_T)\prod_{t=1}^{T}p(\mathbf x_{t-1}\vert\mathbfx_t)}{\prod_{t=1}^{T}q(\mathbf x_t\vert\mathbf x_{t-1})}\right]\\&amp;=\mathbb E_{q(\mathbf x_{1:T}\vert\mathbfx_0)}\left[\log\frac{p(\mathbf x_T)\prod_{t=1}^{T}p(\mathbfx_{t-1}\vert\mathbf x_t)}{q(\mathbf x_1\vert\mathbfx_0)\prod_{t=2}^{T}q(\mathbf x_t\vert\mathbf x_{t-1},\mathbfx_0)}\right]\\ &amp;=\mathbb E_{q(\mathbf x_{1:T}\vert\mathbfx_0)}\left[\log\frac{p(\mathbf x_T)\prod_{t=1}^{T}p(\mathbfx_{t-1}\vert\mathbf x_t)}{q(\mathbf x_1\vert\mathbfx_0)\prod_{t=2}^{T}\frac{q(\mathbf x_t\vert\mathbf x_0)q(\mathbfx_{t-1}\vert\mathbf x_t,\mathbf x_0)}{q(\mathbf x_{t-1}\vert\mathbfx_0)} }\right]\\ &amp;=\mathbb E_{q(\mathbf x_{1:T}\vert\mathbfx_0)}\left[\log\frac{p(\mathbf x_T)\prod_{t=1}^{T}p(\mathbfx_{t-1}\vert\mathbf x_t)}{q(\mathbf x_T\vert\mathbfx_0)\prod_{t=2}^{T}q(\mathbf x_{t-1}\vert\mathbf x_t,\mathbfx_0)}\right]\\ &amp;=\mathbb E_{q(\mathbf x_{1:T}\vert\mathbfx_0)}\left[\log p(\mathbf x_0\vert\mathbf x_1)\right]+\mathbbE_{q(\mathbf x_{1:T}\vert\mathbf x_0)}\left[\log\frac{p(\mathbfx_T)}{q(\mathbf x_T\vert\mathbf x_0)}\right]+\sum_{t=2}^T\mathbbE_{q(\mathbf x_{1:T}\vert\mathbf x_0)}\left[\log\frac{p(\mathbfx_{t-1}\vert\mathbf x_t)}{q(\mathbf x_{t-1}\vert\mathbf x_t,\mathbfx_0)}\right]\\ &amp;=\mathbb E_{q(\mathbf x_{1}\vert\mathbfx_0)}\left[\log p(\mathbf x_0\vert\mathbf x_1)\right]+\mathbbE_{q(\mathbf x_{T}\vert\mathbf x_0)}\left[\log\frac{p(\mathbfx_T)}{q(\mathbf x_T\vert\mathbf x_0)}\right]+\sum_{t=2}^T\mathbbE_{q(\mathbf x_t\vert\mathbf x_0)}\mathbb E_{q(\mathbfx_{t-1}\vert\mathbf x_t,\mathbf x_0)}\left[\log\frac{p(\mathbfx_{t-1}\vert\mathbf x_t)}{q(\mathbf x_{t-1}\vert\mathbf x_t,\mathbfx_0)}\right]\\ &amp;=\underbrace{\mathbb E_{q(\mathbf x_{1}\vert\mathbfx_0)}\left[\log p(\mathbf x_0\vert\mathbfx_1)\right]}_\text{reconstruction term}-\underbrace{\text{KL}(q(\mathbfx_T\vert\mathbf x_0)\Vert p(\mathbf x_T))}_\text{regularizationterm}-\sum_{t=2}^T\mathbb E_{q(\mathbf x_t\vert\mathbfx_0)}\underbrace{\left[\text{KL}(q(\mathbf x_{t-1}\vert\mathbfx_t,\mathbf x_0)\Vert p(\mathbf x_{t-1}\vert\mathbfx_t))\right]}_\text{denoising matching terms} \end{align}\]</span></p><p>同样出现了重构项、正则项和匹配项。重构项要求<span class="math inline">\(x_1\)</span>能够重构<span class="math inline">\(x_0\)</span>，正则项要求<span class="math inline">\(x_T\)</span>的后验分布逼近先验分布，而匹配项则建立起相邻两项<span class="math inline">\(x_{t−1},x_t\)</span>之间的联系。</p><p>现在，我们只需要为式中出现的所有概率分布设计具体的形式，就可以代入计算了。为了让KL 散度可解，一个自然的想法就是把它们都设计为正态分布的形式。</p><h3 id="前向过程">前向过程</h3><p>在DDPM的前向过程中，对于<span class="math inline">\(t \in[1,T]\)</span>时刻，<span class="math inline">\(x_t\)</span>和<span class="math inline">\(x_{t-1}\)</span>满足如下关系：</p><p><span class="math display">\[x_t = \sqrt{1-\beta_t}x_{t-1} +\sqrt{\beta_t }\epsilon,  \ \ \ \epsilon\sim N(0,1)\]</span></p><p>其中<span class="math inline">\(β_t∈(0,1)\)</span>是事先指定的超参数，代表从<span class="math inline">\(x_{t−1}\)</span>到<span class="math inline">\(x_t\)</span>这一步的方差。</p><p>这里的系数设定为开根号的<span class="math inline">\(\beta\)</span>，是为了保证马尔科夫链的最后收敛为标准高斯分布。</p><p><strong><span class="math inline">\(\sqrt\beta\)</span>和<span class="math inline">\(\sqrt{1-\beta}\)</span>是怎么来的：</strong></p><p>我们这里先不管<span class="math inline">\(\beta\)</span>，把两个系数分别设为<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>。</p><p>公式变为：</p><p><span class="math display">\[x_t = ax_{t-1} + b\epsilon\]</span></p><p>我们希望，当<span class="math inline">\(t\)</span>趋于无穷的时候，<span class="math inline">\(x_t \sim N(0,1), x_{t-1} \sim N(0,1)\)</span></p><p>我们知道当两个高斯分布相加时，</p><p><span class="math display">\[X\sim N(\mu_X,\sigma_X^2),Y\simN(\mu_Y,\sigma_Y^2)\]</span></p><p><span class="math display">\[Z=aX+bY\]</span></p><p>则</p><p><span class="math display">\[Z \sim N(a\mu_X+b\mu_Y,a^2\sigma^2+b^2\sigma^2)\]</span></p><p>所以此时</p><p><span class="math display">\[x_t~\simN(a\mu_{t-1}+b\mu_\epsilon,a^2\sigma_{t-1}^2+b^2\sigma_\epsilon^2)\]</span></p><p><span class="math display">\[x_t\sim N(a·0+b·0,a^2·1+b^2·1)\]</span></p><p><span class="math display">\[x_t \sim N(0,a^2+b^2)\]</span></p><p>我们想让<span class="math inline">\(x_{t-1}\)</span>和<span class="math inline">\(\epsilon\)</span>得到的<span class="math inline">\(x_{t}\)</span>也服从标准正态分布，即<span class="math inline">\(x_{t} \sim N(0,1)\)</span>，那么我们就只能让<span class="math inline">\(a^2+b^2=1\)</span>。</p><p>再令<span class="math inline">\(\beta=a^2\)</span>，则<span class="math inline">\(a=\sqrt{\beta},b=\sqrt{1-\beta}\)</span>。</p><p>或者也可以令<span class="math inline">\(\alpha=b^2\)</span>，则<span class="math inline">\(a=\sqrt{\alpha}x_{t-1}+\sqrt{1-\alpha}\epsilon\)</span>。</p><p>说白了，这俩系数就是为了让两个服从标准正态分布的噪声相加得到的东西还是服从正态分布。</p><p>OK，在这基础上我们可以继续推导，<strong>让<span class="math inline">\(x_t\)</span>用<span class="math inline">\(x_0\)</span>来表示</strong>：</p><p>令<span class="math inline">\(\alpha_t=1-\beta_t\)</span>，则公式变为：</p><p><span class="math display">\[x_t=\sqrt{\alpha_t}x_{t-1}+\sqrt{1-\alpha_t}\epsilon\]</span></p><p>继续推导：</p><p><span class="math display">\[\begin{align*} x_t&amp;=\sqrt{\alpha_t}x_{t-1}+\sqrt{1-\alpha_t}\epsilon\\&amp;=\sqrt{\alpha_t}(\sqrt{\alpha_{t-1} }x_{t-2}+\sqrt{1-\alpha_{t-1}}\epsilon)+\sqrt{1-\alpha_t}\epsilon\\  &amp;=\sqrt{\alpha_t\alpha_{t-1}}x_{t-2}+\sqrt{\alpha_t(1-\alpha_{t-1})}\epsilon +\sqrt{1-\alpha_t}\epsilon\\ \end{align*}\]</span></p><p>上式最后一行第二项和第三项，可以看做两个正态分布相加。</p><p>由于两个正态分布<span class="math inline">\(X\simN(\mu_x,\sigma_x^2), Y\sim N(\mu_y, \sigma_y^2)\)</span>，相加后有</p><p><span class="math inline">\(aX+bY\simN(a\mu_x+b\mu_y,a^2\sigma_x^2+b^2\sigma_y^2)\)</span>。所以，合并两个正态分布，得到：</p><p><span class="math display">\[x_t=\sqrt{\alpha_t\alpha_{t-1}}x_{t-2}+\sqrt{1-\alpha_t\alpha_{t-1} }\epsilon\]</span></p><p>由数学归纳法，可以推导出：</p><p><span class="math display">\[x_t=\sqrt{\alpha_t\alpha_{t-1}...\alpha_1}x_0+\sqrt{1-\alpha_t\alpha_{t-1}...\alpha_1}\epsilon\]</span></p><p>再令<span class="math inline">\(\bar\alpha_t=\alpha_t\alpha_{t-1}...\alpha_1\)</span>，则公式可以进一步化简为：</p><p><span class="math inline">\(x_t=\sqrt{\bar\alpha_t}x_0+\sqrt{1-\bar\alpha_{t} }\epsilon\)</span>，由于</p><p><span class="math display">\[\lim_{t\to\infty}\sqrt{\bar\alpha_t}=0,\quad\lim_{t\to\infty}\sqrt{1-\bar\alpha_t}=1\]</span></p><p>所以我们能够保证马尔科夫链最后能够收敛于标准正态分布</p><h3 id="逆向过程">逆向过程</h3><p>这里从我们熟知的贝叶斯公式出发：</p><p><span class="math display">\[P(A|B)=\frac{P(B|A)P(A)}{P(B)}\]</span></p><p>可知</p><p><span class="math display">\[P(x_{t-1}|x_t)=\frac{P(x_t|x_{t-1})P(x_{t-1})}{P(x_t)}\]</span></p><p>这里我们的<span class="math inline">\(P(x_{t-1})\)</span>和<span class="math inline">\(P(x_t)\)</span>我们都不知道，但在已知<span class="math inline">\(x_0\)</span>的情况下有：</p><p><span class="math display">\[P(x_{t-1}|x_t,x_0)=\frac{P(x_t|x_{t-1},x_0)P(x_{t-1}|x_0)}{P(x_t|x_0)}\]</span></p><p>把<span class="math inline">\(x_0=\sqrt{\bar{\alpha_t}}x_0\)</span>和<span class="math inline">\(x_t=\sqrt{\bar\alpha_t}x_0+\sqrt{1-\bar\alpha_{t}}\epsilon\)</span>带入上式，可得：</p><p><span class="math display">\[P(x_{t-1}|x_t,x_0)=\frac{N(\sqrt{\alpha_t}x_0,1-\bar\alpha_t) N(\sqrt{\bar\alpha_{t-1}}x_0,1-\bar\alpha_{t-1}) }{ N(\sqrt{\bar\alpha_{t}}x_0,1-\bar\alpha_{t}) }\]</span></p><p>已知高斯分布的概率密度函数为：</p><p><span class="math display">\[f(x)=\frac{1}{\sqrt{2\pi\sigma}}exp(-\frac{(x-\mu)^2}{2\sigma^2})\]</span></p><p>所以</p><p><span class="math display">\[P(x_{t-1}|x_t,x_0)\propto   exp-\frac{1}{2}  [   \frac{(x_t-\sqrt{\alpha_t}x_{t-1})^2}{1-\alpha_t}+\frac{(x_{t-1}-\sqrt{\bar\alpha_{t-1} }x_0)^2}{1-\bar\alpha_{t-1} }-\frac{(x_{t}-\sqrt{\bar\alpha_{t} }x_0)^2}{1-\bar\alpha_{t} }]\]</span></p><p>此时由于<span class="math inline">\(x_{t-1}\)</span>是我们关注的变量，所以整理成关于<span class="math inline">\(x_{t-1}\)</span>的形式：</p><p><span class="math display">\[P(x_{t-1}|x_t,x_0)\propto  exp-\frac{1}{2}  [   (\frac{\alpha_t}{1-\alpha_t}+\frac{1}{1-\bar\alpha_{t-1}})x_{t-1}^2  -(\frac{-2\sqrt{\alpha_t}x_t}{1-\alpha_t}   +    \frac{-2\sqrt{\bar\alpha_{t-1}}x_0}{1-\bar\alpha_{t-1} })x_{t-1}   +C(x_t,x_0) ]\]</span></p><p>其中第三项<span class="math inline">\(C(x_t,x_0)\)</span>与<span class="math inline">\(x_{t-1}\)</span>无关，作为指数上相加的部分，可以拿到最前面只影响最前面的系数。</p><p>所以此时：</p><p><span class="math display">\[P(x_{t-1}|x_t,x_0)\propto  exp-\frac{1}{2}  [   (\frac{\alpha_t}{1-\alpha_t}+\frac{1}{1-\bar\alpha_{t-1}})x_{t-1}^2  -(\frac{-2\sqrt{\alpha_t}x_t}{1-\alpha_t}   +  \frac{-2\sqrt{\bar\alpha_{t-1}}x_0}{1-\bar\alpha_{t-1} })x_{t-1}]\]</span></p><p>又因为标准正态分布满足<span class="math inline">\(\propto exp -\frac{x^2-2\mu x + \mu^2}{2\sigma^2}\)</span>，所以我们可以得到<span class="math inline">\(P(x_{t-1}|x_t,x_0)\)</span>对应的方差</p><p><span class="math display">\[\frac{1}{\sigma^2}=\frac{\alpha_t}{1-\alpha_t}+\frac{1}{1-\bar\alpha_{t-1}}  =\frac{1-\alpha_t\bar\alpha_{t-1}}{(1-\alpha_t)(1-\bar\alpha_{t-1})}  =\frac{1-\bar\alpha_{t}}{(1-\alpha_t)(1-\bar\alpha_{t-1})}\]</span></p><p>这里<span class="math inline">\(\alpha_t\bar\alpha_{t-1}=\bar\alpha_t\)</span>。所以：</p><p><span class="math display">\[\sigma^2=\frac{(1-\alpha_t)(1-\bar\alpha_{t-1})}{1-\bar\alpha_t}\]</span></p><p>再看<span class="math inline">\(x_{t-1}\)</span>的一次项，得到：</p><p><span class="math display">\[\frac{2\mu}{\sigma^2}=(\frac{-2\sqrt{\alpha_t}x_t}{1-\alpha_t}   +  \frac{-2\sqrt{\bar\alpha_{t-1}}x_0}{1-\bar\alpha_{t-1} })\]</span></p><p>把<span class="math inline">\(\sigma^2\)</span>和<span class="math inline">\(x_0\)</span>带入上式，化简得到： <span class="math display">\[\mu=\frac{1}{\sqrt{\alpha_t}}(x_t-\frac{1-\alpha_t}{\sqrt{1-\bar\alpha_t} }\epsilon)\]</span></p><p>所以说： <span class="math display">\[P(x_{t-1}|x_t, x_0)\simN(\frac{1}{\sqrt{\alpha_t} }(x_t-\frac{1-\alpha_t}{\sqrt{1-\bar\alpha_t}}\epsilon),\frac{(1-\alpha_t)(1-\bar\alpha_{t-1})}{1-\bar\alpha_t})\]</span></p><p>回顾一下我们写的这一大段公式，也就是说，我们已知了先验概率，推导出了后验概率的表达式，得到了在给定<span class="math inline">\(x_0\)</span>后的<span class="math inline">\(x_{t-1}\)</span>的分布的均值和方差。也就是说，上面公式中，我们的</p><p><span class="math display">\[q(x_{t-1}\vert x_t,x_0)\simN(\frac{1}{\sqrt{\alpha_t} }(x_t-\frac{1-\alpha_t}{\sqrt{1-\bar\alpha_t}}\epsilon),\frac{(1-\alpha_t)(1-\bar\alpha_{t-1})}{1-\bar\alpha_t})\]</span></p><p>接下来，<span class="math inline">\(\epsilon\)</span>的具体值，我们让模型去拟合就好了。</p><h3 id="损失函数">损失函数</h3><p>我们之前已经推导了ELBO的具体形式：</p><p><span class="math display">\[\text{ELBO}= \underbrace{E_{x_1\simq(x_1\vert x_0)}[\log p_\theta(x_0\vert x_1)]}_{ {L_0} }-\underbrace{KL(q(x_T \vert  x_0)\|p(x_T))}_{ {L_T} }-\sum_{t=2}^T\underbrace{E_{x_t\sim q(x_t\vertx_0)}\left[KL(q(x_{t-1}\vert x_t,x_0)\|p_\theta(x_{t-1}\vertx_t))\right]}_{ {L_{t-1} }}\]</span></p><p>这里<span class="math inline">\(q(x_{t-1}\vertx_t,x_0)\)</span>我们已经得到了，<span class="math inline">\(q(x_{t}|x_0)\)</span>也是我们定义的。只需要定义<span class="math inline">\(p_\theta(x_{t-1}|x_t)\)</span>即可，为了计算方便，我们也选择与<span class="math inline">\(q(x_{t-1}\vert x_t,x_0)\)</span>一样的形式。</p><p><span class="math display">\[p_\theta(\textbf{x}_{t-1}|\textbf{x}_t)= \mathcal{N}(\textbf{x}_{t-1}; \mu_\theta(\textbf{x}_t, t),\frac{(1-\alpha_t)(1-\bar\alpha_{t-1})}{1-\bar\alpha_t}I)\]</span></p><p>其中<span class="math inline">\(\boldsymbol{\mu}_\theta(\mathbf{x}_t,t) = \frac{1}{\sqrt{\alpha_t} } \Big( \mathbf{x}_t - \frac{1 -\alpha_t}{\sqrt{1 - \bar{\alpha}_t} }\boldsymbol{\epsilon}_\theta(\mathbf{x}_t, t) \Big)\)</span>，而<span class="math inline">\({\epsilon}_\theta(\mathbf{x}_t,t)\)</span>就是我们模型的输出。此时，我们带入可以得到</p><p><span class="math display">\[\begin{align}  \mathbf{x}_{t-1} &amp;=\mathcal{N}(\mathbf{x}_{t-1}; \frac{1}{\sqrt{\alpha_t} } ( \mathbf{x}_t- \frac{1 - \alpha_t}{\sqrt{1 - \bar{\alpha}_t} }{\epsilon}_\theta(\mathbf{x}_t, t) ),\frac{(1-\alpha_t)(1-\bar\alpha_{t-1})}{1-\bar\alpha_t}I)  \end{align}\]</span></p><p>带入上面KL散度的公式，可以得到损失函数<span class="math inline">\(L_t\)</span>便为：</p><p><span class="math display">\[\begin{aligned} L_t  &amp;=\mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon} } \Big[\frac{1}{2 \|\boldsymbol{\Sigma}_\theta(\mathbf{x}_t, t) \|^2_2} \|\color{blue}{\tilde{\boldsymbol{\mu} }_t(\mathbf{x}_t, \mathbf{x}_0)} -\color{green}{\boldsymbol{\mu}_\theta(\mathbf{x}_t, t)} \|^2 \Big] \\&amp;= \mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon} }\Big[\frac{1}{2  \|\boldsymbol{\Sigma}_\theta \|^2_2} \|\color{blue}{\frac{1}{\sqrt{\alpha_t} } \Big( \mathbf{x}_t - \frac{1 -\alpha_t}{\sqrt{1 - \bar{\alpha}_t} } \boldsymbol{\epsilon}_t \Big)} -\color{green}{\frac{1}{\sqrt{\alpha_t} } \Big( \mathbf{x}_t - \frac{1 -\alpha_t}{\sqrt{1 - \bar{\alpha}_t} } \boldsymbol{\boldsymbol{\epsilon}}_\theta(\mathbf{x}_t, t) \Big)} \|^2 \Big] \\ &amp;=\mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon} } \Big[\frac{ (1 -\alpha_t)^2 }{2 \alpha_t (1 - \bar{\alpha}_t) \|\boldsymbol{\Sigma}_\theta \|^2_2} \|\boldsymbol{\epsilon}_t -\boldsymbol{\epsilon}_\theta(\mathbf{x}_t, t)\|^2 \Big] \\ &amp;=\mathbb{E}_{\mathbf{x}_0, \boldsymbol{\epsilon} } \Big[\frac{ (1 -\alpha_t)^2 }{2 \alpha_t (1 - \bar{\alpha}_t) \|\boldsymbol{\Sigma}_\theta \|^2_2} \|\boldsymbol{\epsilon}_t -\boldsymbol{\epsilon}_\theta(\sqrt{\bar{\alpha}_t}\mathbf{x}_0 + \sqrt{1- \bar{\alpha}_t}\boldsymbol{\epsilon}_t, t)\|^2\Big]  \end{aligned}\]</span></p><p>发现可以使用不用权重的简单形式就可以训练得到好的结果，即</p><p><span class="math display">\[\begin{aligned} L_\text{simple} &amp;=\mathbb{E}_{t \sim [1, T], \mathbf{x}_0, \boldsymbol{\epsilon}_t}\Big[\|\boldsymbol{\epsilon}_t -\boldsymbol{\epsilon}_\theta(\mathbf{x}_t, t)\|^2 \Big] \\ &amp;=\mathbb{E}_{t \sim [1, T], \mathbf{x}_0, \boldsymbol{\epsilon}_t}\Big[\|\boldsymbol{\epsilon}_t -\boldsymbol{\epsilon}_\theta(\sqrt{\bar{\alpha}_t}\mathbf{x}_0 + \sqrt{1- \bar{\alpha}_t}\boldsymbol{\epsilon}_t, t)\|^2 \Big]\end{aligned}\]</span></p><p>这样，我们就获得了DDPM的最终目标函数：</p><p><span class="math display">\[L_\text{simple}(\theta)=\mathbbE_{t,x_0,\epsilon}\left[\Vert\epsilon-\epsilon_\theta(x_t,t)\Vert^2\right]\]</span></p><p>具体训练流程和采样流程如下：</p><p><img src="/images/Diffusion%20Model原理/2.png"></p><h2 id="ddim">DDIM</h2><p>DDPM虽好，但它只能一步一步老老实实通过<span class="math inline">\(x_{t}\)</span>预测<span class="math inline">\(x_{t-1}\)</span>，不能跨步运算，如果<span class="math inline">\(T=1000\)</span>，那么生成一整图像就需要用网络推理1000次，效率很低。于是为了结局这个问题，DDIM出现了，而且最巧妙的是它不需要重新训练模型。</p><p>DDIM始于一个假设，它假设了</p><p><span class="math display">\[P(x_{prev}|x_t,x_0)\simN(kx_0+mx_t,\sigma_2)\]</span></p><p><span class="math display">\[x_{prev}=kx_0+mx_t+\sigma\epsilon,\ \ \\ \ \epsilon\sim N(0,1)\]</span></p><p>又因为加噪过程满足公式<span class="math inline">\(x_t=\sqrt{\bar\alpha_t}x_0+\sqrt{1-\bar\alpha_{t} }\epsilon\)</span></p><p>把<span class="math inline">\(x_t\)</span>带入<span class="math inline">\(x_{t-1}\)</span>合并同类项得到：</p><p><span class="math display">\[\begin{align*}x_{prev}&amp;=kx_0+m(\sqrt{\bar\alpha_t}x_0+\sqrt{1-\bar\alpha_t}\epsilon)+\sigma\epsilon\\&amp;=(k+m\sqrt{\bar\alpha_t})x_0+\epsilon&#39;\end{align*}\]</span></p><p><span class="math display">\[\epsilon&#39;\simN(0,m^2(1-\bar\alpha_t)+\sigma^2)\]</span></p><p>又因为<span class="math inline">\(x_{prev}=\sqrt {\bar\alpha_{prev}}x_0+\sqrt{1-\bar\alpha_{prev}}\epsilon\)</span>，满足对应系数相同，有：</p><p><span class="math display">\[k+m\sqrt{\bar\alpha_t}=\sqrt{\bar{\alpha_{prev}}}\\ m^2(1-\bar\alpha_t)+\sigma^2=1-\bar\alpha_{prev}\]</span></p><p>求得：</p><p><span class="math display">\[m=\frac{\sqrt{1-\bar\alpha_{prev}-\sigma^2}}{\sqrt{1-\bar\alpha_t} }\\  k=\sqrt{\bar\alpha_{prev}}-\frac{\sqrt{1-\bar\alpha_{prev}-\sigma^2} }{\sqrt{1-\bar\alpha_t}}\sqrt{\bar\alpha_t}\]</span></p><p>带入公式最终化简得：</p><p><span class="math display">\[x_{prev}=\sqrt{\bar{\alpha_{prev} }}(\frac{x_t-\sqrt{1-\bar\alpha_t}\epsilon_t}{\sqrt{\bar\alpha_t}})  +\sqrt{1-\bar\alpha_{prev}-\sigma^2}\epsilon_t+\sigma^2\epsilon\]</span></p><p>其中<span class="math inline">\(t\)</span>和<span class="math inline">\(prev\)</span>可以相隔多个迭代步数，一般相隔20可以做到采样速度和采样质量比较好地平衡。所以一般DDPM要做1000步，而DDIM是需要50步就可以完成采样。</p><p>当这里的<span class="math inline">\(\sigma\)</span>选取0的时候，也就意味着变成了一个确定性采样的过程。此时的DDIM就变成了一个FlowModels，事实上论文里也是这么做的。</p><h2 id="从不同角度看扩散模型">从不同角度看扩散模型</h2><p>前面我们DDPM的推导过程中，其实可以把扩散模型看成一个给定后验的<strong>多层VAE</strong>。即认为设定了<span class="math inline">\(p(x_{1:T}|x_0)\)</span>的形式，然后让模型来从潜变量中采样，最终生成图片。</p><p>而DDIM把这个过程变成了一个确定性过程，也就是说把潜变量和数据之间做了一个双射，所以此时也就可以看成<strong>FlowModels</strong>的一个了</p><p>事实上，扩散模型的连续和离散其实对应着随机过程里的概念。一般来说，discretetime指的是随机过程中的时间<span class="math inline">\(t\)</span>只能取离散整数值，而continous-time则指的是时间参数<span class="math inline">\(t\)</span>可以取连续值。discretetime随机过程中的参数在一个离散的时间点只能改变一次；而continuous-time随机过程的参数则可以随时发生变化。</p><h3 id="ddpm和sde">DDPM和SDE</h3><p>我们在DDPM里的加噪过程。每一个timestep，我们都会按照如下的离散马尔可夫链进行加噪：</p><p><span class="math display">\[x_i = \sqrt{1 - \beta_i}x_{i-1} +\sqrt{\beta_i} \epsilon_{i-1}, i=1,..., N\]</span></p><p>为了将上述过程连续化，我们需要引入连续时间随机过程。<strong>而连续时间其实就是让每个离散的时间间隔</strong><span class="math inline">\(\Deltat\)</span><strong>无限趋近于0，其实也等价于求出</strong><span class="math inline">\(N \to\infty\)</span><strong>​时，上述马尔可夫链的极限</strong></p><p>在求极限之前，我们需要先引入一组辅助的noise scale<span class="math inline">\(\{\bar{\beta}_i = N\beta_i\}_{i=1}^N\)</span>，并将上面的式子改写如下：</p><p><span class="math display">\[x_i = \sqrt{1 - \frac{\bar{\beta}_i}{N}}x_{i-1} + \sqrt{\frac{\bar{\beta}_i}{N} }\epsilon_{i-1}, i = 1,...,N\]</span></p><p>在<span class="math inline">\(N \to \infty\)</span>​时，上面的<span class="math inline">\(\{\bar{\beta}_i\}_{i=1}^{N}\)</span>就成了一个关于时间<span class="math inline">\(t\)</span>的连续函数<span class="math inline">\(\beta(t)\)</span>​，并且<span class="math inline">\(t \in [0, 1]\)</span>。随后，我们可以假设<span class="math inline">\(\Delta t = \frac{1}{N}\)</span>​，在每个<span class="math inline">\(i\Delta t\)</span>时刻，连续函数<span class="math inline">\(\beta(t), x(t),\epsilon(t)\)</span>都等于之前的离散值，即：</p><p><span class="math display">\[\beta(\frac{i}{N}) = \bar{\beta}_i,x(\frac{i}{N}) = x_i, \epsilon(\frac{i}{N})=\epsilon_i\]</span></p><p>在<span class="math inline">\(t \in \{0, 1, ...,\frac{N-1}{N}\}\)</span>​以及<span class="math inline">\(\Deltat=\frac{1}{N}\)</span>的情况下，我们就可以用连续函数改写之前的式子：</p><p><span class="math display">\[\begin{align} x(t+ \Delta t) &amp;=\sqrt{1-\beta(t+\Delta t)\Delta t}\ x(t) + \sqrt{\beta(t+\Delta t)\Deltat}\ \epsilon(t) \\ &amp; \approx x(t) - \frac{1}{2}\beta(t+\Delta t)\Delta t\ x(t) + \sqrt{\beta(t+\Delta t)\Delta t}\ \epsilon(t) \\ &amp;\approx x(t) - \frac{1}{2}\beta(t)\Delta t\ x(t) + \sqrt{\beta(t)\Deltat}\ \epsilon(t) \end{align}\]</span></p><p>上面的近似只有在<span class="math inline">\(\Delta t \ll1\)</span>时成立。我们将其再移项后就可以得到下式：</p><p><span class="math display">\[x(t+\Delta t) - x(t) \approx-\frac{1}{2} \beta(t)\Delta t\ x(t) + \sqrt{\beta(t)\Delta t}\\epsilon(t) \\ \mathrm{d} x = -\frac{1}{2}\beta(t)x \mathrm{d}t +\sqrt{\beta(t)} \mathrm{d}w\]</span></p><p>其中，<span class="math inline">\(w\)</span>​表示的就是WienerProcess。这里面的第二个式子，就是一SDE方程。</p><p>至此，我们证明了DDPM连续化之后，就可以得到一个SDE方程，并且它是一种VariancePreserving的SDE。<strong>Variance Preserving的含义是当</strong><span class="math inline">\(t \to\infty\)</span><strong>时，它的方差依然有界</strong>。</p><p>与此<strong>反向过程也是一个SDE方程，称为reverse SDE</strong>：</p><p><span class="math display">\[\text{d}\mathbf{x}=[\mathbf{f}(\mathbf{x}, t) - g^2(t)\nabla _{\mathbf{x} }\logp(\mathbf{x})]\text{d}\mathbf{t} + g(t)\text{d}\mathbf{w}\]</span></p><p>这个反向过程中的未知量就只有分数函数<span class="math inline">\(\nabla_x \logp_{t}(x)\)</span>​。至此，DDPM和分数模型也产生了联系，实际上二者之间是相互等价的。而DDPM和分数模型本质上都是在学习这个reverseSDE的解。 我们可以看到，DDPM每一步的去噪其实本质上与<strong>AnnealedLangevin dynamics</strong>是一模一样的。</p><p><img src="/images/Diffusion%20Model原理/3.png"></p><h3 id="ddim与ode">DDIM与ODE</h3><p>首先对于一个SDE，</p><p><span class="math display">\[\text{d}\mathbf{x}=\mathbf{f}(\mathbf{x}, t)\text{d}\mathbf{t} +g(t)\text{d}\mathbf{w}\]</span></p><p>我们写出它的<strong>福克-普朗克方程（Fokker-Planckequation）</strong>：</p><p><span class="math display">\[\begin{align*} \nabla _{t}p(\mathbf{x},t) &amp;= -\nabla _{\mathbf{x} }[\mathbf{f}(\mathbf{x}, t)p(\mathbf{x},t)] + \frac{1}{2}g^{2}(t)\nabla _{\mathbf{x} }^{2}p(\mathbf{x}, t)\\&amp;= -\nabla _{\mathbf{x} }[\mathbf{f}(\mathbf{x}, t)p(\mathbf{x}, t)- \frac{1}{2}(g^{2}(t) - \sigma^{2}(t))\nabla_\mathbf{x}p(\mathbf{x},t)] + \frac{1}{2}\sigma^{2}(t)\nabla _{\mathbf{x} }^{2}p(\mathbf{x},t)\\   &amp;= -\nabla _{\mathbf{x} }[(\mathbf{f}(\mathbf{x}, t) -\frac{1}{2}(g^{2}(t) - \sigma^{2}(t))\nabla_\mathbf{x}\log p(\mathbf{x},t))p(\mathbf{x})] + \frac{1}{2}\sigma^{2}(t)\nabla _{\mathbf{x}}^{2}p(\mathbf{x}, t)\\\end{align*}\]</span></p><p>现在我们把福克-普朗克方程变成了这样：</p><p><span class="math display">\[\nabla_{t}p(\mathbf{x}, t) =-\nabla_{\mathbf{x} }[(\mathbf{f}(\mathbf{x}, t) - \frac{1}{2}(g^{2}(t)- \sigma^{2}(t))\nabla_\mathbf{x}\log p(\mathbf{x}, t))p(\mathbf{x})] +\frac{1}{2}\sigma^{2}(t)\nabla _{\mathbf{x} }^{2}p(\mathbf{x},t)\]</span></p><p>其对应的SDE为：</p><p><span class="math display">\[\text{d}\mathbf{x}=[\mathbf{f}(\mathbf{x}, t) - \frac{1}{2}(g^{2}(t) -\sigma^{2}(t))\nabla_{\mathbf{x} }\logp_{t}(\mathbf{x})]\text{d}\mathbf{t} +\sigma(t)\text{d}\mathbf{w}\]</span></p><p>因为前后两个SDE是等价的，他们对应的<span class="math inline">\(p_{t}(\mathbf{x})\)</span>是一样的，意味着我们可以改变第二个SDE的方差<span class="math inline">\(\sigma(t)\)</span>。当我们取<span class="math inline">\(\sigma(t)=0\)</span>，可以得到一个<strong>常微分方程(OrdinaryDifferential Equation, ODE)</strong>,</p><p><span class="math display">\[\text{d}\mathbf{x}=[\mathbf{f}(\mathbf{x}, t) - \frac{1}{2}g^{2}(t)\nabla_ {\mathbf{x}}\log p_{t}(\mathbf{x})]\text{d}\mathbf{t}\]</span></p><p><img src="/images/Diffusion%20Model原理/4.png"></p><p>这个结论有什么作用呢？首先，我们其实更在乎的是边缘概率分布<span class="math inline">\(q_t(x)\)</span>，因为我们需要保证它在足够长的时刻<span class="math inline">\(T\)</span>，<span class="math inline">\(q_T(x)\)</span>可以变成一个纯噪声，同时我们还需要<span class="math inline">\(q_0(x)\)</span>​符合原始数据分布。上述结论可以保证这一点。同时，扩散模型本质上是在学习一个扩散过程的逆过程，既然前向SDE存在一个对应的ODE，<strong>那么反向过程reverseSDE其实也有一个对应的ODE，这个反向过程对应的ODE形式也是上面的式子</strong>。</p><p>而 DDIM 恰是一种确定性情形，所以我们自然会想到——能不能用 ODE来描述一个 DDIM 呢？答案是肯定的。DDIM的公式如下：</p><p><span class="math display">\[\begin{align}x_{t-1}&amp;=\sqrt{\bar\alpha_{t-1}}x_\theta(x_t,t)+\sqrt{1-\bar\alpha_{t-1} }\epsilon_\theta(x_t,t)\\&amp;=\frac{\sqrt{\bar\alpha_{t-1} }}{\sqrt{\bar\alpha_t}}\left(x_t-\sqrt{1-\bar\alpha_t}\epsilon_\theta(x_t,t)\right)+\sqrt{1-\bar\alpha_{t-1}}\epsilon_\theta(x_t,t) \end{align}\]</span></p><p>两边均减去<span class="math inline">\(x_t\)</span>，得：</p><p><span class="math display">\[\begin{align}x_{t-1}-x_t&amp;=\frac{1}{\sqrt{\bar\alpha_t}}\left[\left(\sqrt{\bar\alpha_{t-1}}-\sqrt{\bar\alpha_t}\right)x_t-\left(\sqrt{\bar\alpha_{t-1}(1-\bar\alpha_t)}-\sqrt{\bar\alpha_t(1-\bar\alpha_{t-1})}\right)\epsilon_\theta(\mathbfx_t,t)\right]\\ &amp;=\frac{1}{\sqrt{\bar\alpha_t}}\left(\frac{\bar\alpha_{t-1}-\bar\alpha_t}{\sqrt{\bar\alpha_{t-1}}+\sqrt{\bar\alpha_t}}x_t-\frac{\bar\alpha_{t-1}-\bar\alpha_t}{\sqrt{\bar\alpha_{t-1}(1-\bar\alpha_t)}+\sqrt{\bar\alpha_t(1-\bar\alpha_{t-1})}}\epsilon_\theta(x_t,t)\right)\\&amp;=\frac{\bar\alpha_{t-1}-\bar\alpha_t}{\sqrt{\bar\alpha_t}}\left(\frac{x_t}{\sqrt{\bar\alpha_{t-1} }+\sqrt{\bar\alpha_t}}-\frac{\epsilon_\theta(\mathbfx_t,t)}{\sqrt{\bar\alpha_{t-1}(1-\bar\alpha_t)}+\sqrt{\bar\alpha_t(1-\bar\alpha_{t-1})}}\right) \end{align}\]</span></p><p>记<span class="math inline">\(x(t)=x_t,\barα(t)=\barα_t\)</span>，将<span class="math inline">\(t-1\)</span>换成<span class="math inline">\(t−Δt\)</span>并令<span class="math inline">\(Δt→0\)</span>，得：</p><p><span class="math display">\[\mathrm dx=\frac{\mathrmd\bar\alpha(t)}{\sqrt{\bar\alpha(t)}}\left(\frac{x(t)}{2\sqrt{\bar\alpha(t)}}-\frac{\epsilon_\theta(x(t),t)}{2\sqrt{\bar\alpha(t)(1-\bar\alpha(t))}}\right)=\frac{\bar\alpha&#39;(t)}{2\bar\alpha(t)}\left(x(t)-\frac{\epsilon_\theta(x(t),t)}{\sqrt{1-\bar\alpha(t)}}\right)\mathrm dt\]</span></p><p><strong>这就是 DDIM 的 ODE 描述</strong>。</p><p>在 DDPM 的设置下，有<span class="math inline">\(f(x,t)=−\frac{1}{2}β(t)x,g(t)=\sqrt{β(t)}\)</span>，代入</p><p><span class="math display">\[\text{d}\mathbf{x}=[\mathbf{f}(\mathbf{x}, t) - \frac{1}{2}g^{2}(t)\nabla_ {\mathbf{x}}\log p_{t}(\mathbf{x})]\text{d}\mathbf{t}\]</span></p><p>得：</p><p><span class="math display">\[\mathrmdx=\left[-\frac{1}{2}\beta(t)x-\frac{1}{2}\beta(t)\nabla_{\mathbf{x}}\log p_{t}(\mathbf{x})\right]\mathrmdt=-\frac{1}{2}\beta(t)\left[x+\nabla_{\mathbf{x} }\logp_{t}(\mathbf{x})\right]\mathrm dt\]</span></p><p>与我们上面的式子对应。</p><p>既然引入了ODE，那么我们的模型就可以去学习如何解这个ODE，同时也可以引入各种传统的ODEsolver例如：Euler method, Runge–Kuttamethod等一些方法。这就是为什么我们可以看到像StableDiffusion之类的模型会有那么多sampler的原因，本质上都是一些ODEsolver和SDE solver。但是后面的研究者发现，传统的ODEsolver在采样效果上比不过DDIM，这就非常奇怪了。DPM-Solver的作者在他们的论文中给出了原因：<strong>DDIM充分利用了diffusionODE的半线性结构（semi-linear structure），并且它是一个semi-linearODE的一阶Solver，而传统的ODEsolver并没有利用好这个半线性结构，因此DDIM的准确度会更高一些，因此采样效果也更好。</strong></p><p>这里还需要注意的点是，<strong>diffusion ODE这类模型相比diffusionSDE存在着诸多好处</strong>，比如：</p><ul><li>没有随机性，ODE是一个确定性过程，可以以更快的速度收敛，因此可以达到更快的采样速度</li><li>由于是确定性过程，可以计算数据似然（likelihood）等。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Stanford CS236深度生成模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生成模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Score Based Models</title>
    <link href="/2024/09/24/Score%20Based%20Models/"/>
    <url>/2024/09/24/Score%20Based%20Models/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习StanfordCS236课程的学习笔记，分享记录，也便于自己实时查看。</p><h1 id="引入">引入</h1><h2 id="score-function">Score function</h2><p>上一次我们学习了Energy Based Model。其核心做法是对一个数据集<span class="math inline">\({x_{1}, x_{2}, ...,x_{N}}\)</span>，我们把数据的概率分布<span class="math inline">\(p(x)\)</span>建模为：</p><p><span class="math display">\[p_{\theta}(\mathbf{x}) =\frac{e^{-f_{\theta}(\mathbf{x})}}{Z_{\theta}}\]</span></p><p>这里<span class="math inline">\(f_{\theta}(\mathbf{x})\in\mathbb{R}\)</span>。<span class="math inline">\(Z_{\theta}\)</span>是归一化项保证<span class="math inline">\(p_{\theta}(\mathbf{x})\)</span>是概率。<span class="math inline">\(\theta\)</span>是他们的参数。<br>我们一般可以通过最大似然估计的方式来训练参数<span class="math inline">\(\theta\)</span>，</p><p><span class="math display">\[\max_{\theta}\sum\limits_{i=1}^{N}\log_{\theta}(\mathbf{x}_{i})\]</span></p><p>但是因为</p><p><span class="math display">\[\log p_{\theta}(\mathbf{x}) =-f_{\theta}(\mathbf{x}) - \log Z_{\theta}\]</span></p><p><span class="math inline">\(Z_{\theta}\)</span>是intractable的，我们无法求出<span class="math inline">\(\logp_{\theta}(\mathbf{x})\)</span>，自然也就无法优化参数<span class="math inline">\(\theta\)</span>。</p><p><strong>为了解决归一化项无法计算的问题，我们引入scorefunction。</strong> score function的定义为<span class="math inline">\(\nabla _{\mathbf{x}}\logp(\mathbf{x})\)</span></p><p>所以我们可以发现，score function是与<span class="math inline">\(Z_{\theta}\)</span>无关的：</p><p><span class="math display">\[\mathbf{s}_{\theta}(\mathbf{x}) =\nabla_{\mathbf{x}}\log(\mathbf{x}_{\theta}) =-\nabla_{\mathbf{x}}f_{\theta}(\mathbf{x}) - \nabla_{\mathbf{x}}\logZ_{\theta} = -\nabla_{\mathbf{x}}f _{\theta}(\mathbf{x})\]</span></p><h1 id="score-based-model">Score Based Model</h1><h2 id="score-matching">Score matching</h2><p>现在我们想要训练一个网络来估计出真实的scorefunction。自然地，我们可以最小化真实的scorefunction和网络输出的MSE：</p><p><span class="math display">\[\mathcal{L} =\frac{1}{2}\mathbb{E}_{p(\mathbf{x})}[||\nabla_{\mathbf{x}}\log p(\mathbf{x}) -\mathbf{s} _{\theta}(\mathbf{x})||^{2}]\]</span></p><p><img src="/images/Score%20Based%20Models/1.png"><br>但是这样的一个loss我们是算不出来的，因为我们并不知道真实的<span class="math inline">\(p(\mathbf{x})\)</span>是什么。<strong>而scorematching方法就可以让我们在不知道真实的</strong><span class="math inline">\(p(\mathbf{x})\)</span><strong>的情况下最小化这个loss。</strong>Scorematching的推导如下：<br>我们把上面loss的期望写开，二次项打开，可以得到</p><p><span class="math display">\[\begin{align*}\mathcal{L} =&amp;\frac{1}{2}\mathbb{E}_{p(\mathbf{x})}[||\nabla _{\mathbf{x}}\logp(\mathbf{x}) - \mathbf{s} _{\theta}(\mathbf{x})||^{2}]\\=&amp;\frac{1}{2}\int p(\mathbf{x}) [||\nabla _{\mathbf{x}}\logp(\mathbf{x})||^{2} + ||\mathbf{s} _{\theta}(\mathbf{x})||^{2} -2(\nabla _{\mathbf{x}}\log p(\mathbf{x}))^{T}\mathbf{s}_{\theta}(\mathbf{x})] d \mathbf{x}\end{align*}\]</span></p><p>第一项对于<span class="math inline">\(\theta\)</span>来说是常数可以忽略。<br>第二项为</p><p><span class="math display">\[\int p(\mathbf{x}) ||\mathbf{s}_{\theta}(\mathbf{x})||^{2} d \mathbf{x}\]</span></p><p>对于第三项，若<span class="math inline">\(\mathbf{x}\)</span>的维度为<span class="math inline">\(N\)</span>：</p><p><span class="math display">\[\begin{align*}&amp; -2\int p(\mathbf{x}) (\nabla _{\mathbf{x}}\logp(\mathbf{x}))^{T}\mathbf{s} _{\theta}(\mathbf{x}) d\mathbf{x}\\   =&amp; -2 \int p(\mathbf{x})\sum\limits_{i=1}^{N}\frac{\partial \log p(\mathbf{x})}{\partial\mathbf{x}_{i}}\mathbf{s}_{\theta i}(\mathbf{x}) d \mathbf{x}\\   =&amp;-2 \sum\limits_{i=1}^{N} \int p(\mathbf{x}) \frac{1}{p(\mathbf{x})}\frac{\partial p(\mathbf{x})}{\partial \mathbf{x}_{i}}\mathbf{s}_{\thetai}(\mathbf{x}) d \mathbf{x}\\   =&amp; -2 \sum\limits_{i=1}^{N} \int\frac{\partial p(\mathbf{x})}{\partial \mathbf{x}_{i}}\mathbf{s}_{\thetai}(\mathbf{x}) d \mathbf{x}\\ =&amp; 2 \sum\limits_{i=1}^{N} - \int\frac{\partial p(\mathbf{x})\mathbf{s}_{\theta i}(\mathbf{x})}{\partial\mathbf{x}_{i}} d \mathbf{x} + \int p(\mathbf{x}) \frac{\partial\mathbf{s}_{\theta i}(\mathbf{x})}{\partial \mathbf{x}_{i}}  d\mathbf{x}\\  =&amp;  2 \sum\limits_{i=1}^{N} - \intp(\mathbf{x})\mathbf{s}_{\thetai}(\mathbf{x})\bigg\rvert^{\infty}_{-\infty} d \mathbf{x_{/i}} + \intp(\mathbf{x}) \frac{\partial \mathbf{s}_{\theta i}(\mathbf{x})}{\partial\mathbf{x}_{i}}  d \mathbf{x}\\   =&amp; 2 \sum\limits_{i=1}^{N} \intp(\mathbf{x}) \frac{\partial \mathbf{s}_{\theta i}(\mathbf{x})}{\partial\mathbf{x}_{i}}  d \mathbf{x}\\    =&amp; 2\int p(\mathbf{x})\sum\limits_{i=1}^{N} \frac{\partial \mathbf{s}_{\thetai}(\mathbf{x})}{\partial \mathbf{x}_{i}}  d \mathbf{x}\\ =&amp; 2\intp(\mathbf{x}) \text{tr}(\nabla_{\mathbf{x}}\mathbf{s}_{\theta}(\mathbf{x})) d \mathbf{x}\end{align*}\]</span></p><p>所以最后的loss是第二和第三项的和：</p><p><span class="math display">\[\begin{align*} \mathcal{L} &amp;=\frac{1}{2} \int p(\mathbf{x})||\mathbf{s} _{\theta}(\mathbf{x})||^{2} d \mathbf{x} + \intp(\mathbf{x}) \text{tr}(\nabla_{\mathbf{x}}\mathbf{s}_{\theta}(\mathbf{x})) d \mathbf{x}\\\\   &amp;=\mathbb{E}_{p(\mathbf{x})}[\frac{1}{2}||\mathbf{s}_{\theta}(\mathbf{x})||^{2} + \text{tr}(\nabla_{\mathbf{x}}\mathbf{s}_{\theta}(\mathbf{x}))]\end{align*}\]</span></p><p><img src="/images/Score%20Based%20Models/2.png"><br>当然，这个推导虽然是从能量模型引入的，但并不局限于能量模型，事实上，他是一个更大的模型家族。</p><p><img src="/images/Score%20Based%20Models/3.png"></p><h2 id="score-matching-langevin-dynamics-smld">Score Matching LangevinDynamics (SMLD)</h2><p>现在我们已经通过神经网络学习到了数据分布的scorefunction，那么如何用scorefunction从这个数据分布中得到样本呢？答案就是朗之万动力学采样(LangevinDynamics):</p><p><span class="math display">\[\mathbf{x}_{i+1} = \mathbf{x}_{i} + \epsilon \nabla_{\mathbf{x}}\logp(\mathbf{x}) + \sqrt{2 \epsilon}\mathbf{z}_{i}, \quad \mathbf{z} _{i}\sim \mathcal{N}(\mathbf{0}, \mathbf{I}), \quad i=0,1,\cdots K\\]</span></p><p>这里的采样是一个迭代的过程。<span class="math inline">\(\epsilon\)</span>是一个很小的量。<span class="math inline">\(\mathbf{x}_{0}\)</span>随机初始，通过上面的迭代式更新。当迭代次数<span class="math inline">\(K\)</span>足够大的时候，<span class="math inline">\(\mathbf{x}\)</span>就收敛于该分布的一个样本。</p><p><img src="/images/Score%20Based%20Models/4.png"><br>上图的具体解释我就不再赘述了。</p><p>这样我们其实就得到了一个生成模型。我们可以先训练一个网络用来估计scorefunction，然后用Langevin Dynamics和网络估计的scorefunction采样，就可以得到原分布的样本。因为整个方法由scorematching和Langevin Dynamics两部分组成，所以叫<strong>SMLD</strong>。</p><h2 id="训练">训练</h2><p>说完了损失函数和采样过程，那么对这个模型我们怎么训练呢？相信敏锐的读者已经注意到了，我们损失函数：</p><p><span class="math display">\[\begin{align*} \mathcal{L}  &amp;=\mathbb{E}_{p(\mathbf{x})}[\frac{1}{2}||\mathbf{s}_{\theta}(\mathbf{x})||^{2} + \text{tr}(\nabla_{\mathbf{x}}\mathbf{s}_{\theta}(\mathbf{x}))]\end{align*}\]</span></p><p>这个第二项并不是很好计算。对于维度为<span class="math inline">\(N\)</span>的数据，我们计算雅可比矩阵的迹需要进行<span class="math inline">\(N\)</span>次反向传播，这对于高维度的数据的训练是不能接受的。</p><p>对于这个问题，主要有两种解决方法。</p><h3 id="denoising-score-matching">Denoising score matching</h3><p>Denoising score matching的做法就是在 score matching的基础上，对输入数据加噪。<strong>需要注意的是，此时的 score是对加噪后的数据进行求导，而非原输入数据。</strong>score的方向是(对数)概率密度增长最快的方向，也就是最接近真实数据的方向。<br>Denoising score matching 的玩法是：在给定输入<span class="math inline">\(x\)</span>的情况下，将条件分布<span class="math inline">\(q(\tilde{x}|x)\)</span>建模为高斯分布，其中<span class="math inline">\(\tilde{x}\)</span>代表加噪后的数据，并且边缘化这个条件分布，以<span class="math inline">\(p(\tilde{x}) \equiv \int q(\tilde{x}|x)p(x)dx\)</span>来近似原数据分布，<strong>因此噪声强度不太大时，我们可以认为加噪后数据的概率分布与原数据的概率分布大致相同</strong>。</p><p><img src="/images/Score%20Based%20Models/5.png"></p><p>此时，score<span class="math inline">\(\frac{\partiallog(p(\tilde{x}))}{\partial \tilde{x}}\)</span>中由于<span class="math inline">\(p(x)\)</span>项在求导时与<span class="math inline">\(\tilde{x}\)</span>无关，可以略去了，具体推导如下：</p><p><span class="math display">\[\begin{align*} \frac{1}{2} \mathbb{E}_{\tilde{x} \sim q_{\sigma}} \left[\| \nabla_{\tilde{x}} \log q_{\sigma}(\tilde{x}) - s_{\theta}(\tilde{x})\|_2^2 \right] &amp;= \frac{1}{2} \int q_{\sigma}(\tilde{x}) \|\nabla_{\tilde{x}} \log q_{\sigma}(\tilde{x}) - s_{\theta}(\tilde{x})\|_2^2 d\tilde{x} \\ &amp;= \frac{1}{2} \int q_{\sigma}(\tilde{x}) \|\nabla_{\tilde{x}} \log q_{\sigma}(\tilde{x}) \|_2^2 d\tilde{x} +\frac{1}{2} \int q_{\sigma}(\tilde{x}) \| s_{\theta}(\tilde{x}) \|_2^2d\tilde{x}- \int q_{\sigma}(\tilde{x}) \nabla_{\tilde{x}} \logq_{\sigma}(\tilde{x})^T s_{\theta}(\tilde{x}) d\tilde{x} \end{align*}\]</span> 这里一样的，第一项是常数，第二项只涉及<span class="math inline">\(s_{\theta}(\tilde{x})\)</span>，我们可以处理，第三项比较棘手。但我们可以类似地用分布积分法进行处理：</p><p><span class="math display">\[\begin{align*} &amp;- \int q_{\sigma}(\tilde{x}) \nabla_{\tilde{x}} \logq_{\sigma}(\tilde{x})^T s_{\theta}(\tilde{x}) d\tilde{x} \\ &amp;= -\int q_{\sigma}(\tilde{x}) \frac{1}{q_{\sigma}(\tilde{x})}\nabla_{\tilde{x}} q_{\sigma}(\tilde{x})^T s_{\theta}(\tilde{x})d\tilde{x} \\ &amp;= - \int \nabla_{\tilde{x}} q_{\sigma}(\tilde{x})^Ts_{\theta}(\tilde{x}) d\tilde{x} \\ &amp;= - \int \nabla_{\tilde{x}}\left( \int p_{\text{data}}(x) q_{\sigma}(\tilde{x} | x) dx \right)^Ts_{\theta}(\tilde{x}) d\tilde{x} \\ &amp;= - \int \left( \intp_{\text{data}}(x) \nabla_{\tilde{x}} q_{\sigma}(\tilde{x} | x) dx\right)^T s_{\theta}(\tilde{x}) d\tilde{x} \\ &amp;= - \int \left( \intp_{\text{data}}(x) q_{\sigma}(\tilde{x} | x) \nabla_{\tilde{x}} \logq_{\sigma}(\tilde{x} | x) dx \right)^T s_{\theta}(\tilde{x}) d\tilde{x}\\ &amp;= - \int \int p_{\text{data}}(x) q_{\sigma}(\tilde{x} | x)\nabla_{\tilde{x}} \log q_{\sigma}(\tilde{x} |x)^Ts_{\theta}(\tilde{x})  dx \ d\tilde{x}  \end{align*}\]</span> 这里我们<span class="math inline">\(q(\tilde{x}|x)\)</span>是已知的，也就可以计算了。</p><p>OK，让我们代入原式之中：</p><p><span class="math display">\[\begin{align*} &amp;\frac{1}{2} \mathbb{E}_{\tilde{\mathbf{x}} \simq_{\sigma}} \left[ \|\nabla_{\tilde{\mathbf{x}}} \log q_{\sigma}(\tilde{\mathbf{x}}) - s_{\theta} (\tilde{\mathbf{x}}) \|_2^2 \right] \\&amp;= \text{const.} + \frac{1}{2} \mathbb{E}_{\mathbf{x} \simq_{\sigma}} \left[ \| s_{\theta} (\mathbf{x}) \|_2^2 \right] - \intq_{\sigma} (\tilde{\mathbf{x}}) \nabla_{\tilde{\mathbf{x}}} \logq_{\sigma} (\tilde{\mathbf{x}})^{\top} s_{\theta} (\tilde{\mathbf{x}})d\tilde{\mathbf{x}} \\ &amp;= \text{const.} + \frac{1}{2}\mathbb{E}_{\mathbf{x} \sim q_{\sigma}} \left[ \| s_{\theta}(\tilde{\mathbf{x}}) \|_2^2 \right] - \mathbb{E}_{\mathbf{x} \simp_{\text{data}}(\mathbf{x}), \tilde{\mathbf{x}} \simq_{\sigma}(\tilde{\mathbf{x}}|\mathbf{x})} \left[\nabla_{\tilde{\mathbf{x}}} \log q_{\sigma}(\tilde{\mathbf{x}}|\mathbf{x})^{\top} s_{\theta} (\tilde{\mathbf{x}})\right] \\ &amp;= \text{const.} + \frac{1}{2} \mathbb{E}_{\mathbf{x}\sim p_{\text{data}}(\mathbf{x}), \tilde{\mathbf{x}} \simq_{\sigma}(\tilde{\mathbf{x}}|\mathbf{x})} \left[ \| s_{\theta}(\tilde{\mathbf{x}}) - \nabla_{\tilde{\mathbf{x}}} \log q_{\sigma}(\tilde{\mathbf{x}}|\mathbf{x}) \|_2^2 \right] - \frac{1}{2}\mathbb{E}_{\mathbf{x} \sim p_{\text{data}}(\mathbf{x}),\tilde{\mathbf{x}} \sim q_{\sigma}(\tilde{\mathbf{x}})} \left[ \|\nabla_{\tilde{\mathbf{x}}} \log q_{\sigma} (\tilde{\mathbf{x}}) \|_2^2\right] \\ &amp;= \text{const.} + \frac{1}{2} \mathbb{E}_{\mathbf{x}\sim p_{\text{data}}(\mathbf{x}), \tilde{\mathbf{x}} \simq_{\sigma}(\tilde{\mathbf{x}}|\mathbf{x})} \left[ \| s_{\theta}(\tilde{\mathbf{x}}) - \nabla_{\tilde{\mathbf{x}}} \log q_{\sigma}(\tilde{\mathbf{x}}|\mathbf{x}) \|_2^2 \right] +\text{const.}      \end{align*}\]</span></p><p>看到没有！这也就是说，score 的方向与所加噪声的方向是相反的。 于是，在denoising score matching 的体制下，朝着 score的方向走，其实就是在<strong>去噪，在做 denoising</strong>。</p><p><img src="/images/Score%20Based%20Models/6.png"><br>在实践中，我们可以选择将<span class="math inline">\(q(\tilde{x}|x)\)</span>建模为<span class="math inline">\(N(\tilde{x};x;\sigma^2)\)</span>，即均值为原数据<span class="math inline">\(x\)</span>，方差为预设的<span class="math inline">\(\sigma^2\)</span>的高斯分布。于是，根据高斯分布的性质，有：</p><p><span class="math display">\[\tilde{x}=x + \sigma \epsilon,\epsilon\sim N(0,I)\]</span></p><p>其中，<span class="math inline">\(\epsilon\)</span>是从标准高斯分布中采样出来的噪声。</p><p>接着，在以上化简出的 score 中代入高斯分布的概率密度函数，可以得到score 为：</p><p><span class="math display">\[\frac{\partial log(q(\tilde{x}|x))}{\partial \tilde{x}} =-(\frac{\tilde{x}-x}{\sigma^2})=-\frac{\epsilon}{\sigma}\]</span></p><p>虽然我们对计算进行了大幅度简化，但这也导致了我们估计的是<strong>加噪数据的梯度</strong>。具体训练流程如下：</p><p><img src="/images/Score%20Based%20Models/7.png"></p><h3 id="sliced-score-matching">Sliced score matching</h3><p>Sliced scorematching的思想是，如果模型预测的梯度与真实梯度相同等价于他们在不同方向下的投影均相同，所以我们引入一个投影向量用于训练。这样我们的目标和最终化简（用<strong>分部积分</strong>即可）的格式如下：</p><ul><li><strong>goal：</strong> <span class="math display">\[\frac{1}{2} \mathbb{E}_{\mathbf{v} \sim p_v} \mathbb{E}_{\mathbf{x} \simp_{\text{data}}} \left[ \left( \mathbf{v}^{\top} \nabla_{\mathbf{x}}\log p_{\text{data}} (\mathbf{x}) - \mathbf{v}^{\top} s_{\theta}(\mathbf{x}) \right)^2 \right]\]</span></li><li><strong>loss：</strong> <span class="math display">\[\mathbb{E}_{\mathbf{v} \sim p_v}\mathbb{E}_{\mathbf{x} \sim p_{\text{data}}} \left[ \mathbf{v}^{\top}\nabla_{\mathbf{x}} s_{\theta} (\mathbf{x}) \mathbf{v} + \frac{1}{2}(\mathbf{v}^{\top} s_{\theta} (\mathbf{x}))^2 \right]\]</span></li></ul><p><img src="/images/Score%20Based%20Models/8.png"><br>这样我们便只需要进行<strong>一次</strong>反向传播了，大大减少了训练需要的计算量，计算图如下：</p><p><img src="/images/Score%20Based%20Models/9.png"><br>具体训练过程如下：</p><p><img src="/images/Score%20Based%20Models/10.png"><br>虽然这种方法的训练计算量会比Denoising scorematching大，但它是对真实数据梯度进行的估计</p><h2 id="问题">问题</h2><p>现在我们得到了SMLD生成模型，但实际上这个模型由很大的问题。首先看一下其在实践中的效果：</p><p><img src="/images/Score%20Based%20Models/11.png"><br>可以看到效果并不好。我们不妨从损失函数来分析一下原因：</p><p><span class="math display">\[\mathcal{L}    = \mathbb{E}_{p(\mathbf{x})}[||\nabla_{\mathbf{x}}\logp(\mathbf{x}) - \mathbf{s}_{\theta}(\mathbf{x})||^{2}]     = \intp(\mathbf{x})||\nabla_{\mathbf{x}}\log p(\mathbf{x}) - \mathbf{s}_{\theta}(\mathbf{x})||^{2}  d \mathbf{x}\\]</span></p><p>观察我们用来训练神经网络的损失函数，我们可以发现这个L2项其实是被<span class="math inline">\(p(\mathbf{x})\)</span>加权了。所以对于低概率的区域，估计出来的scorefunction就很不准确：</p><p><img src="/images/Score%20Based%20Models/12.png"><br>对于上面这张图来说，只有在高概率的红色区域，loss才高，scorefunction可以被准确地估计出来。但如果我们采样的初始点在低概率区域的话，因为估计出的scorefunction不准确，很有可能生成不出真实分布的样本。</p><p>此外，在现实中，比如对于图片来说，其往往是分布在一个<strong>低维度流型</strong>上，也就是大部分空间的概率密度几乎为0，此时我们的梯度定义已经失去了意义：</p><p><img src="/images/Score%20Based%20Models/13.png"><br>同时，我们通过<strong>LangevinDynamics</strong>进行采样并不能很好还原聚点的样本比：</p><p><img src="/images/Score%20Based%20Models/14.png"></p><h2 id="smld的改进">SMLD的改进</h2><p>那怎么样才能解决上面的问题呢？<strong>Denoising scorematching</strong>给我们给了一定的启发。<br>其实可以通过给数据增加噪声扰动的方式扩大高概率区域的面积。给原始分布加上高斯噪声，原始分布的方差会变大。这样相当于高概率区域的面积就增大了，更多区域的scorefunction可以被准确地估计出来。</p><p><img src="/images/Score%20Based%20Models/15.png"><br>但是噪声扰动的强度如何控制是个问题：</p><ul><li>强度太小起不到效果，高概率区域的面积还是太小</li><li>强度太大会破坏数据的原始分布，估计出来的scorefunction就和原分布关系不大了</li></ul><p>所以噪声强度越高，高概率区域面积越大，训练得到的梯度越准，但与原始数据的梯度差距也就越大。所以我们不妨加不同程度的噪声，让网络可以学到加了不同噪声的原始分布的scorefunction。这样既保证了原始低概率密度地区能学习到有效的梯度，同时原始高概率密度区的梯度估计是准确的。</p><p><img src="/images/Score%20Based%20Models/16.png"><br>说起来很拗口，其实很好理解。我们定义序列<span class="math inline">\({\sigma_{1 \sim L}} , \quad \sigma {1} \lt \sigma{2} \lt \cdots \lt \sigma_{L}\)</span>，代表从小到大的噪声强度。这样我们可以定义经过噪声扰动之后的数据样本，服从一个经过噪声扰动之后的分布，</p><p><span class="math display">\[\mathbf{x} + \sigma_{i}\mathbf{z}  = \int p(\mathbf{y})\mathcal{N}(\mathbf{x}|\mathbf{y}, \sigma {i}^{2}\mathbf{I})d\mathbf{y}\\]</span></p><p>我们用神经网络来估计经过噪声扰动过的分布的scorefunction，并把噪声强度<span class="math inline">\(\sigma_i\)</span>作为一个输入：</p><p><span class="math display">\[\mathcal{L} = \frac{1}{L}\sum_\limits {i=1}^{L} \lambda (i)\mathbb{E}_{p _{\sigma {i}}(\mathbf{x})}[||\nabla_{\mathbf{x}}\logp_{\sigma _ {i}}(\mathbf{x}) - \mathbf{s} _{\theta}(\mathbf{x,\sigma_i})||^{2}]\]</span></p><p>其中<span class="math inline">\(\lambda(i)\)</span>是权重，在实践中可以取<span class="math inline">\(\sigma_{i}^{2}\)</span></p><p><img src="/images/Score%20Based%20Models/17.png"><br>采样方式也要做出相应的变化，我们对于不同的噪声强度<span class="math inline">\(L, L-1, \cdots,1\)</span>做Langevin采样，<strong>上一个scale的结果作为这一次的初始化</strong>。这样我们每一次的初始化都能在梯度估计的有效区域。</p><p><img src="/images/Score%20Based%20Models/18.png"><br>这种采样方式也叫做<strong>Annealed Langevindynamics</strong>，具体训练流程如下：</p><p><img src="/images/Score%20Based%20Models/19.png"></p><h2 id="从离散到连续">从离散到连续</h2><p>当我们做Langevindynamics迭代次数足够多时，我们可以用<strong>随机微分方程(StochasticDifferential Equation, SDE)</strong>来建模这个采样过程。</p><p><span class="math display">\[\mathbf{x}_{i+1} = \mathbf{x}_{i} +\epsilon \nabla_{\mathbf{x}}\log p(\mathbf{x}_i) + \sqrt{2\epsilon}\mathbf{z}_{i}, \quad i=0,1,\cdots K\]</span></p><p>当<span class="math inline">\(K\to\infty\)</span>时，我们定义<span class="math inline">\(\Delta t = \epsilon,\; \Delta t \to 0\)</span></p><p><span class="math display">\[\mathbf{x}_{t+\Delta t} -\mathbf{x}_{t}= \nabla_{\mathbf{x}}\log p(\mathbf{x}_i)\Delta t +\sqrt{2 \Delta t}\mathbf{z}_{i}\]</span></p><p>我们将<span class="math inline">\(\nabla _{\mathbf{x}}\logp(\mathbf{x}_i)\)</span>和<span class="math inline">\(\sqrt{2}\)</span>一般化为<span class="math inline">\(\mathbf{f}(\mathbf{x}, t)\)</span>和<span class="math inline">\(g(t)\)</span>，这样上面就变成了</p><p><span class="math display">\[\mathbf{x} _{t+\Delta t} -\mathbf{x}_{t}= \mathbf{f}(\mathbf{x}, t)\Delta t + g(t) \sqrt{\Deltat}\mathbf{z} _{i}\]</span></p><p>其中</p><p><span class="math display">\[\sqrt{\Delta t}\mathbf{z} _{i} \sim\mathcal{N}(\mathbf{0}, \Delta t\mathbf{I})\]</span></p><p>这里可以引入布朗运动，如果我们定义<span class="math inline">\(\mathbf{w}\)</span>是一个布朗运动，那么</p><p><span class="math display">\[\begin{gather*}\mathbf{w}_{t+\Delta t} = \mathbf{w}_{t} +\mathcal{N}(\mathbf{0}, \Delta t\mathbf{I}),\\   \sqrt{\Deltat}\mathbf{z} _{i} = \mathbf{w}_{t+\Delta t} -\mathbf{w}_{t}.\end{gather*}\]</span></p><p>讲布朗运动带入到上面，得到</p><p><span class="math display">\[\mathbf{x}_{t+\Delta t} -\mathbf{x}_{t}= \mathbf{f}(\mathbf{x}, t)\Delta t +g(t)(\mathbf{w}_{t+\Delta t} - \mathbf{w}_{t})\]</span></p><p>当<span class="math inline">\(\Delta t \to 0\)</span>,</p><p><span class="math display">\[\text{d}\mathbf{x}=\mathbf{f}(\mathbf{x}, t)\text{d}\mathbf{t} +g(t)\text{d}\mathbf{w}\]</span></p><p>这里<span class="math inline">\(\mathbf{f}(\mathbf{x},t)\)</span>叫做<strong>drift coefficient</strong>,<span class="math inline">\(g(t)\)</span>代表<strong>diffusioncoefficient</strong>。SDE的解也就代表了数据不断加噪声的过程。</p><p><img src="/images/Score%20Based%20Models/20.png"><br>有了正向过程的SDE，我们可以得到</p><ul><li>反向的SDE</li></ul><p><span class="math display">\[\text{d}\mathbf{x}=[\mathbf{f}(\mathbf{x}, t) - g^2(t)\nabla _{\mathbf{x}}\logp(\mathbf{x})]\text{d}\mathbf{t} + g(t)\text{d}\mathbf{w}\]</span></p><ul><li>以及score matching的损失函数</li></ul><p><span class="math display">\[\mathbb{E}_{t\in \mathcal{U}(0, T)}\mathbb{E}_{p_{t}(\mathbf{x})}[g^2(t)||\nabla_{\mathbf{x}}\logp_t(\mathbf{x}) - \mathbf{s}_{\theta}(\mathbf{x})||^2]\]</span></p><p>可以看到，当我们知道了score后，就能解这个反向的SDE了。</p><p><img src="/images/Score%20Based%20Models/21.png"><br>整个基于SDE框架就是：我们在正向过程在图像中加噪声训练神经网络做scorematching，估计出scorefunction。然后在反向过程中从高斯噪声通过逆向SDE过程生成出数据分布的样本。</p><p><img src="/images/Score%20Based%20Models/22.png"></p><h2 id="从sde到ode">从SDE到ODE</h2><p>对于一个SDE，</p><p><span class="math display">\[\text{d}\mathbf{x}=\mathbf{f}(\mathbf{x}, t)\text{d}\mathbf{t} +g(t)\text{d}\mathbf{w}\]</span></p><p>我们写出它的<strong>福克-普朗克方程（Fokker-Planckequation）</strong>：</p><p><span class="math display">\[\begin{align*} \nabla _{t}p(\mathbf{x}, t) &amp;= -\nabla_{\mathbf{x}}[\mathbf{f}(\mathbf{x}, t)p(\mathbf{x}, t)] +\frac{1}{2}g^{2}(t)\nabla _{\mathbf{x}}^{2}p(\mathbf{x}, t)\\ &amp;=-\nabla _{\mathbf{x}}[\mathbf{f}(\mathbf{x}, t)p(\mathbf{x}, t) -\frac{1}{2}(g^{2}(t) - \sigma^{2}(t))\nabla_\mathbf{x}p(\mathbf{x}, t)]+ \frac{1}{2}\sigma^{2}(t)\nabla _{\mathbf{x}}^{2}p(\mathbf{x},t)\\   &amp;= -\nabla _{\mathbf{x}}[(\mathbf{f}(\mathbf{x}, t) -\frac{1}{2}(g^{2}(t) - \sigma^{2}(t))\nabla_\mathbf{x}\log p(\mathbf{x},t))p(\mathbf{x})] + \frac{1}{2}\sigma^{2}(t)\nabla_{\mathbf{x}}^{2}p(\mathbf{x}, t)\\\end{align*}\]</span></p><p>现在我们把福克-普朗克方程变成了这样：</p><p><span class="math display">\[\nabla_{t}p(\mathbf{x}, t) =-\nabla_{\mathbf{x}}[(\mathbf{f}(\mathbf{x}, t) - \frac{1}{2}(g^{2}(t) -\sigma^{2}(t))\nabla_\mathbf{x}\log p(\mathbf{x}, t))p(\mathbf{x})] +\frac{1}{2}\sigma^{2}(t)\nabla _{\mathbf{x}}^{2}p(\mathbf{x}, t)\]</span></p><p>其对应的SDE为：</p><p><span class="math display">\[\text{d}\mathbf{x}= [\mathbf{f}(\mathbf{x}, t) - \frac{1}{2}(g^{2}(t) -\sigma^{2}(t))\nabla_{\mathbf{x}}\logp_{t}(\mathbf{x})]\text{d}\mathbf{t} + \sigma(t)\text{d}\mathbf{w}\]</span></p><p>因为前后两个SDE是等价的，他们对应的<span class="math inline">\(p_{t}(\mathbf{x})\)</span>是一样的，意味着我们可以改变第二个SDE的方差<span class="math inline">\(\sigma(t)\)</span>。当我们取<span class="math inline">\(\sigma(t)=0\)</span>，可以得到一个<strong>常微分方程(OrdinaryDifferential Equation, ODE)</strong>,</p><p><span class="math display">\[\text{d}\mathbf{x}=[\mathbf{f}(\mathbf{x}, t) - \frac{1}{2}g^{2}(t)\nabla_{\mathbf{x}}\logp_{t}(\mathbf{x})]\text{d}\mathbf{t}\]</span></p><p>下图就展示了SDE和ODE解的过程，可以看到ODE的轨迹是确定光滑的，而SDE的轨迹是随机的。这两个过程中的任意边缘分布<span class="math inline">\({p_{t}(\mathbf{x})}_{t\in[0,T]}\)</span>都是一样的。</p><p><img src="/images/Score%20Based%20Models/23.png"><br>ODE形式有它的优点在于：</p><ul><li>因为ODE比SDE好解，所以ODE的采样速度更快。</li><li>因为ODE是不带随机噪声的，整个过程是确定的，是可逆的，所以这个<strong>ODE也可以看做Normalizingflows</strong>，可以用来估计概率密度和似然。</li></ul><p>但同时由于没有了随机噪声，可能导致多样性更差，实践中生成效果也不如SDE。</p>]]></content>
    
    
    <categories>
      
      <category>Stanford CS236深度生成模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生成模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Energy Based Models</title>
    <link href="/2024/09/20/Energy%20Based%20Models/"/>
    <url>/2024/09/20/Energy%20Based%20Models/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习StanfordCS236课程的学习笔记，分享记录，也便于自己实时查看。</p><h2 id="引入">引入</h2><p>生成模型的核心目标是对目标样本的概率分布进行预测。而对于一个概率密度函数<span class="math inline">\(P(x)\)</span>，它只需要满足下面两个条件：</p><ul><li><strong>非负</strong>， <span class="math inline">\(P(x)\)</span>在任何一个点都不能小于0，这很显然。</li><li><strong>积分为1</strong>， <span class="math inline">\(P(x)\)</span>从负无穷积分到正无穷得是1。</li></ul><p>其中对于第二点，如果 <span class="math inline">\(P(x)\)</span>的不是1，是 <span class="math inline">\(Z\)</span>，我们进行一下<strong>归一化</strong>，除一下 <span class="math inline">\(Z\)</span>就是1啦。反正至少得是有限的。那么如果我们有一个函数 <span class="math inline">\(f(x)\)</span>，我们只需要对其进行变换，满足上面两个特点，便能将其转化为一个概率密度函数。</p><p>首先可以让 <span class="math inline">\(f(x)\)</span>变为<strong>非负</strong>的 <span class="math inline">\(g(x)\)</span>，比如</p><ul><li><span class="math inline">\(g(x) = f(x)^2\)</span></li><li><span class="math inline">\(g(x) = e^{f(x)}\)</span></li><li><span class="math inline">\(g(x) = log(1 + f(x)^2)\)</span></li><li>......</li></ul><p><img src="/images/Energy%20Based%20Models/1.png"></p><p>可以看到这样的选择有很多，然后接下来便是<strong>归一化</strong>了，只需要</p><p><span class="math display">\[P(x) = \frac{g(x)}{\int g(x)dx} =\frac{g(x)}{Z}\]</span></p><p><img src="/images/Energy%20Based%20Models/2.png"></p><p>那么所谓的<strong>Energy Based Model</strong>呢，其实很简单，我们就是假设这个函数 <span class="math inline">\(g(x) =e^{f(x)}\)</span> 。</p><p>这个时候，下面那个体积volume呢，也叫做<strong>partitionfunction</strong>。</p><p>为啥要 <span class="math inline">\(exp()\)</span>呢？因为希望在算概率的时候取log，和这个 $ e x p ( ) $很多时候能够抵消。而且也和统计物理（虽然笔者并没有研究过统计物理）也有一些联系，这也是energy名字的最初由来。</p><h2 id="基本定义">基本定义</h2><p>对数据的概率分布进行描述时，这些概率分布都可以写成基于能量函数的形式(energyfunciton)， <span class="math inline">\(f(\mathbf x )\)</span>。对于连续变量，每个数据点对应一个概率密度函数值，对应一个能量值，如此概率分布即可写成如下玻尔兹曼分布的形式，也叫作吉布斯分布(Boltzmann/Gibbsdistribution)：</p><ul><li><span class="math inline">\(p(\mathbf x )=\frac{e^{f(\mathbfx)}}{Z}\)</span></li><li><span class="math inline">\(Z\)</span>为概率归一化的分母，也称为<strong>配分函数(partitionfunction)</strong>， <span class="math inline">\(Z=\int e^{f(\mathbf x)}dx\)</span></li></ul><p>由以上公式可知，概率值较高的位置对应着能力较低的点。举一个简单的例子看一下，将高斯分布以能量函数的形式表示：</p><p><span class="math display">\[f(x;\mu,\sigma^2)=-\frac{1}{2\sigma^2}(x-\mu)^2\]</span></p><p><span class="math display">\[p(x)=\frac{e^{f(\mathbf x)}}{\inte^{f(\mathbf x)}dx}=\frac{e^{-\frac{1}{2\sigma^2}(x-\mu)^2}}{\sqrt {2\pi\sigma^2}}\]</span></p><h2 id="部分应用">部分应用</h2><h3 id="分类任务">分类任务</h3><p>一般来说，这个partitionfuntion是不能算的，除非是限制为一些可以积分的函数，得到闭式解，但那样表达力又太弱了。而在实际中，我们的<span class="math inline">\(f(x)\)</span>一般是用神经网络进行模拟的，所以很难求出这个积分（你也可以遍历所有的情况，但这对于训练或者推理都是无法接受的）。</p><p>有时候呢，除非是要算出具体的概率，我们不需要管这个partitionfunction，反正就是知道它是个常数。</p><p>比如我们想知道 <span class="math inline">\(p(a)\)</span> 和 <span class="math inline">\(p(b)\)</span>哪个概率大，就不用去知道绝对的值，只需要知道<strong>相对大小</strong>就可以啦。这就可以用在分类任务里了。</p><p><img src="/images/Energy%20Based%20Models/3.png"></p><p>比如对于图像识别的任务，我只需要知道一个物体是更有可能像猫还是更有可能像狗，而不一定要知道他们的具体概率。</p><p><img src="/images/Energy%20Based%20Models/4.png"></p><p>课程中还列举了一个Ising model 的例子，也很直观，不赘述了：</p><p><img src="/images/Energy%20Based%20Models/5.png"></p><h3 id="组合专家系统">组合专家系统</h3><p>通过EBMs，可以把多个<strong>专家模型</strong>混合起来，用乘法。在对模型采样的时候，就会具有多个生成模型的所有性质，比如又是女人又是年轻又是美貌，就不会生成一个年迈的男人。</p><p><img src="/images/Energy%20Based%20Models/6.png"></p><p><strong>受限玻尔兹曼机</strong>也是基于能量模型，能量形式如下:<br><span class="math display">\[f(\mathbf x;\theta)=exp(\mathbf x^T\mathbf{Wx}+\mathbf{b}^T\mathbf{x} +\mathbf{c}^T\mathbf{z})\]</span></p><p>其它就不赘述了。</p><p><img src="/images/Energy%20Based%20Models/7.png"></p><h2 id="训练">训练</h2><h3 id="损失函数训练目标">损失函数（训练目标）</h3><p>那么如何优化这个模型，直接想法肯定是<strong>极大似然估计</strong></p><p><span class="math display">\[L = \ log(\frac{exp({f_\theta(x_{train})})}{Z(\theta)}) = f_\theta(x_{train}) -log(Z(\theta))\]</span></p><p>这里有个小问题，直接最大化分子并不能解决问题，因为分母是分子的积分，如果只顾着最大化分子的话，可能分母也跟着变大，那最后这整个分数就可能不变甚至变小！但是积分我们又计算不出来怎么办？蒙特卡洛估计便可以派上用场了，我们对<span class="math inline">\(L\)</span> 求一下梯度：</p><p><span class="math display">\[\begin{align*}\nabla_{\theta} f_{\theta}(x_{\text{train}}) - \nabla_{\theta} \logZ(\theta) &amp;= \nabla_{\theta} f_{\theta}(x_{\text{train}}) -\frac{\nabla_{\theta} Z(\theta)}{Z(\theta)} \\&amp;= \nabla_{\theta} f_{\theta}(x_{\text{train}}) -\frac{1}{Z(\theta)} \int \nabla_{\theta} \exp \{ f_{\theta}(x) \} dx \\&amp;= \nabla_{\theta} f_{\theta}(x_{\text{train}}) -\frac{1}{Z(\theta)} \int \exp \{ f_{\theta}(x) \} \nabla_{\theta}f_{\theta}(x) dx \\&amp;= \nabla_{\theta} f_{\theta}(x_{\text{train}}) - \int \frac{\exp \{f_{\theta}(x) \}}{Z(\theta)} \nabla_{\theta} f_{\theta}(x) dx \\&amp;= \nabla_{\theta} f_{\theta}(x_{\text{train}}) -\mathbb{E}_{x_{\text{sample}}} [\nabla_{\theta}f_{\theta}(x_{\text{sample}})] \\&amp;= \nabla_{\theta} f_{\theta}(x_{\text{train}}) - \nabla_{\theta}f_{\theta}(x_{\text{sample}})\end{align*}\]</span></p><p>其中 <span class="math inline">\(x_{sample} \simexp(f_\theta(x_{sample}))/Z_\theta\)</span></p><p>最后一步代表在训练过程中，我们只取一个样本作为期望的估计值。</p><p><img src="/images/Energy%20Based%20Models/8.png"></p><p>其实主观上也很好理解，其实就是对比了训练集和从模型中的采样，让训练集中数据的概率比随便采样出来的概率大。</p><p>我们对上面公式取个负，就是损失函数了。</p><h3 id="如何采样">如何采样</h3><p>那么问题来了，我们怎么从这个能量模型中采样呢？你看看上面能量模型的式子，你只知道x比y概率大还是概率小，但你不知道x或者y的准确概率。</p><p>这时候，MCMC<strong>马尔科夫链蒙特卡罗</strong>就出场啦。</p><p><img src="/images/Energy%20Based%20Models/9.png"></p><p>这是课程对于<strong>MCMC</strong>的叙述，没明白的可以复习一下，其实就是<strong>MH算法</strong>：</p><p><img src="/images/Energy%20Based%20Models/10.png"></p><p>课程中没强调这个noise是对称的，就是 <span class="math inline">\(x\)</span> 到 <span class="math inline">\(x&#39;\)</span> 的概率等于 <span class="math inline">\(x&#39;\)</span> 到 <span class="math inline">\(x\)</span> 的概率。这时候上图中的关于 <span class="math inline">\(q\)</span> 的分数就等于一了。那就是说，如果 <span class="math inline">\(f(x’)\)</span>的值大于当前值，那就无脑接受就好啦（2.1步）。如果没有大于，那就算一下比例咯（2.2步）。所以课程中的这个算法就是MH算法。</p><p>MH算法很美妙，但太慢啦。那怎么办呢？我们可以用<strong>郎之万Langevin动力学</strong>来帮助MH算法，让随机游走朝着概率更高的地方走。 这就是Metropolis-adjusted Langevin algorithm。</p><p><img src="/images/Energy%20Based%20Models/11.png"></p><p>最后总结一下，先用MH算法抽样，用这些抽样放到contrasive divergence算法里训练能量模型的参数，来极大似然</p><h2 id="score-matching">Score Matching</h2><p>上面我们用MH算法给出了一个训练和推理的方法，但缺点很明显，就是收敛的太慢了，随着维度的增加，收敛速度指数级别下降。虽然用了郎之万Langevin动力学来进行提速，但每次梯度一更新之后，分布就变了。所以对于contrasivedivergence的每一步来说，MCMC都要从头开始采样直到收敛。（MCMC采样不是一开始就能用的，要丢弃前n个样本，叫做burnin）</p><p>拿能否训练时候不用sampling呢？</p><h3 id="score-function">score function</h3><p>先看一下什么叫score function</p><p><img src="/images/Energy%20Based%20Models/12.png"></p><p>就是指向高概率方向的梯度。一个观察是，这个梯度和分母，就是partitionfunction无关。至于为什么叫做score fuction，那是因为我们一般把<strong><span class="math inline">\(f_\theta(x)\)</span></strong>对输入x的梯度称为<strong>score。</strong></p><h3 id="score-matching-1">score matching</h3><p>在之前的MCMC采样方法训练中，当我们有了一个准确的能量模型后，我们从数据分布里采样就转换成了根据训练好的能量模型的score,来进行MCMC采样。那么为什么不能换个思路，直接将能量模型建模成score，即用一个神经网络来拟合score!这个方法就叫score-matching!</p><p><img src="/images/Energy%20Based%20Models/13.png"></p><p>如上所示，我们的目标依旧是用score matching来减小这两个分布的区别。难点在于，对于真实分布Pdata怎么求导呢？先看看一维的情况：</p><p><span class="math display">\[\begin{align*}\frac{1}{2} \mathbb{E}_{x \sim p_{\text{data}}} \left[ (\nabla_x \logp_{\text{data}}(x) - \nabla_x \log p_{\theta}(x))^2 \right]  &amp;=\frac{1}{2} \int p_{\text{data}}(x) \left[ (\nabla_x \logp_{\text{data}}(x) - \nabla_x \log p_{\theta}(x))^2 \right] dx &amp;\\&amp;= \frac{1}{2} \int p_{\text{data}}(x) (\nabla_x \logp_{\text{data}}(x))^2 dx + \frac{1}{2} \int p_{\text{data}}(x) (\nabla_x\log p_{\theta}(x))^2 dx - \int p_{\text{data}}(x) \nabla_x \logp_{\text{data}}(x) \nabla_x \log p_{\theta}(x) dx &amp;\end{align*}\]</span></p><p>其中第一项是常数，我们不用管，第二项也只涉及到 <span class="math inline">\(p_\theta\)</span> (积分的 <span class="math inline">\(p_{data}\)</span>直接通过在训练集抽样即可)，第三项比较棘手，涉及到 <span class="math inline">\(\nabla_x \log p_{\text{data}}(x)\)</span>，这个我们没法直接求出。</p><p>但是我们可以通过分布积分来进行化简：</p><p><span class="math display">\[\begin{align*}-\int p_{\text{data}}(x) \nabla_x \log p_{\text{data}}(x) \nabla_x \logp_{\theta}(x) dx &amp;= - \int p_{\text{data}}(x)\frac{1}{p_{\text{data}}(x)} \nabla_x p_{\text{data}}(x) \nabla_x \logp_{\theta}(x) dx \\ &amp;= - p_{\text{data}}(x) \nabla_x \logp_{\theta}(x) \Big|_{x = -\infty}^{x = \infty} + \int p_{\text{data}}(x)\nabla_x^2 \log p_{\theta}(x) dx \\ &amp;= \int p_{\text{data}}(x)\nabla_x^2 \log p_{\theta}(x) dx\end{align*}\]</span></p><p>其中我们认为 <span class="math inline">\(p_{\text{data}}(x) \nabla_x\log p_{\theta}(x) \Big|_{x = -\infty}^{x = \infty}  = 0\)</span>，因为我们假定无穷远处的 <span class="math inline">\(p_{data}\)</span>为0。</p><p><img src="/images/Energy%20Based%20Models/14.png"></p><p>对于多维与一维类似，区别就是我们分部积分得到的结果是 <span class="math inline">\(log(p_\theta(x))\)</span>的<strong>Hessian</strong>的迹，最终我们得到的形式如下：</p><p><img src="/images/Energy%20Based%20Models/15.png"></p><p>我们通过分部积分把对 <span class="math inline">\(P_{data}\)</span>的梯度项给搞没了，就不用像之前那样费劲的去MCMC了。不过缺点是这个Hessian矩阵算起来很麻烦。</p><h2 id="noise-contrastive-estimation">Noise contrastive estimation</h2><p>把NCE用在Energy BasedModel其实思想也很简单，我们在GANs中提到，对于一个真实样本和模型样本进行分类的最佳判别器是，对给定<span class="math inline">\(x\)</span> 的判定为真实样本的概率为<span class="math inline">\(\frac{P_{data}(x)}{P_{data}(x) +P_n(x)}\)</span>。</p><p>所以NCE的想法就是我去用生成器组成一个判别器，这个生成器输出概率为<span class="math inline">\(P_{\theta^*}(x)\)</span>，而判别器的输出则是 <span class="math inline">\(\frac{P_{\theta^*}(x)}{P_{\theta^*}(x) +P_n(x)}\)</span> ，这样当判别器训练成为最佳判别器时， <span class="math inline">\(P_{\theta^*}(x)\)</span> 就等于 $P_{data}(x) $。</p><p>注意，这里的 <span class="math inline">\(P_n\)</span>的概率是我们给定一个特定噪声分布进行采样的概率，所以很好获得。也就是说在NCE中，非真实样本的概率分布是事先指定的，而不是模型学习得到的。</p><p>但是，依旧会到那个问题， <span class="math inline">\(P_{\theta^*}(x)= \frac{exp(f_{\theta^*}(x))}{Z_{\theta*}}\)</span>，我的分母怎么处理呢？此时我们可以把 <span class="math inline">\(Z\)</span>也作为一个参数进行训练。假如我们能够得到最佳判别器，由于 <span class="math inline">\(\frac{exp(f_{\theta^*}(x))}{Z^{*}} =P_{data}\)</span> ，所以 <span class="math inline">\(Z\)</span>也就肯定是最佳的分区函数了。</p><p><img src="/images/Energy%20Based%20Models/16.png"></p><p>把这个形式带入我们二分类的目标函数（与GANs相同，这里不赘述了）：</p><p><img src="/images/Energy%20Based%20Models/17.png"></p><p>当然，对于这个 <span class="math inline">\(p_n\)</span>，它对于训练效果有很显著的影响，毕竟区分图片和一堆噪声可不用很强的判别能力。所以后面也有对这个的改进工作，具体也就是类似GANs一样，再加一个生成器：</p><p><img src="/images/Energy%20Based%20Models/18.png"></p><p>当时，这样就会训练得到两个生成模型了，具体推理阶段都可以使用。</p><p>注意，能量模型作为生成模型的一种，建模的是 <span class="math inline">\(P(x)\)</span> ,主要功能是从 <span class="math inline">\(P(x)\)</span> 里面采样。上面说的scorematching是在训练的时候不用从中采样，加快训练的脚步，但是真正使用的时候还是得有MCMC。NCE因为显式的训练了partitionfunction <span class="math inline">\(Z\)</span>，也许可以不用MCMC（但笔者感觉也没有比较好的直接采样方法，个人觉得还是需要靠MCMC，如果读者有好的想法也可以指正我）。</p>]]></content>
    
    
    <categories>
      
      <category>Stanford CS236深度生成模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生成模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蒙特卡洛采样方法</title>
    <link href="/2024/09/19/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/19/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最近在学习StanfordCS236课程，里面多次提到了蒙特卡洛采样，但本人之前并没有系统地对蒙特卡洛采样进行过整理学习，所以也就正好趁此机会学习一下蒙特卡洛采样，分享记录，也便于自己实时查看。</p><h1 id="蒙特卡洛估计">蒙特卡洛估计</h1><h2 id="蒙特卡洛估计的原理">蒙特卡洛估计的原理</h2><p><strong>蒙特卡洛估计(Monte CarloEstimator)</strong>的原理很简单，假设现在我们要求解一个一维的积分 <span class="math inline">\(\int_{a}^{b} g(x) dx\)</span> 。已知一个概率密度为<span class="math inline">\(f(x)\)</span> 的随机变量<span class="math inline">\(X\)</span> ，蒙特卡洛估计可以表示为：</p><p><span class="math display">\[G_N =\frac{1}{N}\sum_{i=1}^{N}{\frac{g(X_i)}{f(X_i)}}\\\]</span></p><p>概率密度 <span class="math inline">\(f(x)\)</span> 需要满足</p><p><span class="math display">\[ \begin{cases}  f(x) &gt; 0, x \in (a,b),\\   f(x) = 0, x \notin (a, b).\end{cases}\\\]</span></p><p>现在来验证下, 这种方式是正确的：</p><p><span class="math display">\[\begin{align*} E[G_N] &amp; =E\left [\frac{1}{N}\sum_{i=1}^{N}{\frac{g(X_i)}{f(X_i)}} \right]\\ &amp; =\frac{1}{N}\sum_{i=1}^{N}\int_{a}^{b}\frac{g(x)}{f(x)}f(x)dx\\ &amp;=\frac{1}{N}\sum_{i=1}^{N}\int_{a}^{b}g(x)dx\\ &amp;= \int_{a}^{b}g(x)dx\end{align*}\\\]</span></p><p>也就是说， <span class="math inline">\(G_N\)</span> 的期望与 <span class="math inline">\(\int_{a}^{b} g(x) dx\)</span> 是相同的，而 <span class="math inline">\(G_N\)</span> 的方差如下：</p><p><span class="math display">\[\begin{align*} D[G_N] &amp; =D\left [\frac{1}{N}\sum_{i=1}^{N}{\frac{g(X_i)}{f(X_i)}} \right]\\ &amp; =\frac{1}{N^2}D\left [ \sum_{i=1}^{N}{\frac{g(X_i)}{f(X_i)}} \right]\\&amp;= \frac{1}{N^2}\cdot N  \cdot D\left [ {\frac{g(X_i)}{f(X_i)}}\right]\\ &amp;= \frac{1}{N} D\left [ {\frac{g(X_i)}{f(X_i)}} \right]\end{align*}\\\]</span></p><p>从上面的式子，可以看出，要减少方差，有两种途径：</p><ul><li>增加采样次数 <span class="math inline">\(N\)</span></li><li>减少 <span class="math inline">\(D(\frac{g(X)}{f(X)})\)</span></li></ul><p>理论上，只要我们采样次数足够多，方差趋近于0，<span class="math inline">\(G_N\)</span> 也就依概率收敛于<span class="math inline">\(\int_{a}^{b} g(x) dx\)</span></p><h2 id="蒙特卡洛估计的优点">蒙特卡洛估计的优点</h2><p>我们在考虑一个<strong>积分算法/Estimator</strong>时，通常从两个角度考虑。</p><p>一个是计算的准确性，即随着采样次数增大时，结果是否趋近于我们期望的真实值。如果一个estimator的期望值和真实值相等，我们说它是<strong>无偏的/unbiased</strong>。如果一个estimator 的期望值和真实值不相等，则它是有偏的。大部分 estimator都是无偏的，在少数情况下，我们会使用一个有偏的但是计算收敛速度很快的estimator。</p><p>另外一个角度是计算结果的方差。随着采样次数增大时，计算结果的方差应该总是减少的。两个estimator的方差可以比较可以从两个角度来体现。即采样次数相同时的方差大小，以及随着采样次数增大，方差收敛的速度。我们总是期望使用一个方差较小且收敛较快的estimator，来减少计算的事件。</p><p>计算结果表明，蒙特卡洛估计误差收敛的速度为 <span class="math inline">\(O(\sqrt N)\)</span>(意味着4倍的采样会使误差减少一半)，蒙特卡洛估计不受维度影响，在高维情况下比其他估计方法收敛要快得多。</p><h1 id="蒙特卡洛估计的实践使用">蒙特卡洛估计的实践使用</h1><p>在实际使用中，直接使用蒙特卡洛方法要求我们能够从 <span class="math inline">\(p(x)\)</span>中采样——对于简单分布（如均匀分布）这是容易做到的；对于稍微复杂一些但可写出PDF 或 CDF分布，可以利用变量替换定理来直接采样；而对于更复杂的分布，我们则更多选择拒绝采样和重要性采样来实现这一点。。</p><h2 id="变量替换定理">变量替换定理</h2><p>$ X$服从一个我们能直接进行采样的连续值（例如均匀分布），我们希望找到一个函数<span class="math inline">\(f(x)\)</span> ，让 <span class="math inline">\(Y=f(X)\)</span> 满足我们需要得到的分布 <span class="math inline">\(Y \sim P_y\)</span> ，则使用累积分布函数：</p><p><span class="math display">\[P_y(y)\triangleq P(Y\le y)=P(f(X)\ley)=P(X\in(f(x)\le y))\]</span></p><p>概率密度函数可以通过累积分布函数求导得到。当单调，因此可逆时，可得：</p><p><span class="math display">\[P_y(y)=P(f(X)\le y)=P(X\lef^{-1}(y))=P_x(f^{-1}(y))\]</span></p><p>求导可得：</p><p><span class="math display">\[p_y(y)\triangleq\frac{d}{dy}P_y(y)=\frac{d}{dy}P_x(f^{-1}(y))=\frac{dx}{dy}\frac{d}{dx}P_x(x)=\frac{dx}{dy}p_x(x)\]</span></p><p>其中 <span class="math inline">\(x=f^{-1}(y)\)</span>。由于符号并不重要，因此可得一般表达式：</p><p><span class="math display">\[p_y(y)=p_x(x)|\frac{dx}{dy}|\]</span></p><p>可将上述结果拓展为多变量分布。令 <span class="math inline">\(f\)</span> 为 <span class="math inline">\(R^n\)</span> 到 <span class="math inline">\(R^n\)</span> 的映射， <span class="math inline">\(\mathrm y=f(\mathrm x)\)</span> 。则雅可比矩阵<span class="math inline">\(J\)</span> 为：</p><p><span class="math display">\[J_{\mathrm x\rightarrow\mathrmy}\triangleq\frac{\partial(y_1,\ldots,y_n)}{\partial(x_1,\ldots,x_n)}\triangleq\begin{pmatrix} \frac{\partial y_1}{\partial x_1}&amp;\dots&amp;\frac{\partial y_1}{\partial x_n}\\\vdots&amp;\ddots&amp;\vdots\\ \frac{\partial y_n}{\partialx_1}&amp;\dots&amp;\frac{\partial y_n}{\partial x_n}\end{pmatrix}\]</span></p><p><span class="math inline">\(|det J|\)</span> 度量了单位立方体在应用<span class="math inline">\(f\)</span> 时的体积变化量。如果 <span class="math inline">\(f\)</span> 是一个可逆映射，可以使用反映射 <span class="math inline">\(\mathrm y\rightarrow\mathrm x\)</span>的雅可比矩阵定义变换变量的概率密度函数：</p><p><span class="math display">\[p_y(\mathrm y)=p_x(\mathrmx)|\det\left(\frac{\partial \mathrm x}{\partial\mathrmy}\right)|=p_x(\mathrm x)| \det J_{\mathrm y\rightarrow\mathrmx}|\]</span></p><p>这就是随机变量的变量替换定理，通过这个我们可以对一些相对简单的分布进行直接采样了。</p><p>例如设 <span class="math inline">\(x\)</span> 服从累积分布函数为<span class="math inline">\(F(x)=1-e^{-x}\)</span>(可验证是单调不减，且积分为1的函数)的分布，则可以通过逆变换的方法对<span class="math inline">\(F(x)\)</span>直接采样，<strong>产生服从F(X)分布的样本X。</strong><br>令 <span class="math inline">\(y=1-e^{-x}\)</span>，则$e^{-x}=1-y$.两边求对数可得: <span class="math inline">\(x=-ln(1-y)\)</span> ,则 <span class="math inline">\(F^{-1}(x)=-ln(1-x)\)</span> ，令 <span class="math inline">\(x_i\)</span> 为均匀分布样本，则 <span class="math inline">\(X_i=-ln(1-x_i)\)</span> 为服从累积分布函数为<span class="math inline">\(F(x)\)</span> 分布的样本.</p><h2 id="拒绝接受采样">拒绝接受采样</h2><p>拒绝接受采样的目的仍然是<strong>得到服从某个概率分布的样本</strong>，不过这种方法是直接利用<strong>概率密度函数(PDF)</strong>得到样本。如下图所示，<span class="math inline">\(p(x)\)</span> 是我们希望采样的分布， <span class="math inline">\(q(x)\)</span>是我们<strong>提议的分布</strong>(proposal distribution)， <span class="math inline">\(q(x)\)</span> 分布比较简单，令 <span class="math inline">\(kq(x)&gt;p(x)\)</span> ，我们首先在 <span class="math inline">\(kq(x)\)</span>中按照直接采样的方法采样粒子，接下来以 <span class="math inline">\(\frac{p(x_i)}{kq(x_i)}\)</span>的概率接受这个点，最终得到符合 <span class="math inline">\(p(x)\)</span>的N个粒子。</p><p><img src="/images/蒙特卡洛采样方法/1.png"><br>可以证明，这样做得到的样本是服从<span class="math inline">\(p(x)\)</span>的，我们可以计算 <span class="math inline">\(x_0\)</span> 对应的样本被取到的概率为：</p><p><span class="math display">\[\frac{q(x_0)\dfrac{\tildep(x_0)}{kq(x_0)}}{\displaystyle\int_x q(x)\frac{\tildep(x)}{kq(x)}\mathrm dx}=\frac{\tilde p(x_0)}{\displaystyle\int_x \tildep(x)\mathrm dx}=p(x_0)\]</span></p><p>所以<strong>拒绝接受采样的基本步骤：</strong></p><ol type="1"><li>生成服从 <span class="math inline">\(q(x)\)</span> 的样本 <span class="math inline">\(x_i\)</span> .<br></li><li>生成服从均匀分布 <span class="math inline">\(U(0,1)\)</span> 的样本<span class="math inline">\(u_i\)</span> .<br></li><li>当 <span class="math inline">\(k\cdot q(x_i)\cdotu_i&lt;p(x_i)\)</span> ,也就是二维点落在蓝线以下，此时接受 <span class="math inline">\(X_k=x_i\)</span> 这里乘以 <span class="math inline">\(u_i\)</span> ，是因为我们需要以 <span class="math inline">\(\frac{p(x_i)}{kq(x_i)}\)</span>的概率接受这个点，因为如果 <span class="math inline">\(k\cdotq(x_i)\cdot u_i&lt;p(x_i)\)</span> ，则 <span class="math inline">\(u_i&lt;\frac{p(x_i)}{k\cdot q(x_i)}\)</span> ，而<span class="math inline">\(u_i\)</span> 服从均匀分布 <span class="math inline">\(U(0,1)\)</span></li><li>最终得到的 <span class="math inline">\(X_k\)</span> 为服从 <span class="math inline">\(p(x)\)</span> 的样本.</li></ol><p>我们可以计算一下样本采样的<strong>接受率</strong>：</p><p><span class="math display">\[p(\text{accept})=\int_x \frac{\tildep(x)}{kq(x)}q(x)\mathrm dx=\frac{1}{k}\int_x\tilde p(x)\mathrmdx\]</span></p><p>因此 <span class="math inline">\(k\)</span>越小，总接受率越大，算法效率越高。然而， <span class="math inline">\(k\)</span> 小也意味着 <span class="math inline">\(q(x)\)</span> 本身就要与 <span class="math inline">\(p(x)\)</span> 比较相似，对于复杂的 <span class="math inline">\(p(x)\)</span> 而言寻找到一个合适的 <span class="math inline">\(q(x)\)</span> 非常困难的。</p><h2 id="重要性采样">重要性采样</h2><p>重要性采样的目的：求一个函数 <span class="math inline">\(f(x)\)</span> 在概率密度函数为<span class="math inline">\(p(x)\)</span>分布下的<strong>期望</strong>，即</p><p><span class="math display">\[\mathbb{E}[f(x)]=\intf(x)p(x)dx\]</span></p><p>当 <span class="math inline">\(p(x)\)</span>很复杂时，不解析，积分不好求时，可以通过重要性采样来计算。当 <span class="math inline">\(f(x)=x\)</span> ，则可以算 <span class="math inline">\(p(x)\)</span> 的期望。</p><h3 id="原理">原理</h3><p>首先, 当我们想要求一个函数 <span class="math inline">\(f(x)\)</span>在区间 <span class="math inline">\([a, b]\)</span> 上的积分 <span class="math inline">\(\int_{a}^{b} f(x) d x\)</span>时有可能会面临一个问题, 那就是积分曲线难以解析,无法直接求积分。这时候我们可以采用一种估计的方式, 即在区间 <span class="math inline">\([a, b]\)</span> 上进行采样: <span class="math inline">\(\left\{x_{1}, x_{2} \ldots, x_{n}\right\}\)</span>, 值为 <span class="math inline">\(\left\{f\left(x_{1}\right),f\left(x_{2}\right), \ldots, f\left(x_{n}\right)\right\}\)</span></p><p>如果采样是均匀的, 即如下图所示:</p><p><img src="/images/蒙特卡洛采样方法/2.png"></p><p>那么显然可以得到这样的估计: <span class="math inline">\(\int_{a}^{b}f(x) d x=\frac{b-a}{N} \sum_{i=1}^{N} f\left(x_{i}\right)\)</span> ,在这里 <span class="math inline">\(\frac{b-a}{N}\)</span>可以看作是上面小长方形的底部的 “宽”, 而 <span class="math inline">\(f\left(x_{i}\right)\)</span> 则是坚直的 “长”。</p><p>上述的估计方法随着取样数的增长而越发精确，那么有什么方法能够在一定的<strong>抽样数量基础</strong>上来增加准确度，减少方差呢？比如<span class="math inline">\(x\)</span> 样本数量取10000，那么显然在 <span class="math inline">\(f(x)\)</span> 比较大的地方，有更多的 <span class="math inline">\(x_i\)</span> ，近似的积分更精确。</p><p>并且原函数 <span class="math inline">\(f(x)\)</span>也许本身就是定义在一个分布之上的, 我们定义这个分布为 <span class="math inline">\(p(x)\)</span> , 我们无法直接从<span class="math inline">\(p(x)\)</span> 上进行采样,所以另辟蹊径重新找到一个更加简明的分布 <span class="math inline">\(q(x)\)</span> , 从它进行取样, 希望间接地求出 <span class="math inline">\(f(x)\)</span> 在分布 <span class="math inline">\(p(x)\)</span> 下的期望。</p><h3 id="若px归一化">若p(x)归一化</h3><p>搞清楚了这一点我们可以继续分析了。首先我们知道函数 <span class="math inline">\(f(x)\)</span> 在概率分布 <span class="math inline">\(p(x)\)</span> 下的期望为:</p><p><span class="math display">\[\mathbb{E}[f(x)]=\int_{x} p(x) f(x) d x\]</span></p><p>但是这个期望的值我们无法直接得到, 因此我们需要借助 <span class="math inline">\(q(x)\)</span> 来进行采样, <span class="math inline">\(q(x)\)</span>可以选取简单的分布，比如<strong>设q(x)为均匀分布</strong>，当我们在<span class="math inline">\(q(x)\)</span> 上采样得到 <span class="math inline">\(\left\{x_{1}, x_{2}, \ldots,x_{n}\right\}\)</span> （即 <span class="math inline">\(x_i\)</span>服从 <span class="math inline">\(q(x)\)</span>分布）后，那么我们可以估计 <span class="math inline">\(f\)</span> 在<span class="math inline">\({q(x)}\)</span> 下的期望为：</p><p><span class="math display">\[\mathbb{E}[f(x)]=\int_{x} q(x) f(x) d x\approx \frac{1}{N} \sum_{i=1}^{N} f\left(x_{i}\right) \]</span></p><p>上面这个式子就简单很多了，只要我们得到 <span class="math inline">\(x_i\)</span> 然后代入 <span class="math inline">\(f(x)\)</span> 然后求和就行了，而且均匀分布的样本<span class="math inline">\(x_i\)</span>很容易获得。接着我们来考虑原问题，对式(1)进行改写, 即： <span class="math inline">\(p(x) f(x)=q(x) \frac{p(x)}{q(x)} f(x)\)</span> ,所以我们可以得到:</p><p><span class="math display">\[\mathbb{E}[f(x)]=\int_{x} q(x)\frac{p(x)}{q(x)} f(x) d x\]</span></p><p>这个式子我们可以看作是函数 <span class="math inline">\(\frac{p(x)}{q(x)} f(x)\)</span> 定义在分布 <span class="math inline">\(q(x)\)</span> 上的期望, 当我们在 <span class="math inline">\(q(x)\)</span> 上采样 <span class="math inline">\(\left\{x_{1}, x_{2}, \ldots,x_{n}\right\}\)</span> (<strong>服从q(x)分布</strong>)，可以估计 <span class="math inline">\(f\)</span> 的期望:</p><p><span class="math display">\[\begin{aligned}\mathbb{E}[f(x)]&amp;=\frac{1}{N}\sum_{i=1}^{N} \frac{p\left(x_{i}\right)}{q\left(x_{i}\right)}f\left(x_{i}\right)\\&amp;=\frac{1}{N} \sum_{i=1}^{N} w_if\left(x_{i}\right)\end{aligned}\]</span></p><p>在这里 <span class="math inline">\(w_i=\frac{p\left(x_{i}\right)}{q\left(x_{i}\right)}\)</span>就是<strong>重要性权重</strong>。</p><h3 id="若px没有归一化">若p(x)没有归一化</h3><p>上面的讨论是假设 <span class="math inline">\(p(x)\)</span>已经完成归一化了，也就是 <span class="math inline">\(\intp(x)=1\)</span> ,假如 <span class="math inline">\(p(x)\)</span>没有归一化，那么我们可以在上面的推导中对 <span class="math inline">\(p(x)\)</span> 进行归一化：</p><p><span class="math display">\[\begin{aligned}\mathbb{E}[f(x)]&amp;=\int f(x)\frac{p(x)}{\int p(x) d x} d x\\&amp;=\frac{\int f(x) p(x) d x}{\intp(x) d x}\\&amp;=\frac{\int f(x) \frac{p(x)}{q(x)} q(x) d x}{\int\frac{p(x)}{q(x)} q(x) d x}.\end{aligned}\]</span></p><p>而分子分母可分别得到，下面两式约等于都利用 <span class="math inline">\(q(x)\)</span> 是均匀分布的假设：</p><p><span class="math display">\[\begin{aligned}\int f(x)\frac{p(x)}{q(x)} q(x) d x &amp;\approx \frac{1}{n} \sum_{i=1}^{n} W_{i}f\left(x_{i}\right), \\\int \frac{p(x)}{q(x)} q(x) d x &amp;\approx\frac{1}{n} \sum_{i=1}^{n} W_{i}.\end{aligned}\]</span></p><p>其中 <span class="math inline">\(W_i=\frac{p(x_i)}{q(x_i)}\)</span>，则最终可得 <span class="math inline">\(\mathbb{E}[f(x)]\)</span> :</p><p><span class="math display">\[\begin{aligned}\mathbb{E}[f(x)] \approx\sum_{i=1}^{n} w_{i} f\left(x_{i}\right),w_{i}=\frac{W_{i}}{\sum_{i=1}^{n} W_{i}}\end{aligned}\]</span></p><h3 id="多重重要性采样">多重重要性采样</h3><p>有的时候, 需要积分的方程中可能包含多个需要积分的部分,这时候就需要用到<strong>多重重要性采样(multiple importancesampling/MIS)</strong>.</p><p>比如现在要求解 <span class="math inline">\(\int_{}^{}g_1(x)g_2(x)\)</span> 这样的积分时, 两个部分分别对应两个概率密度 <span class="math inline">\(f_1(x), f_2(x)\)</span> ,MIS给出的新的蒙特卡洛估计为:</p><p><span class="math display">\[\frac{1}{n_1}\sum_{i=1}^{n_1}{\frac{g_1(X_1)g_2(X_1)\omega_1(X_1)}{f(X_1)}} +\frac{1}{n_2}\sum_{i=1}^{n_2}{\frac{g_1(X_2)g_2(X_2)\omega_2(X_2)}{f(X_2)}}\\\]</span></p><p><span class="math inline">\(n_1,n_2\)</span> 分别是两边的采样次数,<span class="math inline">\(\omega_1,\omega_2\)</span>分别是两个部分对应的权重.</p><p>一个常用的权重函数为:</p><p><span class="math display">\[\omega_k = \frac{(n_kf_k(x))^2}{\sum_{i}^{}{(n_1f_i(x))^2}}\\\]</span></p><p>在上面有两个部分的情况下得:</p><p><span class="math display">\[\omega_1 = \frac{(n_1f_1(x))^2}{(n_1f_1(x))^2 +(n_2f_2(x))^2  }\\ \omega_2 = \frac{(n_2f_2(x))^2}{(n_1f_1(x))^2 +(n_2f_2(x))^2  }\\\]</span>与拒绝采样一样，重要性采样的效果与提议分布 <span class="math inline">\(q(x)\)</span>同 <span class="math inline">\(p(x)\)</span> 的接近程度紧密相关。当 <span class="math inline">\(p(x)\)</span> 比较复杂时，选择合适的 <span class="math inline">\(q(x)\)</span> 是非常困难的。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>概率论与数理统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GANs</title>
    <link href="/2024/09/18/GANs/"/>
    <url>/2024/09/18/GANs/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习StanfordCS236课程的学习笔记，分享记录，也便于自己实时查看。</p><h2 id="引入">引入</h2><p>前面我们学习了VAEs和NormalizingFlows，这两种模型都是基于最小化KL散度（对似然进行评估）来进行优化的。我们也可以看到，为了进行生成，我们往往会定义一个潜变量<span class="math inline">\(z\)</span>，所以对似然进行评估并不容易。VAEs是通过优化似然的下限ELBO来绕过这个问题，而NormalizingFlows是通过限制映射的形式来计算似然。</p><p>直接计算似然来进行评估，要么只能计算其下界，要么需要限制映射的形式。那有没有一种方法能够用间接方法代替这种直接比较，使生成分布变得越来越接近真实分布呢？GANs便是基于一种间接的评估方式进行设计的。</p><h2 id="基本思想">基本思想</h2><p>GANs的间接方法采用这两个分布的下游任务形式。然后，生成网络的训练是相对于该任务进行的，使生成分布变得越来越接近真实分布。GANs的下游任务是区分真实样本和生成样本的任务。或者我们可以说是“非区分”任务，因为我们希望区分尽可能失败。</p><p>因此，在 GANs架构中，我们有一个判别器，它接收真实和生成数据样本，并尽可能地对它们进行分类；还有一个生成器，它被训练成尽可能地欺骗判别器。即GANs由2个重要的部分构成：</p><ul><li>生成器(Generator)：通过机器生成数据，目的是“骗过”判别器。</li><li>判别器(Discriminator)：判断数据是真实的还是生成的，目的是找出生成器做的“假数据”。</li></ul><h2 id="训练过程">训练过程</h2><p>我们知道GANs的思想后，便能很直观的想到用分类问题的交叉熵作为判别器的损失函数。同时生成器的目的则是最大化这个交叉熵损失函数（混淆判别器），所以我们的训练目标是：</p><p><span class="math display">\[\mathop{\text{min}}\limits_{G}\mathop{\text{max}}\limits_{D}\ V(G,D) = \mathbb{E}_{x \sim p_{data}(x)} [\log D(x)] + \mathbb{E}_{z\sim p_z(z)} [\log(1 - D(G(z)))]\]</span></p><p>其中<span class="math inline">\(G\)</span>指的是生成器，<span class="math inline">\(D\)</span>指的是判别器。</p><p>所以我们的训练目标是一个极大极小的优化问题，在实际中，我们只需要从数据集中进行采样，然后用生成器进行采样，然后对上面的目标函数进行近似计算，最后进行梯度上升或者梯度下降即可</p><p><img src="/images/GANs/1.png"></p><h2 id="与散度的关系">与散度的关系</h2><p>那么为什么这样的设计能够间接地去让生成器生成的样本与真实样本的分布相同呢？</p><p>其实本质上，GANs通过引入判别器来间接地计算了<span class="math inline">\(\frac{P_\theta(x)}{P_{data}(x)}\)</span>，可以证明，对于一个生成器下的最佳判别器对给定<span class="math inline">\(x\)</span>的判定为真实样本的概率是<span class="math inline">\(\frac{P_{data}(x)}{P_{data}(x) +P_\theta(x)}\)</span>， 证明如下：</p><p><em>*Proof*</em>: 二分类交叉熵损失函数为：</p><p><span class="math display">\[\begin{align} \mathrm{BCE}(\mathcalP_1,\mathcal P_2)&amp;=-\mathbb E_{x\sim \mathcal P_1}[\logD(x)]-\mathbb E_{x\sim \mathcal P_2}[\log(1-D(x))]\\ &amp;=-\int \logD(x)\cdot p_1(x)\mathrm d x-\int\log(1-D(x))\cdot p_2(x)\mathrm d x\\&amp;=-\int \left[\log D(x)\cdot p_1(x)+\log(1-D(x))\cdotp_2(x)\right]\mathrm d x\\ \end{align} \\\]</span></p><p>易知<span class="math inline">\(y=a\log x+b\log(1-x)\)</span>在<span class="math inline">\(x=\frac{a}{a+b}\)</span>处取到唯一极大值（其中<span class="math inline">\(0\leqa,b\leq1\)</span>），所以欲使上式最小，只需：</p><p><span class="math inline">\(\forallx,\,D(x)=\frac{p_1(x)}{p_1(x)+p_2(x)} \\\)</span>这样就证明完成了。</p><p>那么，再看我们的训练目标：</p><p><span class="math display">\[\min_G\max_D  V(G, D) \\  \begin{align}V(G, D)&amp;=\mathbb E_{x\sim\mathcal P_{data}}[\log D(x)]+\mathbbE_{z\sim \mathcal P_z}[\log(1-D(G(z)))]\\ &amp;=\mathbb E_{x\sim\mathcalP_{data}}[\log D(x)]+\mathbb E_{x\sim \mathcal P_{\theta}}[\log(1-D(x))]\end{align} \\\]</span></p><p>而最优判别器为：</p><p><span class="math inline">\(D^\ast(x)=\frac{p_{data}(x)}{p_{data}(x)+p_\theta(x)}\\\)</span> 将最优判别器代入<span class="math inline">\(G\)</span>的优化目标：</p><p><span class="math display">\[\begin{align} V(G, D^\ast)&amp;=\mathbbE_{x\sim \mathcalP_{data}}\left[\log\frac{p_{data}(x)}{p_{data}(x)+p_\theta(x)}\right]+\mathbbE_{x\sim \mathcalP_\theta}\left[\log\frac{p_\theta(x)}{p_{data}(x)+p_\theta(x)}\right]\\&amp;=2\mathrm {JS}(\mathcal P_{data}\|\mathcal P_\theta)-2\log2\end{align} \\\]</span></p><p>因此，生成器实际上在最小化<span class="math inline">\(\mathcalP_{data}\)</span>和<span class="math inline">\(\mathcalP_\theta\)</span>的<span class="math inline">\(\mathrm{JS}\)</span>散度，从而让生成数据的分布<span class="math inline">\(\mathcal P_\theta\)</span>接近真实分布<span class="math inline">\(\mathcal P_{data}\)</span>。</p><p><em><strong>注：</strong><span class="math inline">\(JS\)</span>散度的定义如下：</em></p><p>*<span class="math display">\[\begin{align} \mathrm{JS}(\mathcalP_1\|\mathcal P_2)&amp;=\frac{1}{2}\left[\mathrm{KL}\left(\mathcalP_1\|\mathcal P_A\right)+\mathrm{KL}\left(\mathcal P_2\|\mathcalP_A\right)\right]\\ &amp;=\log 2+\frac{1}{2}\mathbb E_{x\sim\mathcalP_1}\left[\log\frac{p_1(x)}{p_1(x)+p_2(x)}\right]+\frac{1}{2}\mathbbE_{x\sim\mathcal P_2}\left[\log\frac{p_2(x)}{p_1(x)+p_2(x)}\right]\end{align} \\\]</span></p><p>其相比<span class="math inline">\(KL\)</span>散度最大的特点便是其是对称的*。</p><p><img src="/images/GANs/2.png"><br>可以看出GANs是通过判别器来巧妙地规避了计算似然的问题，但正是因为在实践中我们很难得到真正的最佳判别器，所以实际上我们很多时候只是在优化<span class="math inline">\(JS\)</span>散度的一个下界，笔者认为这是GANs不得不直面的一个问题。</p><h2 id="fgan">fGAN</h2><h3 id="f-散度f-divergence">F-散度(F-divergence)</h3><p>在概率统计中，f散度是一个函数，这个函数用来衡量两个概率密度<span class="math inline">\(p\)</span>和<span class="math inline">\(q\)</span>的区别，也就是衡量这两个分布多么的相同或者不同。像<span class="math inline">\(KL\)</span>散度和<span class="math inline">\(JS\)</span>散度都是它的一种特例</p><p>f散度定义如下：</p><p><span class="math display">\[{D_f}(\mathcal P_1\|\mathcal P_2)=\int f(\frac{p_2(x)}{p_1(x)})\cdot p_1(x)\mathrm d x=\mathbb E_{x\sim\mathcalP_1}\left[f(\frac{p_2(x)}{p_1(x)})\right] \\\]</span><span class="math inline">\(f(·)\)</span>就是不同的散度函数，<span class="math inline">\(D_f\)</span>就是在f散度函数下，两个分布的差异。规定</p><p><em><span class="math inline">\(f\)</span>是凸函数(为了用琴生不等式)</em><span class="math inline">\(f ( 1 ) =0\)</span>(如果两个分布一样，刚好公式=0)</p><p><img src="/images/GANs/3.png"><br>这两个规定保证了<span class="math inline">\(D_f\)</span>是非负的，而且当两个分布相同时，其值为0，一些常见散度的<span class="math inline">\(f\)</span>定义如下：</p><p><img src="/images/GANs/4.png"></p><h3 id="共轭函数fenchel-conjugate">共轭函数(Fenchel Conjugate)</h3><p>一个函数<span class="math inline">\(f:\;\mathbb{R}^n\mapsto\mathbb{R}\)</span>的Frenchel 共轭为：</p><p><span class="math display">\[\begin{align} f^*( t)=\sup_{x}\big(\langle t, x\rangle-f( x)) \end{align}\]</span></p><p>Fenchel 共轭有几何上的解释。当<span class="math inline">\(x\)</span>固定时，<span class="math inline">\(\langle t, x\rangle-f(x)\)</span>是一个仿射函数，因此 Fenchel共轭就是一组仿射函数的上确界。如果<span class="math inline">\(f\)</span>可微，那么仿射函数取得上确界的位置正好是<span class="math inline">\(f\)</span>的切线，此处有<span class="math inline">\(\nabla f( x)= t\)</span>。</p><p>我们拿<span class="math inline">\(f ( x ) = x l o gx\)</span>来说，当<span class="math inline">\(x=10,1,0.1\)</span>时可以看到相应的函数直线，可以看到最大化y的点连起来是个凸函数，很类似<span class="math inline">\(e^{t-1}\)</span></p><p><img src="/images/GANs/5.png"><br>公式图像：</p><p><img src="/images/GANs/6.png"><br>用数学来推一下：</p><p>将<span class="math inline">\(f ( x ) = x l o g x\)</span>代入<span class="math inline">\(y ( t ) = x t − f ( x )\)</span>，得<span class="math inline">\(y ( x ) = x t − x l o gx\)</span>,对于每个给定的<span class="math inline">\(t\)</span>都可以求出最大值，求导为0即可。</p><p>求导后得：<span class="math inline">\(t − l o g x − 1 =0\)</span>,即<span class="math inline">\(x=e^{t-1}\)</span>，代入<span class="math inline">\(f^*(t)\)</span>, 得<span class="math inline">\(f^*(t)=te^{t-1}-e^{t-1}(t-1)=e^{t-1}\)</span></p><p>读者可以对这个<span class="math inline">\(f^*(t)\)</span>再求一次共轭，可以发现其又变回原函数了。</p><p>事实上，可以证明，对于凸函数来说<span class="math inline">\(f^{**}(x)= f(x)\)</span></p><p><img src="/images/GANs/7.png"></p><h3 id="应用于gan">应用于GAN</h3><p>那这个跟GAN有啥关系呢？</p><p>假如我们用一个<span class="math inline">\(D_f\)</span>来评估生成模型，对于<span class="math inline">\(p(x)\)</span>和<span class="math inline">\(q(x)\)</span>之间的 f-divergence：</p><p><span class="math display">\[\begin{aligned} D_f(P||Q) &amp;=\int_{x} q(x) f\left(\frac{p(x)}{q(x)}\right) dx \\           &amp;=\int_{x} q(x) \left( \max_{t \in \operatorname{dom}(f^*)}\left\{\frac{p(x)}{q(x)}t - f^*(t)\right\} \right) dx \end{aligned}\]</span></p><p>记一个函数 D(x)，它输入是<span class="math inline">\(x\)</span>，输出是<span class="math inline">\(t\)</span>，用该函数代替上式中的<span class="math inline">\(t\)</span>，得到</p><p><span class="math display">\[\begin{aligned} D_f(P||Q)&amp;\geq\int\limits_{x}q(x)(\frac{p(x)}{q(x)}D(x)-f^{*}(D(x)))dx\\ &amp;= \int\limits_{x}p(x)D(x)dx-\int \limits_{x}q(x)f^{*}(D(x))dx\end{aligned}\]</span></p><p>D(x)其实就是判别器，可以看出，它依然是在解一个求最大值问题，通过这种方法，去逼近f-divergence。</p><p><span class="math display">\[D_f(P||Q)\approx\max \limits_{D}\int\limits_{x}p(x)D(x)dx-\int \limits_{x}q(x)f^{*}(D(x))dx\]</span></p><p>p(x) 和 q(x) 本质上是一个概率，于是有</p><p><span class="math display">\[D_f(P||Q)\approx\max\limits_{D}\{E_{x\sim P}[D(x)]-E_{x\sim Q}[f^*(D(x))]\}\]</span></p><p>用<span class="math inline">\(P_{data}\)</span>和<span class="math inline">\(P_\theta\)</span>来指代 P 和 Q，有</p><p><span class="math display">\[D_f(P_{data}||P_\theta)\approx\max\limits_{D}\{E_{x\sim P_{data}}[D(x)]-E_{x\simP_\theta}[f^*(D(x))]\}\]</span></p><p>有没有发现这一套下来很熟悉？其实这还是我们之前训练生成器判别器的那一套流程。也就是</p><p><span class="math display">\[\begin{aligned} G^*&amp;=\mathop{argmin}\limits_{G}D_f(P_{data}||P_\theta)\\&amp;=\mathop{argmin}\limits_{G}\max \limits_{D}\{E_{x\sim P_{data}}[D(x)]-E_{x\simP_\theta}[f^*(D(x))]\}\\&amp;=\mathop{argmin} \limits_{G}\max\limits_{D}V(G, D) \end{aligned}\]</span></p><p>只不过这次的损失函数更加 general 了。换不同的<span class="math inline">\(f(x)\)</span>，就可以量不同的散度（divergence）。</p><p><img src="/images/GANs/8.png"></p><h2 id="wgan">WGAN</h2><h3 id="js散度-to-wassersteinearth-mover-em距离">JS散度 toWasserstein（Earth-Mover EM）距离</h3><h3 id="js散度的问题">JS散度的问题</h3><p>考虑两个分布"完全不相交"的时候，会发现<span class="math inline">\(JS\)</span>散度为常量，梯度为<span class="math inline">\(0\)</span>无法优化。</p><p>下面一个例子来说明:</p><p>假设两个二维空间上的概率分布，记为<span class="math inline">\({P}_d(X_1, Z)\)</span>和<span class="math inline">\({P}_g(X_2, Z)\)</span>。我们刻画<span class="math inline">\(Z \sim U(0, 1)\)</span>一个<span class="math inline">\([0, 1]\)</span>上的均匀分布，而分别令<span class="math inline">\(X_1 = 0\)</span>和<span class="math inline">\(X_2=\theta\)</span>，因而，它们在二维空间上的概率分布空间就是两条平行线（垂直于<span class="math inline">\(x\)</span>的轴，而平行于<span class="math inline">\(z\)</span>的轴）。<br>当<span class="math inline">\(\theta =0.5\)</span>时，我们考量等价于JS散度的损失函数<span class="math inline">\(V(G,D^*)\)</span>，由于两个分布概率大于0的空间范围是完全没有重叠的，因此，对于任意<span class="math inline">\(p_d(x,y) \ne 0\)</span>必然有<span class="math inline">\(p_g(x, y) =0\)</span>成立，反之亦然。</p><p>因而我们就有，对于任意<span class="math inline">\(x \in\mathbb{R}^2\)</span>，<br><span class="math display">\[V(G, D^*)= \int_x p_d(x) log\frac{p_{d}(x)}{p_{d}(x) + p_{g}(x)} + p_g(x)log\frac{p_{g}(x)}{p_{d}(x) + p_{g}(x)} dx   \\ = \int_x p_d(x) log (1) +p_g(x)log (1) dx = 0\\\]</span>此时，损失函数恒为常量，无法继续指导生成器<span class="math inline">\(G(x)\)</span>的优化。即此时出现了梯度消失的问题。</p><h3 id="wasserstein距离">Wasserstein距离</h3><p>为了弥补JS散度的局限性，我们需要一种全新的”分布间距离“的度量来进行优化，即使用Wasserstein距离，也被称为“推土机距离”（Earth-Mover），它定义如下：<br><span class="math inline">\(W({P}_d, {P}_g) = inf_{\gamma \in \Pi({P}_d,{P}_g)} {E}[||x - y||]\\\)</span>这样数学形式的刻画可能会让人看得颇为一头雾水，我们逐步来分析解释它。</p><p>其中，<span class="math inline">\(\Pi({P}_d,{P}_g)\)</span>代表一个<span class="math inline">\({P}_d,{P}_g\)</span>构成的联合分布的集合，且这个集合中的所有联合分布必须满足其边际分布分别为<span class="math inline">\({P}_d, {P}_g\)</span>。<span class="math inline">\(||x-y||\)</span>是两个分布所在空间<span class="math inline">\(\mathbb{R}^n\)</span>中两点的欧式距离。</p><p>我们可以将<span class="math inline">\(\Pi({P}_d,{P}_g)\)</span>中的元素理解为一种“概率的搬运方案”。 而<span class="math inline">\(\gamma\)</span>是上述集合中的一个联合分布，可以使得任意两点的欧式距离期望最小，即将一个分布搬运为另外一个分布的最小开销。</p><p><img src="/images/GANs/9.png"><br>此时，我们再重新观察上面的场景，当概率分布式为两条平行线上的均匀分布时，显然，最佳方案就是直接与x轴平行地进行概率搬运，对应为：<span class="math inline">\(W(P_0, P_\theta) =|\theta|\)</span>。此时，即使两个分布完全没有重叠部分，我们仍然能通过优化Wasserstein距离来实现两个概率分布之间的距离优化。</p><p>可以给出证明的是，就像JS散度一样，Wasserstein距离收敛于0时，两个分布也完全一致。</p><p>固然，通过Wasserstein距离优化GAN的想法颇为"美好"，不过，找到"最优搬运方案"的优化问题却是难事，在实现层面上，我们难以直接计算Wasserstein距离。不过，基于对偶理论可以将Wasserstein距离变换为积分概率度量IPM框架下的形式，来方便我们进行优化。</p><p>IPM也是用于衡量两个分布之间的距离，它的想法是寻找某种限制下的函数空间<span class="math inline">\(\mathbb{F}\)</span>中的一个函数<span class="math inline">\(f(·)\)</span>，使得对任意位置两个分布的差异最大：</p><p><span class="math display">\[d_F(p, q) = sup_{f \in F} \mathbb{E}_{x\sim P}[f(x)] - \mathbb{E}_{x \sim Q}[f(x)]\\\]</span>对于Wasserstein距离而言，则变为：</p><p><span class="math display">\[W(p, q) = sup_{||f||_L \le 1}\mathbb{E}_{x \sim P}[f(x)] - \mathbb{E}_{x \sim Q}[f(x)]\\\]</span>因而，在函数<span class="math inline">\(f(·)\)</span>满足Lipschitz约束的函数空间中，即<span class="math inline">\(||f(x) - f(y)|| \le K||x -y||\)</span>，找到最佳的函数<span class="math inline">\(f(·)\)</span>，该情况下上式的结果则为Wasserstein距离。</p><p>这个函数<span class="math inline">\(f(·)\)</span>难以求解，但我们可以用神经网络来拟合它。需要注意的是，从此开始，GAN的<span class="math inline">\(D\)</span>就不再是先前我们认为的“真假判别器”了，它的意义变成了一个距离的度量。此时，GAN的生成器并不改变仍然生产图片，对生成器的训练则是减小与真实分布的Wasserstein距离，判别器<span class="math inline">\(D\)</span>负责给出真实图像和生产图像样本之间的Wasserstein距离，相应的，在固定生成器优化判别器时，化则变为了寻找函数空间<span class="math inline">\(\mathbb{F}\)</span>中最佳的<span class="math inline">\(f(·)\)</span>。</p><p><img src="/images/GANs/10.png"><br>下面的图就可以体现传统GAN的判别器梯度和WGAN的判别器梯度的区别</p><p><img src="/images/GANs/11.png"><br>WGAN便有效解决了某些情况下传统GAN的梯度消失的问题</p>]]></content>
    
    
    <categories>
      
      <category>Stanford CS236深度生成模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生成模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Normalizing Flows</title>
    <link href="/2024/09/17/Normalizing%20Flows/"/>
    <url>/2024/09/17/Normalizing%20Flows/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习StanfordCS236课程的学习笔记，分享记录，也便于自己实时查看。</p><h2 id="引入">引入</h2><p>生成模型模型的目的是让得到的数据分布<span class="math inline">\(P_{\theta}\)</span>与真实的数据分布<span class="math inline">\(P_{data}\)</span>相同，也就是需要通过给定的样本来建模对应的分布，使得输入经过该模型后可以生成与给定样本类似的新样本。在这种意义下，评估的最佳方式便是使用<strong>极大似然估计</strong>，然而VAEs的做法导致计算似然十分复杂，所以我们只能选择计算似然的下界，也就是ELBO。</p><p>不妨思考一下，VAEs无法计算似然的原因是什么。不难发现，关键在于需要对所有的潜变量<span class="math inline">\(z\)</span>进行积分。所以假如我们有一个<strong>可逆映射</strong>，使得潜变量<span class="math inline">\(z\)</span>和数据<span class="math inline">\(x\)</span>之间的是一一对应的，那我们便可以很轻松计算似然了。</p><p>Normalizing Flows正是这么做的。但可逆映射意味着潜变量<span class="math inline">\(z\)</span>的维度需要和数据<span class="math inline">\(x\)</span>的<strong>维度一致</strong>，所以我们无法利用<span class="math inline">\(z\)</span>进行压缩。</p><h2 id="简介">简介</h2><p>正则化流（NormalizingFlow）是一种<strong>可逆生成模型</strong>，用于将一个原始分布通过学习的变换映射到另一个<strong>已知</strong>的概率分布。它可以<strong>将数据从原始分布转换为目标分布</strong>，从而实现数据的生成和采样。</p><p>在正则化流中，我们定义一个变换函数，它将输入样本从原始分布映射到目标分布。这个映射是一个<strong>可逆函数</strong>，确保转换是可逆的，也就是说，在给定目标分布样本的情况下，可以逆向计算出原始分布的样本。这个变换函数通常由一系列的可逆操作组成，每个操作都是可逆的，并且通过组合这些操作可以得到整个变换。常用的可逆操作包括仿射变换、尺度变换、平移变换等。</p><h2 id="原理">原理</h2><h3 id="变量替换">变量替换</h3><p>变量替换的形式如下：<span class="math inline">\(p_{X}(X)=p_{Z}(f(X))|det~J(f(X))|\)</span></p><p><em><span class="math inline">\(Z=f(X)\)</span>是一个可逆的变换</em><span class="math inline">\(J(f(X))\)</span>是<span class="math inline">\(f(X)\)</span>的雅可比行列式</p><p>如何理解呢：即给出一个<span class="math inline">\(X\)</span>，使用一个可逆变换<span class="math inline">\(f(\cdot)\)</span>将<span class="math inline">\(X\)</span>变为<span class="math inline">\(Z\)</span>，那么<span class="math inline">\(p(X)、p(Z)\)</span>这两个分布之间相差的就是这样一个雅可比行列式。</p><figure><img src="/images/Normalizing%20Flows/1.png" alt="1.png"><figcaption aria-hidden="true">1.png</figcaption></figure><h3 id="流的组合">流的组合</h3><p>基本原理：可导的可逆的函数在进行组合后依然是一个可导且可逆的函数</p><p>标准化方向：<span class="math inline">\(f=f_{1}\circf_{2}\circ....f_{N}\)</span></p><p>采样构造概率的方向：<span class="math inline">\(g=g_{N} \circ g_{N-1}\circ .... \circ g_{1}\)</span></p><figure><img src="/images/Normalizing%20Flows/2.png" alt="2.png"><figcaption aria-hidden="true">2.png</figcaption></figure><p>这种流动的感觉就是标准化流这个名字的由来。</p><p>而由<span class="math inline">\(p_{X}(X)=p_{Z}(f(X))|det~J(f(X))|\)</span>可知，上面组合出来的<span class="math inline">\(f\)</span>的雅可比行列式刚好可以表示为每一个<span class="math inline">\(f_{i}\)</span>的<strong>雅可比行列式</strong>相乘再求行列式。</p><p><span class="math inline">\(det~J(f)=det\prod_{i=1}^{N}J(f_{i})=\prod_{i=1}^{N}det~J(f_{i})\)</span></p><p>因为每一个样本都是独立同分布采样出来的，所以它的loglikelihood就是把他们的每一个loglikelihood加起来。由于做过变量代换，就可以把它变成<strong>我们知道的非常简单的分布</strong>加上剩下的<strong>log雅可比行列式</strong>的和。</p><figure><img src="/images/Normalizing%20Flows/3.png" alt="3.png"><figcaption aria-hidden="true">3.png</figcaption></figure><h3 id="计算">计算</h3><p>通过最大似然估计，我们便可以训练模型了。但问题在于，如何构建这种可逆映射和如何让雅可比行列式方便计算。因为对于一般的雅可比行列式的计算复杂度是<span class="math inline">\(O(n^3)\)</span>，但是我们可以构造<strong>半三角的雅可比行矩阵</strong>，这样行列式的计算复杂度只有<span class="math inline">\(O(n)\)</span>了</p><h2 id="nice-non-linear-independent-components-estimation">NICE:Non-linear Independent Components Estimation</h2><p>NICE的目标是找到一个transformation<span class="math inline">\(z=f(x)\)</span>, 将数据映射到一个新的空间中;这个空间中的<span class="math inline">\(z\)</span>的各个分量<span class="math inline">\(z_d\)</span>之间都是<strong>独立的</strong>,即<span class="math inline">\(p_\theta(z)=\prod_dp_{\theta_d}(z_d)\)</span>.在这种"各分量独立"的假设下,模型会自发地学习"most important factors of variation"; 否则, 比如<span class="math inline">\(h_1\)</span>和<span class="math inline">\(h_2\)</span>之间不独立,那么就浪费了一部分建模能力, 从而无法达到最好的建模效果.</p><p>通过<span class="math inline">\(z\)</span>的先验分布和<span class="math inline">\(x=f^{-1}(z)\)</span>, 可以实现<span class="math inline">\(x\)</span>的生成(采样)。一般可以假定<span class="math inline">\(z\)</span>的分布满足标准高斯分布。</p><h3 id="映射构造additive-coupling-layer">映射构造(Additive couplinglayer)</h3><p>如何构造构造半三角的雅可比行矩阵呢？NICE给出的方法是：</p><p><span class="math inline">\(z_{1\sim d} = x_{1\sim d}\)</span></p><p><span class="math inline">\(z_{ {d\sim D} } = x_{ {d\sim D} } +u_{\theta}(x_{ {1\sim d} })\)</span></p><p>这个变换的雅克比矩阵为</p><p><span class="math display">\[\frac{\partial z}{\partial x}=\left[       \begin{array}{cc}      I_d&amp;  \bar{0}  \\      [\frac{\partial u_\theta}{\partial x_{1\sim d}}]  &amp;  I_{n-d}  \\   \end{array}    \right]   \]</span></p><p>这个映射的逆变换也很简单，为</p><p><span class="math inline">\(x_{1\sim d} = z_{1\sim d}\)</span></p><p><span class="math inline">\(x_{ {d\sim D} } = z_{ {d\sim D} } -u_{\theta}(z_{ {1\sim d} })\)</span></p><h3 id="combining-coupling-layers">Combining coupling layers</h3><p>事实上, 这个<span class="math inline">\(f\)</span>是要用很多层叠在一起得到的, 即<span class="math inline">\(f=f_L \circ ... \circ f_2 \circ f_1\)</span>。在堆叠coupling layer的时候,注意到每个变换有一部分输入是不变的。这样才能让所有部分都能得到变换. 即,第一层<span class="math inline">\(z_1=x_1\)</span>, 变<span class="math inline">\(x_2\)</span>, 那么第二层就<span class="math inline">\(z_2=x_2\)</span>, 变<span class="math inline">\(z_1\)</span>.</p><p>另外, 堆叠后的雅克比行列式为</p><p><span class="math display">\[\left|\det \frac{\partial z}{\partial x} \right| = \left|\det\frac{\partial f_L(x)}{\partial f_{L-1}(x)}\right| \cdot \left|\det\frac{\partial f_{L-1}(x)}{\partial f_{L-2}(x)}\right| \cdot \ldots\cdot \left|\det \frac{\partial f_2(x)}{\partial f_1(x)}\right|\]</span></p><p>这些行列式的绝对值为1。</p><h3 id="allowing-scaling">Allowing scaling</h3><p>因为每个行列式的绝对值都是1, 因此<span class="math inline">\(f\)</span>是volume preserving（体积不变的）的.为了消除这个限制, 在<span class="math inline">\(f_L\)</span>后又乘了一个diagonal scalingmatrix<span class="math inline">\(S\)</span>, 即<span class="math inline">\(z=S \cdot f_{1, ...,L}(x)\)</span>.这样既可以让一些重要特征又更大的变化范围,又可以让一些不重要的特征减小变化范围(降维). 所以最后目标函数为</p><p><span class="math inline">\(\log p_X(x)=\sum_{i=1}^D [\logp_{H_i}(f_i(x)) + \log |S_{ii}|]\)</span></p><h2 id="density-estimation-using-real-nvp">Density Estimation Using RealNVP</h2><p><strong>RealNVP</strong>将<strong>NICE</strong>中的每一层的映射改为如下:</p><p><span class="math inline">\(\begin{aligned} z_{1:d}&amp;=x_{1:d}\\z_{d+1:D} &amp;=x_{d+1:D} \odot exp(s(x_{1:d})) +t(x_{1:d})\end{aligned}\)</span></p><p>逆变换为</p><p><span class="math inline">\(\begin{aligned} x_{1:d}&amp;=z_{1:d}\\x_{d+1:D} &amp;=(z_{d+1:D}- t(x_{1:d})) \odot exp(-s(x_{1:d}))\end{aligned}\)</span></p><p>这个变换的雅克比矩阵为</p><p><span class="math display">\[  \frac{\partial z}{\partial x}=\left[       \begin{array}{cc}      I_d&amp;  \bar{0}  \\      \frac{\partial z_{d+1:D} }{\partial x_{1:d}}  &amp;  diag(exp(s(x_{1:d})))  \\   \end{array}    \right]   \]</span></p><p>其中<span class="math inline">\(diag(exp(s(x_{1:d})))\)</span>是将<span class="math inline">\(exp(s(x_{1:d}))\)</span>这个向量展开为对角矩阵.这个雅克比矩阵的log-determinant为 <span class="math display">\[\prod_{i=1}^d \log \exp(s(x_{1:d}))=\sum_{i=1}^ds(x_{1:d})\]</span> 其中没有任何<span class="math inline">\(s\)</span>和<span class="math inline">\(t\)</span>行列式的计算,因此二者可以任意复杂且hidden layer采用不同于输入的维度.</p><p>这样我们便完成了一个更加复杂的构造，同时它的表现也自然比NICE更好。</p>]]></content>
    
    
    <categories>
      
      <category>Stanford CS236深度生成模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生成模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VAEs</title>
    <link href="/2024/09/13/VAEs/"/>
    <url>/2024/09/13/VAEs/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记用于记录我学习StanfordCS236课程的学习笔记，分享记录，也便于自己实时查看。</p><h2 id="潜变量">潜变量</h2><p>对于生成模型，我们可以试图寻找一组潜变量z，这个潜变量可以有具体含义，例如对于人脸生成模型的眼睛，鼻子，嘴巴等。通过修改这些潜变量我们可以得到不同风格的生成对象。但是对于图片或者自然语言而言，人为指定这种潜变量极为困难。</p><p>所以我们可以并不人为指定潜变量的含义，例如无监督学习的GMM（高斯混合聚类）就并没有指定每个类别具体的含义。但高斯混合聚类人为指定了类别的数量，这对于生成模型也是很难实现定义的。</p><p>对于GMM来说，事实上是定义了一组离散的潜变量，在每个潜变量下的数据分布服从高斯分布，它可以给我们一些启示，虽然每个类别的概率只是定义为正态分布，但它组合之后可以形成非常复杂的概率分布。</p><p><img src="/images/VAEs/1.png"><br>所以不妨我们可以设定有无穷多个高斯聚类的组合，即设定潜变量 z是一个连续的随机变量，而每个潜变量 z的值对应于一个高斯分布，事实上这也正是VAEs做的</p><h2 id="核心思想">核心思想</h2><p>VAE 的目标是学习一个生成器，将随机向量<span class="math inline">\(z\in R^d\)</span>映射到<span class="math inline">\(x \in R^D\)</span>,使得<span class="math inline">\(x\)</span>的分布尽可能接近真实数据的分布。</p><p>这里的<span class="math inline">\(z\)</span>其实就是上面提到的潜变量，他是一个连续的随机变量，实践中一般定义为服从高斯分布。而对于每个z的值，我们假设x的分布是满足均值为<span class="math inline">\(\mu(z)\)</span>，协方差矩阵为<span class="math inline">\(\Sigma(z)\)</span>（可以通过神经网络进行学习）的高斯分布。理论上这样的组合可以逼近任意的概率分布。</p><p><img src="/images/VAEs/2.png"><br>当然PPT中的<span class="math inline">\(z\sim N(0,I)\)</span>只是一个例子，也可以有更复杂的定义，但在实践中<strong>一般使用标准正态分布</strong>。</p><h2 id="生成和训练">生成和训练</h2><h3 id="损失函数">损失函数</h3><p>对于一个生成模型来说，<strong>生成和评估</strong>的难易很大程度上决定了它的实用性和价值。对于上面VAE的假设来说，生成是很简单。即假设我们已经知道了<span class="math inline">\(p(x|z)\)</span>，我们只需要先<strong>采样<span class="math inline">\(z\)</span>，再采样<span class="math inline">\(x\)</span></strong> 就能得到数据。</p><p>但是评估并不容易，这意味着模型的训练可能是一个棘手的问题。对于评估，既然是衡量两个分布的相似度，我们能否直接用各种散度（如KL 散度）作为损失函数呢？当然可以。在蒙特卡洛抽样（Monte CarloSampling）下，最小化KL散度就是<strong>最大似然估计</strong>。</p><p>那么我们的目标是<span class="math inline">\(θ_∗=argmax \sum_{i=1}^{n}logp_θ​(x_i)\)</span>，注意到</p><p><span class="math inline">\(\sum logP_\theta(x) =\sum  log(\sumq(z)P_\theta(x|z))\)</span></p><p>对于等式右边的计算是非常复杂的，因为<span class="math inline">\(z\)</span>的取值理论上具有无穷多个</p><p><img src="/images/VAEs/3.png"><br>所以我们需要对这个公式进行简化，注意到</p><p><span class="math display">\[\begin{align}P_\theta(x) &amp;= \sum (q(z) \frac{p_\theta(z, x)}{q(z)}) \nonumber \\            &amp;= E_{z \simq(z)}\left(\frac{p_\theta(z,x)}{q(z)}\right)\end{align}\]</span></p><p>通过<strong>蒙特卡洛抽样</strong>（Monte CarloSampling），我们可以从<span class="math inline">\(q(z)\)</span>中采样若干数据点，然后进行平均即可估计<span class="math inline">\(P_\theta(x)\)</span>的值。但很可惜，我们无法通过蒙特卡洛抽样来估计<span class="math inline">\(log(P_\theta(x))\)</span>, 因为</p><p><span class="math inline">\(log(E_{z \simq(z)}(\frac{p_\theta(z,x)}{q(z)})) \ne E_{z \simq(z)}(log(\frac{p_\theta(z,x)}{q(z)}))\)</span></p><p><img src="/images/VAEs/4.png"><br>但幸运的是，对于对数函数是一个严格的<strong>凹函数</strong>，所以对于凹函数来说有</p><p><span class="math inline">\(log(px + (1-p)x^{&#39;}) \geq plogx+(1-p)logx^{&#39;}\)</span>，进一步扩展便就是著名的琴生不等式：</p><p><img src="/images/VAEs/5.png"></p><p>琴生不等式</p><p>因此<span class="math inline">\(log(E_{z \simq(z)}(\frac{p_\theta(z,x)}{q(z)})) \geq E_{z \simq(z)}(log(\frac{p_\theta(z,x)}{q(z)}))\)</span></p><p>所以我们可以通过这种方法来<strong>估计似然的下限</strong>，即上面不等号的右边，叫做<strong>ELBO（EvidenceLower Bound）</strong></p><p><img src="/images/VAEs/6.png"><br>至于这个界限有多紧，我们对<span class="math inline">\(logP(x)\)</span>进行一下推导，就能得到它们之间相差的便是<span class="math inline">\(D_{KL}(q(z)||p(z|x;\theta)\)</span>，也就是说当<span class="math inline">\(q(z)\)</span>与我们的后验分布越接近，这个界限越紧。</p><p><img src="/images/VAEs/7.png"><br>其实这里的推导就是<strong>EM算法里面的推导</strong>，最大化ELBO的过程就是对应于EM算法里面的M步（后续有机会可能也会写一写）。非常可惜的是，EM算法无法直接应用于此，因为 E-step 要求我们能够表达出后验分布<span class="math inline">\(p_\theta(z|x)\)</span>，但没关系，如果我们能够最大化ELBO，也能保证似然的下限被最大化。</p><p>问题似乎解决了，但值得注意的是，ELBO 是关于函数<span class="math inline">\(q\)</span>的<strong>泛函</strong>，也就是说<span class="math inline">\(q\)</span>可以取任意函数，这并不好直接优化。为了解决这个问题，我们可以将<span class="math inline">\(q(z)\)</span>限制为以<span class="math inline">\(\phi\)</span>为参数的某<strong>可解分布族<span class="math inline">\(q_\phi(z|x)\)</span></strong>，这样优化变量就从函数<span class="math inline">\(q\)</span>变成了参数<span class="math inline">\(\phi\)</span>。不过，由于我们限制了<span class="math inline">\(q\)</span>的形式，所以即便能求出最优的参数<span class="math inline">\(\phi\)</span>，也大概率不是<span class="math inline">\(q\)</span>的最优解。显然，为了尽可能逼近最优解，我们应该让选取的分布族越复杂越好。</p><p><img src="/images/VAEs/8.png"><br><strong>那么这里有一个小问题</strong>——为什么<span class="math inline">\(q(z)\)</span>参数化后写作<span class="math inline">\(q_\phi(z|x)\)</span>而不是<span class="math inline">\(q_\phi(z)\)</span>?</p><p>首先，<span class="math inline">\(q\)</span>本来就是我们人为引入的，它是否以<span class="math inline">\(x\)</span>为条件完全是我们的设计，且并不与之前的推导冲突；其次，ELBO与似然当<span class="math inline">\(q(z)=p_θ(z|x)\)</span>时是完全等价的，可见对于不同的<span class="math inline">\(x\)</span>，其<span class="math inline">\(q(z)\)</span>的最佳形式是不同的，所以这么设定有利于<strong>减少ELBO与似然的距离</strong>。</p><p><img src="/images/VAEs/9.png"><br>在VAE中 的<span class="math inline">\(p_θ(x|z)\)</span>和<span class="math inline">\(q_\phi(z|x)\)</span>都由神经网络表示，因此我们用<strong>梯度下降</strong>来最大化ELBO 即可。即对ELBO取负数就是最终的损失函数。</p><p><img src="/images/VAEs/10.png"><br>注意到这样的形式中并没有<span class="math inline">\(p_θ(x|z)\)</span>一项，我们只需要稍微变化一下：</p><p><span class="math display">\[\begin{align}L(x;\theta, \phi) &amp;= \sum q_{\phi}(z|x)\left[\log(p_{\theta}(z,x;\theta)) - \log(q_{\phi}(z|x))\right] \\                  &amp;= \sum q_{\phi}(z|x)\left[\log(p_{\theta}(z,x;\theta)) - \log(p(z)) + \log(p(z)) -\log(q_{\phi}(z|x))\right] \\                  &amp;= \sum q_{\phi} (z|x)\left[\log(p_{\theta}(x|z))- \log\left(\frac{q_{\phi}(z|x)}{p(z)}\right)\right] \\                  &amp;= E_{z \simq_{\phi}(z|x)}\left[\log(p_{\theta}(x|z))\right] - D_{KL}(q_{\phi}(z|x)|| p(z))\end{align}\]</span></p><p>这里就把我们的目标分成了两项：</p><ol type="1"><li>第一项是<strong>重构项</strong>，要求我们尽可能重构数据本身</li><li>第二项是<strong>正则项</strong>，要求我们的后验与先验接近</li></ol><p>所以可以看到，它与自动编码器最大的区别在于有第二项，这保证了隐藏变量<span class="math inline">\(z\)</span>的分布，从而我们<strong>可以从先验中对<span class="math inline">\(z\)</span>取样</strong>从而进行生成。换句话来说，VAEs是对潜变量进行了正则化的自动编码器，因为我们知道了潜变量<span class="math inline">\(z\)</span>的分布形式，所以它能够用于生成。</p><p>按照<strong>蒙特卡洛抽样</strong>（Monte CarloSampling），理论上求这个期望需要对每个样本多次采样进行计算，最后平均。但在具体实践中，往往采样一次进行计算就行。</p><h3 id="梯度计算细节重参数化技巧">梯度计算细节：重参数化技巧</h3><p>有一个细节是现在<span class="math inline">\(z\)</span>是从</p><p><span class="math inline">\(q_\phi(z|x)∼N(μ_ϕ(x)，diag(\sigma^{2}_ϕ(x)))\)</span></p><p>中采样的，但梯度无法经过采样传播到参数<span class="math inline">\(\phi\)</span>。但其实解决方法很简单，对于高斯函数，只需要先从<span class="math inline">\(N(0,I)\)</span>中采样<span class="math inline">\(\epsilon\)</span>再计算<span class="math inline">\(z=μ_ϕ(x)+\epsilon⋅σ_ϕ(x)\)</span>即可。</p><p>这种技巧也叫做<strong>重参数化技巧</strong>，其最开始应该是在强化学习中出现的，后面有时间也可以写一写。</p><p><img src="/images/VAEs/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>Stanford CS236深度生成模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生成模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
